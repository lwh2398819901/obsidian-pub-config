"use strict";const ot=require("obsidian");/**
* @vue/shared v3.4.21
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/function ps(t,e){const n=new Set(t.split(","));return e?s=>n.has(s.toLowerCase()):s=>n.has(s)}const bt={},Te=[],Vt=()=>{},bi=()=>!1,En=t=>t.charCodeAt(0)===111&&t.charCodeAt(1)===110&&(t.charCodeAt(2)>122||t.charCodeAt(2)<97),ms=t=>t.startsWith("onUpdate:"),Dt=Object.assign,gs=(t,e)=>{const n=t.indexOf(e);n>-1&&t.splice(n,1)},xi=Object.prototype.hasOwnProperty,wt=(t,e)=>xi.call(t,e),lt=Array.isArray,Ie=t=>qe(t)==="[object Map]",An=t=>qe(t)==="[object Set]",Us=t=>qe(t)==="[object Date]",ut=t=>typeof t=="function",zt=t=>typeof t=="string",fe=t=>typeof t=="symbol",xt=t=>t!==null&&typeof t=="object",ws=t=>(xt(t)||ut(t))&&ut(t.then)&&ut(t.catch),gr=Object.prototype.toString,qe=t=>gr.call(t),ki=t=>qe(t).slice(8,-1),wr=t=>qe(t)==="[object Object]",vs=t=>zt(t)&&t!=="NaN"&&t[0]!=="-"&&""+parseInt(t,10)===t,Ne=ps(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),On=t=>{const e=Object.create(null);return n=>e[n]||(e[n]=t(n))},Ci=/-(\w)/g,Pe=On(t=>t.replace(Ci,(e,n)=>n?n.toUpperCase():"")),Si=/\B([A-Z])/g,De=On(t=>t.replace(Si,"-$1").toLowerCase()),vr=On(t=>t.charAt(0).toUpperCase()+t.slice(1)),Hn=On(t=>t?`on${vr(t)}`:""),he=(t,e)=>!Object.is(t,e),dn=(t,e)=>{for(let n=0;n<t.length;n++)t[n](e)},vn=(t,e,n)=>{Object.defineProperty(t,e,{configurable:!0,enumerable:!1,value:n})},_s=t=>{const e=parseFloat(t);return isNaN(e)?t:e},Ti=t=>{const e=zt(t)?Number(t):NaN;return isNaN(e)?t:e};let Rs;const _r=()=>Rs||(Rs=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});function Je(t){if(lt(t)){const e={};for(let n=0;n<t.length;n++){const s=t[n],i=zt(s)?Oi(s):Je(s);if(i)for(const r in i)e[r]=i[r]}return e}else if(zt(t)||xt(t))return t}const Ii=/;(?![^(]*\))/g,Ei=/:([^]+)/,Ai=/\/\*[^]*?\*\//g;function Oi(t){const e={};return t.replace(Ai,"").split(Ii).forEach(n=>{if(n){const s=n.split(Ei);s.length>1&&(e[s[0].trim()]=s[1].trim())}}),e}function At(t){let e="";if(zt(t))e=t;else if(lt(t))for(let n=0;n<t.length;n++){const s=At(t[n]);s&&(e+=s+" ")}else if(xt(t))for(const n in t)t[n]&&(e+=n+" ");return e.trim()}const Pi="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",zi=ps(Pi);function yr(t){return!!t||t===""}function Li(t,e){if(t.length!==e.length)return!1;let n=!0;for(let s=0;n&&s<t.length;s++)n=Pn(t[s],e[s]);return n}function Pn(t,e){if(t===e)return!0;let n=Us(t),s=Us(e);if(n||s)return n&&s?t.getTime()===e.getTime():!1;if(n=fe(t),s=fe(e),n||s)return t===e;if(n=lt(t),s=lt(e),n||s)return n&&s?Li(t,e):!1;if(n=xt(t),s=xt(e),n||s){if(!n||!s)return!1;const i=Object.keys(t).length,r=Object.keys(e).length;if(i!==r)return!1;for(const a in t){const l=t.hasOwnProperty(a),c=e.hasOwnProperty(a);if(l&&!c||!l&&c||!Pn(t[a],e[a]))return!1}}return String(t)===String(e)}function Bi(t,e){return t.findIndex(n=>Pn(n,e))}const Tt=t=>zt(t)?t:t==null?"":lt(t)||xt(t)&&(t.toString===gr||!ut(t.toString))?JSON.stringify(t,br,2):String(t),br=(t,e)=>e&&e.__v_isRef?br(t,e.value):Ie(e)?{[`Map(${e.size})`]:[...e.entries()].reduce((n,[s,i],r)=>(n[Wn(s,r)+" =>"]=i,n),{})}:An(e)?{[`Set(${e.size})`]:[...e.values()].map(n=>Wn(n))}:fe(e)?Wn(e):xt(e)&&!lt(e)&&!wr(e)?String(e):e,Wn=(t,e="")=>{var n;return fe(t)?`Symbol(${(n=t.description)!=null?n:e})`:t};/**
* @vue/reactivity v3.4.21
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/let qt;class Di{constructor(e=!1){this.detached=e,this._active=!0,this.effects=[],this.cleanups=[],this.parent=qt,!e&&qt&&(this.index=(qt.scopes||(qt.scopes=[])).push(this)-1)}get active(){return this._active}run(e){if(this._active){const n=qt;try{return qt=this,e()}finally{qt=n}}}on(){qt=this}off(){qt=this.parent}stop(e){if(this._active){let n,s;for(n=0,s=this.effects.length;n<s;n++)this.effects[n].stop();for(n=0,s=this.cleanups.length;n<s;n++)this.cleanups[n]();if(this.scopes)for(n=0,s=this.scopes.length;n<s;n++)this.scopes[n].stop(!0);if(!this.detached&&this.parent&&!e){const i=this.parent.scopes.pop();i&&i!==this&&(this.parent.scopes[this.index]=i,i.index=this.index)}this.parent=void 0,this._active=!1}}}function $i(t,e=qt){e&&e.active&&e.effects.push(t)}function Ui(){return qt}let _e;class ys{constructor(e,n,s,i){this.fn=e,this.trigger=n,this.scheduler=s,this.active=!0,this.deps=[],this._dirtyLevel=4,this._trackId=0,this._runnings=0,this._shouldSchedule=!1,this._depsLength=0,$i(this,i)}get dirty(){if(this._dirtyLevel===2||this._dirtyLevel===3){this._dirtyLevel=1,xe();for(let e=0;e<this._depsLength;e++){const n=this.deps[e];if(n.computed&&(Ri(n.computed),this._dirtyLevel>=4))break}this._dirtyLevel===1&&(this._dirtyLevel=0),ke()}return this._dirtyLevel>=4}set dirty(e){this._dirtyLevel=e?4:0}run(){if(this._dirtyLevel=0,!this.active)return this.fn();let e=ue,n=_e;try{return ue=!0,_e=this,this._runnings++,Ms(this),this.fn()}finally{Fs(this),this._runnings--,_e=n,ue=e}}stop(){var e;this.active&&(Ms(this),Fs(this),(e=this.onStop)==null||e.call(this),this.active=!1)}}function Ri(t){return t.value}function Ms(t){t._trackId++,t._depsLength=0}function Fs(t){if(t.deps.length>t._depsLength){for(let e=t._depsLength;e<t.deps.length;e++)xr(t.deps[e],t);t.deps.length=t._depsLength}}function xr(t,e){const n=t.get(e);n!==void 0&&e._trackId!==n&&(t.delete(e),t.size===0&&t.cleanup())}let ue=!0,Xn=0;const kr=[];function xe(){kr.push(ue),ue=!1}function ke(){const t=kr.pop();ue=t===void 0?!0:t}function bs(){Xn++}function xs(){for(Xn--;!Xn&&Qn.length;)Qn.shift()()}function Cr(t,e,n){if(e.get(t)!==t._trackId){e.set(t,t._trackId);const s=t.deps[t._depsLength];s!==e?(s&&xr(s,t),t.deps[t._depsLength++]=e):t._depsLength++}}const Qn=[];function Sr(t,e,n){bs();for(const s of t.keys()){let i;s._dirtyLevel<e&&(i??(i=t.get(s)===s._trackId))&&(s._shouldSchedule||(s._shouldSchedule=s._dirtyLevel===0),s._dirtyLevel=e),s._shouldSchedule&&(i??(i=t.get(s)===s._trackId))&&(s.trigger(),(!s._runnings||s.allowRecurse)&&s._dirtyLevel!==2&&(s._shouldSchedule=!1,s.scheduler&&Qn.push(s.scheduler)))}xs()}const Tr=(t,e)=>{const n=new Map;return n.cleanup=t,n.computed=e,n},ts=new WeakMap,ye=Symbol(""),es=Symbol("");function Ht(t,e,n){if(ue&&_e){let s=ts.get(t);s||ts.set(t,s=new Map);let i=s.get(n);i||s.set(n,i=Tr(()=>s.delete(n))),Cr(_e,i)}}function ee(t,e,n,s,i,r){const a=ts.get(t);if(!a)return;let l=[];if(e==="clear")l=[...a.values()];else if(n==="length"&&lt(t)){const c=Number(s);a.forEach((h,b)=>{(b==="length"||!fe(b)&&b>=c)&&l.push(h)})}else switch(n!==void 0&&l.push(a.get(n)),e){case"add":lt(t)?vs(n)&&l.push(a.get("length")):(l.push(a.get(ye)),Ie(t)&&l.push(a.get(es)));break;case"delete":lt(t)||(l.push(a.get(ye)),Ie(t)&&l.push(a.get(es)));break;case"set":Ie(t)&&l.push(a.get(ye));break}bs();for(const c of l)c&&Sr(c,4);xs()}const Mi=ps("__proto__,__v_isRef,__isVue"),Ir=new Set(Object.getOwnPropertyNames(Symbol).filter(t=>t!=="arguments"&&t!=="caller").map(t=>Symbol[t]).filter(fe)),Ns=Fi();function Fi(){const t={};return["includes","indexOf","lastIndexOf"].forEach(e=>{t[e]=function(...n){const s=vt(this);for(let r=0,a=this.length;r<a;r++)Ht(s,"get",r+"");const i=s[e](...n);return i===-1||i===!1?s[e](...n.map(vt)):i}}),["push","pop","shift","unshift","splice"].forEach(e=>{t[e]=function(...n){xe(),bs();const s=vt(this)[e].apply(this,n);return xs(),ke(),s}}),t}function Ni(t){const e=vt(this);return Ht(e,"has",t),e.hasOwnProperty(t)}class Er{constructor(e=!1,n=!1){this._isReadonly=e,this._isShallow=n}get(e,n,s){const i=this._isReadonly,r=this._isShallow;if(n==="__v_isReactive")return!i;if(n==="__v_isReadonly")return i;if(n==="__v_isShallow")return r;if(n==="__v_raw")return s===(i?r?to:zr:r?Pr:Or).get(e)||Object.getPrototypeOf(e)===Object.getPrototypeOf(s)?e:void 0;const a=lt(e);if(!i){if(a&&wt(Ns,n))return Reflect.get(Ns,n,s);if(n==="hasOwnProperty")return Ni}const l=Reflect.get(e,n,s);return(fe(n)?Ir.has(n):Mi(n))||(i||Ht(e,"get",n),r)?l:Wt(l)?a&&vs(n)?l:l.value:xt(l)?i?Lr(l):Ss(l):l}}class Ar extends Er{constructor(e=!1){super(!1,e)}set(e,n,s,i){let r=e[n];if(!this._isShallow){const c=ze(r);if(!_n(s)&&!ze(s)&&(r=vt(r),s=vt(s)),!lt(e)&&Wt(r)&&!Wt(s))return c?!1:(r.value=s,!0)}const a=lt(e)&&vs(n)?Number(n)<e.length:wt(e,n),l=Reflect.set(e,n,s,i);return e===vt(i)&&(a?he(s,r)&&ee(e,"set",n,s):ee(e,"add",n,s)),l}deleteProperty(e,n){const s=wt(e,n);e[n];const i=Reflect.deleteProperty(e,n);return i&&s&&ee(e,"delete",n,void 0),i}has(e,n){const s=Reflect.has(e,n);return(!fe(n)||!Ir.has(n))&&Ht(e,"has",n),s}ownKeys(e){return Ht(e,"iterate",lt(e)?"length":ye),Reflect.ownKeys(e)}}class ji extends Er{constructor(e=!1){super(!0,e)}set(e,n){return!0}deleteProperty(e,n){return!0}}const Hi=new Ar,Wi=new ji,Zi=new Ar(!0),ks=t=>t,zn=t=>Reflect.getPrototypeOf(t);function nn(t,e,n=!1,s=!1){t=t.__v_raw;const i=vt(t),r=vt(e);n||(he(e,r)&&Ht(i,"get",e),Ht(i,"get",r));const{has:a}=zn(i),l=s?ks:n?Is:Ze;if(a.call(i,e))return l(t.get(e));if(a.call(i,r))return l(t.get(r));t!==i&&t.get(e)}function sn(t,e=!1){const n=this.__v_raw,s=vt(n),i=vt(t);return e||(he(t,i)&&Ht(s,"has",t),Ht(s,"has",i)),t===i?n.has(t):n.has(t)||n.has(i)}function rn(t,e=!1){return t=t.__v_raw,!e&&Ht(vt(t),"iterate",ye),Reflect.get(t,"size",t)}function js(t){t=vt(t);const e=vt(this);return zn(e).has.call(e,t)||(e.add(t),ee(e,"add",t,t)),this}function Hs(t,e){e=vt(e);const n=vt(this),{has:s,get:i}=zn(n);let r=s.call(n,t);r||(t=vt(t),r=s.call(n,t));const a=i.call(n,t);return n.set(t,e),r?he(e,a)&&ee(n,"set",t,e):ee(n,"add",t,e),this}function Ws(t){const e=vt(this),{has:n,get:s}=zn(e);let i=n.call(e,t);i||(t=vt(t),i=n.call(e,t)),s&&s.call(e,t);const r=e.delete(t);return i&&ee(e,"delete",t,void 0),r}function Zs(){const t=vt(this),e=t.size!==0,n=t.clear();return e&&ee(t,"clear",void 0,void 0),n}function on(t,e){return function(s,i){const r=this,a=r.__v_raw,l=vt(a),c=e?ks:t?Is:Ze;return!t&&Ht(l,"iterate",ye),a.forEach((h,b)=>s.call(i,c(h),c(b),r))}}function an(t,e,n){return function(...s){const i=this.__v_raw,r=vt(i),a=Ie(r),l=t==="entries"||t===Symbol.iterator&&a,c=t==="keys"&&a,h=i[t](...s),b=n?ks:e?Is:Ze;return!e&&Ht(r,"iterate",c?es:ye),{next(){const{value:g,done:v}=h.next();return v?{value:g,done:v}:{value:l?[b(g[0]),b(g[1])]:b(g),done:v}},[Symbol.iterator](){return this}}}}function re(t){return function(...e){return t==="delete"?!1:t==="clear"?void 0:this}}function Vi(){const t={get(r){return nn(this,r)},get size(){return rn(this)},has:sn,add:js,set:Hs,delete:Ws,clear:Zs,forEach:on(!1,!1)},e={get(r){return nn(this,r,!1,!0)},get size(){return rn(this)},has:sn,add:js,set:Hs,delete:Ws,clear:Zs,forEach:on(!1,!0)},n={get(r){return nn(this,r,!0)},get size(){return rn(this,!0)},has(r){return sn.call(this,r,!0)},add:re("add"),set:re("set"),delete:re("delete"),clear:re("clear"),forEach:on(!0,!1)},s={get(r){return nn(this,r,!0,!0)},get size(){return rn(this,!0)},has(r){return sn.call(this,r,!0)},add:re("add"),set:re("set"),delete:re("delete"),clear:re("clear"),forEach:on(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach(r=>{t[r]=an(r,!1,!1),n[r]=an(r,!0,!1),e[r]=an(r,!1,!0),s[r]=an(r,!0,!0)}),[t,n,e,s]}const[Ki,Gi,qi,Ji]=Vi();function Cs(t,e){const n=e?t?Ji:qi:t?Gi:Ki;return(s,i,r)=>i==="__v_isReactive"?!t:i==="__v_isReadonly"?t:i==="__v_raw"?s:Reflect.get(wt(n,i)&&i in s?n:s,i,r)}const Yi={get:Cs(!1,!1)},Xi={get:Cs(!1,!0)},Qi={get:Cs(!0,!1)},Or=new WeakMap,Pr=new WeakMap,zr=new WeakMap,to=new WeakMap;function eo(t){switch(t){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function no(t){return t.__v_skip||!Object.isExtensible(t)?0:eo(ki(t))}function Ss(t){return ze(t)?t:Ts(t,!1,Hi,Yi,Or)}function so(t){return Ts(t,!1,Zi,Xi,Pr)}function Lr(t){return Ts(t,!0,Wi,Qi,zr)}function Ts(t,e,n,s,i){if(!xt(t)||t.__v_raw&&!(e&&t.__v_isReactive))return t;const r=i.get(t);if(r)return r;const a=no(t);if(a===0)return t;const l=new Proxy(t,a===2?s:n);return i.set(t,l),l}function Ee(t){return ze(t)?Ee(t.__v_raw):!!(t&&t.__v_isReactive)}function ze(t){return!!(t&&t.__v_isReadonly)}function _n(t){return!!(t&&t.__v_isShallow)}function Br(t){return Ee(t)||ze(t)}function vt(t){const e=t&&t.__v_raw;return e?vt(e):t}function Dr(t){return Object.isExtensible(t)&&vn(t,"__v_skip",!0),t}const Ze=t=>xt(t)?Ss(t):t,Is=t=>xt(t)?Lr(t):t;class $r{constructor(e,n,s,i){this.getter=e,this._setter=n,this.dep=void 0,this.__v_isRef=!0,this.__v_isReadonly=!1,this.effect=new ys(()=>e(this._value),()=>fn(this,this.effect._dirtyLevel===2?2:3)),this.effect.computed=this,this.effect.active=this._cacheable=!i,this.__v_isReadonly=s}get value(){const e=vt(this);return(!e._cacheable||e.effect.dirty)&&he(e._value,e._value=e.effect.run())&&fn(e,4),Ur(e),e.effect._dirtyLevel>=2&&fn(e,2),e._value}set value(e){this._setter(e)}get _dirty(){return this.effect.dirty}set _dirty(e){this.effect.dirty=e}}function ro(t,e,n=!1){let s,i;const r=ut(t);return r?(s=t,i=Vt):(s=t.get,i=t.set),new $r(s,i,r||!i,n)}function Ur(t){var e;ue&&_e&&(t=vt(t),Cr(_e,(e=t.dep)!=null?e:t.dep=Tr(()=>t.dep=void 0,t instanceof $r?t:void 0)))}function fn(t,e=4,n){t=vt(t);const s=t.dep;s&&Sr(s,e)}function Wt(t){return!!(t&&t.__v_isRef===!0)}function dt(t){return io(t,!1)}function io(t,e){return Wt(t)?t:new oo(t,e)}class oo{constructor(e,n){this.__v_isShallow=n,this.dep=void 0,this.__v_isRef=!0,this._rawValue=n?e:vt(e),this._value=n?e:Ze(e)}get value(){return Ur(this),this._value}set value(e){const n=this.__v_isShallow||_n(e)||ze(e);e=n?e:vt(e),he(e,this._rawValue)&&(this._rawValue=e,this._value=n?e:Ze(e),fn(this,4))}}function $t(t){return Wt(t)?t.value:t}const ao={get:(t,e,n)=>$t(Reflect.get(t,e,n)),set:(t,e,n,s)=>{const i=t[e];return Wt(i)&&!Wt(n)?(i.value=n,!0):Reflect.set(t,e,n,s)}};function Rr(t){return Ee(t)?t:new Proxy(t,ao)}/**
* @vue/runtime-core v3.4.21
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/function de(t,e,n,s){try{return s?t(...s):t()}catch(i){Ye(i,e,n)}}function Yt(t,e,n,s){if(ut(t)){const r=de(t,e,n,s);return r&&ws(r)&&r.catch(a=>{Ye(a,e,n)}),r}const i=[];for(let r=0;r<t.length;r++)i.push(Yt(t[r],e,n,s));return i}function Ye(t,e,n,s=!0){const i=e?e.vnode:null;if(e){let r=e.parent;const a=e.proxy,l=`https://vuejs.org/error-reference/#runtime-${n}`;for(;r;){const h=r.ec;if(h){for(let b=0;b<h.length;b++)if(h[b](t,a,l)===!1)return}r=r.parent}const c=e.appContext.config.errorHandler;if(c){de(c,null,10,[t,a,l]);return}}lo(t,n,i,s)}function lo(t,e,n,s=!0){console.error(t)}let Ve=!1,ns=!1;const Ut=[];let te=0;const Ae=[];let oe=null,we=0;const Mr=Promise.resolve();let Es=null;function Fr(t){const e=Es||Mr;return t?e.then(this?t.bind(this):t):e}function co(t){let e=te+1,n=Ut.length;for(;e<n;){const s=e+n>>>1,i=Ut[s],r=Ke(i);r<t||r===t&&i.pre?e=s+1:n=s}return e}function As(t){(!Ut.length||!Ut.includes(t,Ve&&t.allowRecurse?te+1:te))&&(t.id==null?Ut.push(t):Ut.splice(co(t.id),0,t),Nr())}function Nr(){!Ve&&!ns&&(ns=!0,Es=Mr.then(Hr))}function uo(t){const e=Ut.indexOf(t);e>te&&Ut.splice(e,1)}function ss(t){lt(t)?Ae.push(...t):(!oe||!oe.includes(t,t.allowRecurse?we+1:we))&&Ae.push(t),Nr()}function Vs(t,e,n=Ve?te+1:0){for(;n<Ut.length;n++){const s=Ut[n];if(s&&s.pre){if(t&&s.id!==t.uid)continue;Ut.splice(n,1),n--,s()}}}function jr(t){if(Ae.length){const e=[...new Set(Ae)].sort((n,s)=>Ke(n)-Ke(s));if(Ae.length=0,oe){oe.push(...e);return}for(oe=e,we=0;we<oe.length;we++)oe[we]();oe=null,we=0}}const Ke=t=>t.id==null?1/0:t.id,fo=(t,e)=>{const n=Ke(t)-Ke(e);if(n===0){if(t.pre&&!e.pre)return-1;if(e.pre&&!t.pre)return 1}return n};function Hr(t){ns=!1,Ve=!0,Ut.sort(fo);const e=Vt;try{for(te=0;te<Ut.length;te++){const n=Ut[te];n&&n.active!==!1&&de(n,null,14)}}finally{te=0,Ut.length=0,jr(),Ve=!1,Es=null,(Ut.length||Ae.length)&&Hr()}}function ho(t,e,...n){if(t.isUnmounted)return;const s=t.vnode.props||bt;let i=n;const r=e.startsWith("update:"),a=r&&e.slice(7);if(a&&a in s){const b=`${a==="modelValue"?"model":a}Modifiers`,{number:g,trim:v}=s[b]||bt;v&&(i=n.map(f=>zt(f)?f.trim():f)),g&&(i=n.map(_s))}let l,c=s[l=Hn(e)]||s[l=Hn(Pe(e))];!c&&r&&(c=s[l=Hn(De(e))]),c&&Yt(c,t,6,i);const h=s[l+"Once"];if(h){if(!t.emitted)t.emitted={};else if(t.emitted[l])return;t.emitted[l]=!0,Yt(h,t,6,i)}}function Wr(t,e,n=!1){const s=e.emitsCache,i=s.get(t);if(i!==void 0)return i;const r=t.emits;let a={},l=!1;if(!ut(t)){const c=h=>{const b=Wr(h,e,!0);b&&(l=!0,Dt(a,b))};!n&&e.mixins.length&&e.mixins.forEach(c),t.extends&&c(t.extends),t.mixins&&t.mixins.forEach(c)}return!r&&!l?(xt(t)&&s.set(t,null),null):(lt(r)?r.forEach(c=>a[c]=null):Dt(a,r),xt(t)&&s.set(t,a),a)}function Ln(t,e){return!t||!En(e)?!1:(e=e.slice(2).replace(/Once$/,""),wt(t,e[0].toLowerCase()+e.slice(1))||wt(t,De(e))||wt(t,e))}let jt=null,Bn=null;function yn(t){const e=jt;return jt=t,Bn=t&&t.type.__scopeId||null,e}function Zr(t){Bn=t}function Vr(){Bn=null}function rs(t,e=jt,n){if(!e||t._n)return t;const s=(...i)=>{s._d&&sr(-1);const r=yn(e);let a;try{a=t(...i)}finally{yn(r),s._d&&sr(1)}return a};return s._n=!0,s._c=!0,s._d=!0,s}function Zn(t){const{type:e,vnode:n,proxy:s,withProxy:i,props:r,propsOptions:[a],slots:l,attrs:c,emit:h,render:b,renderCache:g,data:v,setupState:f,ctx:k,inheritAttrs:p}=t;let _,y;const C=yn(t);try{if(n.shapeFlag&4){const z=i||s,P=z;_=Jt(b.call(P,z,g,r,f,v,k)),y=c}else{const z=e;_=Jt(z.length>1?z(r,{attrs:c,slots:l,emit:h}):z(r,null)),y=e.props?c:mo(c)}}catch(z){We.length=0,Ye(z,t,1),_=Lt(ne)}let A=_;if(y&&p!==!1){const z=Object.keys(y),{shapeFlag:P}=A;z.length&&P&7&&(a&&z.some(ms)&&(y=go(y,a)),A=Be(A,y))}return n.dirs&&(A=Be(A),A.dirs=A.dirs?A.dirs.concat(n.dirs):n.dirs),n.transition&&(A.transition=n.transition),_=A,yn(C),_}function po(t,e=!0){let n;for(let s=0;s<t.length;s++){const i=t[s];if(ci(i)){if(i.type!==ne||i.children==="v-if"){if(n)return;n=i}}else return}return n}const mo=t=>{let e;for(const n in t)(n==="class"||n==="style"||En(n))&&((e||(e={}))[n]=t[n]);return e},go=(t,e)=>{const n={};for(const s in t)(!ms(s)||!(s.slice(9)in e))&&(n[s]=t[s]);return n};function wo(t,e,n){const{props:s,children:i,component:r}=t,{props:a,children:l,patchFlag:c}=e,h=r.emitsOptions;if(e.dirs||e.transition)return!0;if(n&&c>=0){if(c&1024)return!0;if(c&16)return s?Ks(s,a,h):!!a;if(c&8){const b=e.dynamicProps;for(let g=0;g<b.length;g++){const v=b[g];if(a[v]!==s[v]&&!Ln(h,v))return!0}}}else return(i||l)&&(!l||!l.$stable)?!0:s===a?!1:s?a?Ks(s,a,h):!0:!!a;return!1}function Ks(t,e,n){const s=Object.keys(e);if(s.length!==Object.keys(t).length)return!0;for(let i=0;i<s.length;i++){const r=s[i];if(e[r]!==t[r]&&!Ln(n,r))return!0}return!1}function Os({vnode:t,parent:e},n){for(;e;){const s=e.subTree;if(s.suspense&&s.suspense.activeBranch===t&&(s.el=t.el),s===t)(t=e.vnode).el=n,e=e.parent;else break}}const vo=Symbol.for("v-ndc"),_o=t=>t.__isSuspense;let is=0;const yo={name:"Suspense",__isSuspense:!0,process(t,e,n,s,i,r,a,l,c,h){if(t==null)xo(e,n,s,i,r,a,l,c,h);else{if(r&&r.deps>0&&!t.suspense.isInFallback){e.suspense=t.suspense,e.suspense.vnode=e,e.el=t.el;return}ko(t,e,n,s,i,a,l,c,h)}},hydrate:Co,create:Ps,normalize:So},bo=yo;function Ge(t,e){const n=t.props&&t.props[e];ut(n)&&n()}function xo(t,e,n,s,i,r,a,l,c){const{p:h,o:{createElement:b}}=c,g=b("div"),v=t.suspense=Ps(t,i,s,e,g,n,r,a,l,c);h(null,v.pendingBranch=t.ssContent,g,null,s,v,r,a),v.deps>0?(Ge(t,"onPending"),Ge(t,"onFallback"),h(null,t.ssFallback,e,n,s,null,r,a),Oe(v,t.ssFallback)):v.resolve(!1,!0)}function ko(t,e,n,s,i,r,a,l,{p:c,um:h,o:{createElement:b}}){const g=e.suspense=t.suspense;g.vnode=e,e.el=t.el;const v=e.ssContent,f=e.ssFallback,{activeBranch:k,pendingBranch:p,isInFallback:_,isHydrating:y}=g;if(p)g.pendingBranch=v,ce(v,p)?(c(p,v,g.hiddenContainer,null,i,g,r,a,l),g.deps<=0?g.resolve():_&&(y||(c(k,f,n,s,i,null,r,a,l),Oe(g,f)))):(g.pendingId=is++,y?(g.isHydrating=!1,g.activeBranch=p):h(p,i,g),g.deps=0,g.effects.length=0,g.hiddenContainer=b("div"),_?(c(null,v,g.hiddenContainer,null,i,g,r,a,l),g.deps<=0?g.resolve():(c(k,f,n,s,i,null,r,a,l),Oe(g,f))):k&&ce(v,k)?(c(k,v,n,s,i,g,r,a,l),g.resolve(!0)):(c(null,v,g.hiddenContainer,null,i,g,r,a,l),g.deps<=0&&g.resolve()));else if(k&&ce(v,k))c(k,v,n,s,i,g,r,a,l),Oe(g,v);else if(Ge(e,"onPending"),g.pendingBranch=v,v.shapeFlag&512?g.pendingId=v.component.suspenseId:g.pendingId=is++,c(null,v,g.hiddenContainer,null,i,g,r,a,l),g.deps<=0)g.resolve();else{const{timeout:C,pendingId:A}=g;C>0?setTimeout(()=>{g.pendingId===A&&g.fallback(f)},C):C===0&&g.fallback(f)}}function Ps(t,e,n,s,i,r,a,l,c,h,b=!1){const{p:g,m:v,um:f,n:k,o:{parentNode:p,remove:_}}=h;let y;const C=Io(t);C&&e?.pendingBranch&&(y=e.pendingId,e.deps++);const A=t.props?Ti(t.props.timeout):void 0,z=r,P={vnode:t,parent:e,parentComponent:n,namespace:a,container:s,hiddenContainer:i,deps:0,pendingId:is++,timeout:typeof A=="number"?A:-1,activeBranch:null,pendingBranch:null,isInFallback:!b,isHydrating:b,isUnmounted:!1,effects:[],resolve($=!1,N=!1){const{vnode:G,activeBranch:M,pendingBranch:q,pendingId:nt,effects:O,parentComponent:H,container:d}=P;let W=!1;P.isHydrating?P.isHydrating=!1:$||(W=M&&q.transition&&q.transition.mode==="out-in",W&&(M.transition.afterLeave=()=>{nt===P.pendingId&&(v(q,d,r===z?k(M):r,0),ss(O))}),M&&(p(M.el)!==P.hiddenContainer&&(r=k(M)),f(M,H,P,!0)),W||v(q,d,r,0)),Oe(P,q),P.pendingBranch=null,P.isInFallback=!1;let Q=P.parent,V=!1;for(;Q;){if(Q.pendingBranch){Q.effects.push(...O),V=!0;break}Q=Q.parent}!V&&!W&&ss(O),P.effects=[],C&&e&&e.pendingBranch&&y===e.pendingId&&(e.deps--,e.deps===0&&!N&&e.resolve()),Ge(G,"onResolve")},fallback($){if(!P.pendingBranch)return;const{vnode:N,activeBranch:G,parentComponent:M,container:q,namespace:nt}=P;Ge(N,"onFallback");const O=k(G),H=()=>{P.isInFallback&&(g(null,$,q,O,M,null,nt,l,c),Oe(P,$))},d=$.transition&&$.transition.mode==="out-in";d&&(G.transition.afterLeave=H),P.isInFallback=!0,f(G,M,null,!0),d||H()},move($,N,G){P.activeBranch&&v(P.activeBranch,$,N,G),P.container=$},next(){return P.activeBranch&&k(P.activeBranch)},registerDep($,N){const G=!!P.pendingBranch;G&&P.deps++;const M=$.vnode.el;$.asyncDep.catch(q=>{Ye(q,$,0)}).then(q=>{if($.isUnmounted||P.isUnmounted||P.pendingId!==$.suspenseId)return;$.asyncResolved=!0;const{vnode:nt}=$;hs($,q,!1),M&&(nt.el=M);const O=!M&&$.subTree.el;N($,nt,p(M||$.subTree.el),M?null:k($.subTree),P,a,c),O&&_(O),Os($,nt.el),G&&--P.deps===0&&P.resolve()})},unmount($,N){P.isUnmounted=!0,P.activeBranch&&f(P.activeBranch,n,$,N),P.pendingBranch&&f(P.pendingBranch,n,$,N)}};return P}function Co(t,e,n,s,i,r,a,l,c){const h=e.suspense=Ps(e,s,n,t.parentNode,document.createElement("div"),null,i,r,a,l,!0),b=c(t,h.pendingBranch=e.ssContent,n,h,r,a);return h.deps===0&&h.resolve(!1,!0),b}function So(t){const{shapeFlag:e,children:n}=t,s=e&32;t.ssContent=Gs(s?n.default:n),t.ssFallback=s?Gs(n.fallback):Lt(ne)}function Gs(t){let e;if(ut(t)){const n=Le&&t._c;n&&(t._d=!1,pt()),t=t(),n&&(t._d=!0,e=Gt,oi())}return lt(t)&&(t=po(t)),t=Jt(t),e&&!t.dynamicChildren&&(t.dynamicChildren=e.filter(n=>n!==t)),t}function To(t,e){e&&e.pendingBranch?lt(t)?e.effects.push(...t):e.effects.push(t):ss(t)}function Oe(t,e){t.activeBranch=e;const{vnode:n,parentComponent:s}=t;let i=e.el;for(;!i&&e.component;)e=e.component.subTree,i=e.el;n.el=i,s&&s.subTree===n&&(s.vnode.el=i,Os(s,i))}function Io(t){var e;return((e=t.props)==null?void 0:e.suspensible)!=null&&t.props.suspensible!==!1}const Eo=Symbol.for("v-scx"),Ao=()=>pn(Eo),ln={};function Vn(t,e,n){return Kr(t,e,n)}function Kr(t,e,{immediate:n,deep:s,flush:i,once:r,onTrack:a,onTrigger:l}=bt){if(e&&r){const $=e;e=(...N)=>{$(...N),P()}}const c=Rt,h=$=>s===!0?$:ve($,s===!1?1:void 0);let b,g=!1,v=!1;if(Wt(t)?(b=()=>t.value,g=_n(t)):Ee(t)?(b=()=>h(t),g=!0):lt(t)?(v=!0,g=t.some($=>Ee($)||_n($)),b=()=>t.map($=>{if(Wt($))return $.value;if(Ee($))return h($);if(ut($))return de($,c,2)})):ut(t)?e?b=()=>de(t,c,2):b=()=>(f&&f(),Yt(t,c,3,[k])):b=Vt,e&&s){const $=b;b=()=>ve($())}let f,k=$=>{f=A.onStop=()=>{de($,c,4),f=A.onStop=void 0}},p;if(Fn)if(k=Vt,e?n&&Yt(e,c,3,[b(),v?[]:void 0,k]):b(),i==="sync"){const $=Ao();p=$.__watcherHandles||($.__watcherHandles=[])}else return Vt;let _=v?new Array(t.length).fill(ln):ln;const y=()=>{if(!(!A.active||!A.dirty))if(e){const $=A.run();(s||g||(v?$.some((N,G)=>he(N,_[G])):he($,_)))&&(f&&f(),Yt(e,c,3,[$,_===ln?void 0:v&&_[0]===ln?[]:_,k]),_=$)}else A.run()};y.allowRecurse=!!e;let C;i==="sync"?C=y:i==="post"?C=()=>Nt(y,c&&c.suspense):(y.pre=!0,c&&(y.id=c.uid),C=()=>As(y));const A=new ys(b,Vt,C),z=Ui(),P=()=>{A.stop(),z&&gs(z.effects,A)};return e?n?y():_=A.run():i==="post"?Nt(A.run.bind(A),c&&c.suspense):A.run(),p&&p.push(P),P}function Oo(t,e,n){const s=this.proxy,i=zt(t)?t.includes(".")?Gr(s,t):()=>s[t]:t.bind(s,s);let r;ut(e)?r=e:(r=e.handler,n=e);const a=be(this),l=Kr(i,r.bind(s),n);return a(),l}function Gr(t,e){const n=e.split(".");return()=>{let s=t;for(let i=0;i<n.length&&s;i++)s=s[n[i]];return s}}function ve(t,e,n=0,s){if(!xt(t)||t.__v_skip)return t;if(e&&e>0){if(n>=e)return t;n++}if(s=s||new Set,s.has(t))return t;if(s.add(t),Wt(t))ve(t.value,e,n,s);else if(lt(t))for(let i=0;i<t.length;i++)ve(t[i],e,n,s);else if(An(t)||Ie(t))t.forEach(i=>{ve(i,e,n,s)});else if(wr(t))for(const i in t)ve(t[i],e,n,s);return t}function St(t,e){if(jt===null)return t;const n=Nn(jt)||jt.proxy,s=t.dirs||(t.dirs=[]);for(let i=0;i<e.length;i++){let[r,a,l,c=bt]=e[i];r&&(ut(r)&&(r={mounted:r,updated:r}),r.deep&&ve(a),s.push({dir:r,instance:n,value:a,oldValue:void 0,arg:l,modifiers:c}))}return t}function me(t,e,n,s){const i=t.dirs,r=e&&e.dirs;for(let a=0;a<i.length;a++){const l=i[a];r&&(l.oldValue=r[a].value);let c=l.dir[s];c&&(xe(),Yt(c,n,8,[t.el,l,t,e]),ke())}}/*! #__NO_SIDE_EFFECTS__ */function pe(t,e){return ut(t)?(()=>Dt({name:t.name},e,{setup:t}))():t}const hn=t=>!!t.type.__asyncLoader,qr=t=>t.type.__isKeepAlive;function Po(t,e){Jr(t,"a",e)}function zo(t,e){Jr(t,"da",e)}function Jr(t,e,n=Rt){const s=t.__wdc||(t.__wdc=()=>{let i=n;for(;i;){if(i.isDeactivated)return;i=i.parent}return t()});if(Dn(e,s,n),n){let i=n.parent;for(;i&&i.parent;)qr(i.parent.vnode)&&Lo(s,e,n,i),i=i.parent}}function Lo(t,e,n,s){const i=Dn(e,t,s,!0);Xe(()=>{gs(s[e],i)},n)}function Dn(t,e,n=Rt,s=!1){if(n){const i=n[t]||(n[t]=[]),r=e.__weh||(e.__weh=(...a)=>{if(n.isUnmounted)return;xe();const l=be(n),c=Yt(e,n,t,a);return l(),ke(),c});return s?i.unshift(r):i.push(r),r}}const se=t=>(e,n=Rt)=>(!Fn||t==="sp")&&Dn(t,(...s)=>e(...s),n),Bo=se("bm"),$n=se("m"),Do=se("bu"),$o=se("u"),Uo=se("bum"),Xe=se("um"),Ro=se("sp"),Mo=se("rtg"),Fo=se("rtc");function No(t,e=Rt){Dn("ec",t,e)}function Un(t,e,n,s){let i;const r=n&&n[s];if(lt(t)||zt(t)){i=new Array(t.length);for(let a=0,l=t.length;a<l;a++)i[a]=e(t[a],a,void 0,r&&r[a])}else if(typeof t=="number"){i=new Array(t);for(let a=0;a<t;a++)i[a]=e(a+1,a,void 0,r&&r[a])}else if(xt(t))if(t[Symbol.iterator])i=Array.from(t,(a,l)=>e(a,l,void 0,r&&r[l]));else{const a=Object.keys(t);i=new Array(a.length);for(let l=0,c=a.length;l<c;l++){const h=a[l];i[l]=e(t[h],h,l,r&&r[l])}}else i=[];return n&&(n[s]=i),i}const os=t=>t?di(t)?Nn(t)||t.proxy:os(t.parent):null,je=Dt(Object.create(null),{$:t=>t,$el:t=>t.vnode.el,$data:t=>t.data,$props:t=>t.props,$attrs:t=>t.attrs,$slots:t=>t.slots,$refs:t=>t.refs,$parent:t=>os(t.parent),$root:t=>os(t.root),$emit:t=>t.emit,$options:t=>zs(t),$forceUpdate:t=>t.f||(t.f=()=>{t.effect.dirty=!0,As(t.update)}),$nextTick:t=>t.n||(t.n=Fr.bind(t.proxy)),$watch:t=>Oo.bind(t)}),Kn=(t,e)=>t!==bt&&!t.__isScriptSetup&&wt(t,e),jo={get({_:t},e){const{ctx:n,setupState:s,data:i,props:r,accessCache:a,type:l,appContext:c}=t;let h;if(e[0]!=="$"){const f=a[e];if(f!==void 0)switch(f){case 1:return s[e];case 2:return i[e];case 4:return n[e];case 3:return r[e]}else{if(Kn(s,e))return a[e]=1,s[e];if(i!==bt&&wt(i,e))return a[e]=2,i[e];if((h=t.propsOptions[0])&&wt(h,e))return a[e]=3,r[e];if(n!==bt&&wt(n,e))return a[e]=4,n[e];as&&(a[e]=0)}}const b=je[e];let g,v;if(b)return e==="$attrs"&&Ht(t,"get",e),b(t);if((g=l.__cssModules)&&(g=g[e]))return g;if(n!==bt&&wt(n,e))return a[e]=4,n[e];if(v=c.config.globalProperties,wt(v,e))return v[e]},set({_:t},e,n){const{data:s,setupState:i,ctx:r}=t;return Kn(i,e)?(i[e]=n,!0):s!==bt&&wt(s,e)?(s[e]=n,!0):wt(t.props,e)||e[0]==="$"&&e.slice(1)in t?!1:(r[e]=n,!0)},has({_:{data:t,setupState:e,accessCache:n,ctx:s,appContext:i,propsOptions:r}},a){let l;return!!n[a]||t!==bt&&wt(t,a)||Kn(e,a)||(l=r[0])&&wt(l,a)||wt(s,a)||wt(je,a)||wt(i.config.globalProperties,a)},defineProperty(t,e,n){return n.get!=null?t._.accessCache[e]=0:wt(n,"value")&&this.set(t,e,n.value,null),Reflect.defineProperty(t,e,n)}};function qs(t){return lt(t)?t.reduce((e,n)=>(e[n]=null,e),{}):t}function bn(t){const e=pa();let n=t();return fs(),ws(n)&&(n=n.catch(s=>{throw be(e),s})),[n,()=>be(e)]}let as=!0;function Ho(t){const e=zs(t),n=t.proxy,s=t.ctx;as=!1,e.beforeCreate&&Js(e.beforeCreate,t,"bc");const{data:i,computed:r,methods:a,watch:l,provide:c,inject:h,created:b,beforeMount:g,mounted:v,beforeUpdate:f,updated:k,activated:p,deactivated:_,beforeDestroy:y,beforeUnmount:C,destroyed:A,unmounted:z,render:P,renderTracked:$,renderTriggered:N,errorCaptured:G,serverPrefetch:M,expose:q,inheritAttrs:nt,components:O,directives:H,filters:d}=e;if(h&&Wo(h,s,null),a)for(const V in a){const et=a[V];ut(et)&&(s[V]=et.bind(n))}if(i){const V=i.call(n,n);xt(V)&&(t.data=Ss(V))}if(as=!0,r)for(const V in r){const et=r[V],Z=ut(et)?et.bind(n,n):ut(et.get)?et.get.bind(n,n):Vt,at=!ut(et)&&ut(et.set)?et.set.bind(n):Vt,F=Pt({get:Z,set:at});Object.defineProperty(s,V,{enumerable:!0,configurable:!0,get:()=>F.value,set:B=>F.value=B})}if(l)for(const V in l)Yr(l[V],s,n,V);if(c){const V=ut(c)?c.call(n):c;Reflect.ownKeys(V).forEach(et=>{Jo(et,V[et])})}b&&Js(b,t,"c");function Q(V,et){lt(et)?et.forEach(Z=>V(Z.bind(n))):et&&V(et.bind(n))}if(Q(Bo,g),Q($n,v),Q(Do,f),Q($o,k),Q(Po,p),Q(zo,_),Q(No,G),Q(Fo,$),Q(Mo,N),Q(Uo,C),Q(Xe,z),Q(Ro,M),lt(q))if(q.length){const V=t.exposed||(t.exposed={});q.forEach(et=>{Object.defineProperty(V,et,{get:()=>n[et],set:Z=>n[et]=Z})})}else t.exposed||(t.exposed={});P&&t.render===Vt&&(t.render=P),nt!=null&&(t.inheritAttrs=nt),O&&(t.components=O),H&&(t.directives=H)}function Wo(t,e,n=Vt){lt(t)&&(t=ls(t));for(const s in t){const i=t[s];let r;xt(i)?"default"in i?r=pn(i.from||s,i.default,!0):r=pn(i.from||s):r=pn(i),Wt(r)?Object.defineProperty(e,s,{enumerable:!0,configurable:!0,get:()=>r.value,set:a=>r.value=a}):e[s]=r}}function Js(t,e,n){Yt(lt(t)?t.map(s=>s.bind(e.proxy)):t.bind(e.proxy),e,n)}function Yr(t,e,n,s){const i=s.includes(".")?Gr(n,s):()=>n[s];if(zt(t)){const r=e[t];ut(r)&&Vn(i,r)}else if(ut(t))Vn(i,t.bind(n));else if(xt(t))if(lt(t))t.forEach(r=>Yr(r,e,n,s));else{const r=ut(t.handler)?t.handler.bind(n):e[t.handler];ut(r)&&Vn(i,r,t)}}function zs(t){const e=t.type,{mixins:n,extends:s}=e,{mixins:i,optionsCache:r,config:{optionMergeStrategies:a}}=t.appContext,l=r.get(e);let c;return l?c=l:!i.length&&!n&&!s?c=e:(c={},i.length&&i.forEach(h=>xn(c,h,a,!0)),xn(c,e,a)),xt(e)&&r.set(e,c),c}function xn(t,e,n,s=!1){const{mixins:i,extends:r}=e;r&&xn(t,r,n,!0),i&&i.forEach(a=>xn(t,a,n,!0));for(const a in e)if(!(s&&a==="expose")){const l=Zo[a]||n&&n[a];t[a]=l?l(t[a],e[a]):e[a]}return t}const Zo={data:Ys,props:Xs,emits:Xs,methods:Fe,computed:Fe,beforeCreate:Ft,created:Ft,beforeMount:Ft,mounted:Ft,beforeUpdate:Ft,updated:Ft,beforeDestroy:Ft,beforeUnmount:Ft,destroyed:Ft,unmounted:Ft,activated:Ft,deactivated:Ft,errorCaptured:Ft,serverPrefetch:Ft,components:Fe,directives:Fe,watch:Ko,provide:Ys,inject:Vo};function Ys(t,e){return e?t?function(){return Dt(ut(t)?t.call(this,this):t,ut(e)?e.call(this,this):e)}:e:t}function Vo(t,e){return Fe(ls(t),ls(e))}function ls(t){if(lt(t)){const e={};for(let n=0;n<t.length;n++)e[t[n]]=t[n];return e}return t}function Ft(t,e){return t?[...new Set([].concat(t,e))]:e}function Fe(t,e){return t?Dt(Object.create(null),t,e):e}function Xs(t,e){return t?lt(t)&&lt(e)?[...new Set([...t,...e])]:Dt(Object.create(null),qs(t),qs(e??{})):e}function Ko(t,e){if(!t)return e;if(!e)return t;const n=Dt(Object.create(null),t);for(const s in e)n[s]=Ft(t[s],e[s]);return n}function Xr(){return{app:null,config:{isNativeTag:bi,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let Go=0;function qo(t,e){return function(s,i=null){ut(s)||(s=Dt({},s)),i!=null&&!xt(i)&&(i=null);const r=Xr(),a=new WeakSet;let l=!1;const c=r.app={_uid:Go++,_component:s,_props:i,_container:null,_context:r,_instance:null,version:ya,get config(){return r.config},set config(h){},use(h,...b){return a.has(h)||(h&&ut(h.install)?(a.add(h),h.install(c,...b)):ut(h)&&(a.add(h),h(c,...b))),c},mixin(h){return r.mixins.includes(h)||r.mixins.push(h),c},component(h,b){return b?(r.components[h]=b,c):r.components[h]},directive(h,b){return b?(r.directives[h]=b,c):r.directives[h]},mount(h,b,g){if(!l){const v=Lt(s,i);return v.appContext=r,g===!0?g="svg":g===!1&&(g=void 0),b&&e?e(v,h):t(v,h,g),l=!0,c._container=h,h.__vue_app__=c,Nn(v.component)||v.component.proxy}},unmount(){l&&(t(null,c._container),delete c._container.__vue_app__)},provide(h,b){return r.provides[h]=b,c},runWithContext(h){const b=He;He=c;try{return h()}finally{He=b}}};return c}}let He=null;function Jo(t,e){if(Rt){let n=Rt.provides;const s=Rt.parent&&Rt.parent.provides;s===n&&(n=Rt.provides=Object.create(s)),n[t]=e}}function pn(t,e,n=!1){const s=Rt||jt;if(s||He){const i=s?s.parent==null?s.vnode.appContext&&s.vnode.appContext.provides:s.parent.provides:He._context.provides;if(i&&t in i)return i[t];if(arguments.length>1)return n&&ut(e)?e.call(s&&s.proxy):e}}function Yo(t,e,n,s=!1){const i={},r={};vn(r,Mn,1),t.propsDefaults=Object.create(null),Qr(t,e,i,r);for(const a in t.propsOptions[0])a in i||(i[a]=void 0);n?t.props=s?i:so(i):t.type.props?t.props=i:t.props=r,t.attrs=r}function Xo(t,e,n,s){const{props:i,attrs:r,vnode:{patchFlag:a}}=t,l=vt(i),[c]=t.propsOptions;let h=!1;if((s||a>0)&&!(a&16)){if(a&8){const b=t.vnode.dynamicProps;for(let g=0;g<b.length;g++){let v=b[g];if(Ln(t.emitsOptions,v))continue;const f=e[v];if(c)if(wt(r,v))f!==r[v]&&(r[v]=f,h=!0);else{const k=Pe(v);i[k]=cs(c,l,k,f,t,!1)}else f!==r[v]&&(r[v]=f,h=!0)}}}else{Qr(t,e,i,r)&&(h=!0);let b;for(const g in l)(!e||!wt(e,g)&&((b=De(g))===g||!wt(e,b)))&&(c?n&&(n[g]!==void 0||n[b]!==void 0)&&(i[g]=cs(c,l,g,void 0,t,!0)):delete i[g]);if(r!==l)for(const g in r)(!e||!wt(e,g))&&(delete r[g],h=!0)}h&&ee(t,"set","$attrs")}function Qr(t,e,n,s){const[i,r]=t.propsOptions;let a=!1,l;if(e)for(let c in e){if(Ne(c))continue;const h=e[c];let b;i&&wt(i,b=Pe(c))?!r||!r.includes(b)?n[b]=h:(l||(l={}))[b]=h:Ln(t.emitsOptions,c)||(!(c in s)||h!==s[c])&&(s[c]=h,a=!0)}if(r){const c=vt(n),h=l||bt;for(let b=0;b<r.length;b++){const g=r[b];n[g]=cs(i,c,g,h[g],t,!wt(h,g))}}return a}function cs(t,e,n,s,i,r){const a=t[n];if(a!=null){const l=wt(a,"default");if(l&&s===void 0){const c=a.default;if(a.type!==Function&&!a.skipFactory&&ut(c)){const{propsDefaults:h}=i;if(n in h)s=h[n];else{const b=be(i);s=h[n]=c.call(null,e),b()}}else s=c}a[0]&&(r&&!l?s=!1:a[1]&&(s===""||s===De(n))&&(s=!0))}return s}function ti(t,e,n=!1){const s=e.propsCache,i=s.get(t);if(i)return i;const r=t.props,a={},l=[];let c=!1;if(!ut(t)){const b=g=>{c=!0;const[v,f]=ti(g,e,!0);Dt(a,v),f&&l.push(...f)};!n&&e.mixins.length&&e.mixins.forEach(b),t.extends&&b(t.extends),t.mixins&&t.mixins.forEach(b)}if(!r&&!c)return xt(t)&&s.set(t,Te),Te;if(lt(r))for(let b=0;b<r.length;b++){const g=Pe(r[b]);Qs(g)&&(a[g]=bt)}else if(r)for(const b in r){const g=Pe(b);if(Qs(g)){const v=r[b],f=a[g]=lt(v)||ut(v)?{type:v}:Dt({},v);if(f){const k=nr(Boolean,f.type),p=nr(String,f.type);f[0]=k>-1,f[1]=p<0||k<p,(k>-1||wt(f,"default"))&&l.push(g)}}}const h=[a,l];return xt(t)&&s.set(t,h),h}function Qs(t){return t[0]!=="$"&&!Ne(t)}function tr(t){return t===null?"null":typeof t=="function"?t.name||"":typeof t=="object"&&t.constructor&&t.constructor.name||""}function er(t,e){return tr(t)===tr(e)}function nr(t,e){return lt(e)?e.findIndex(n=>er(n,t)):ut(e)&&er(e,t)?0:-1}const ei=t=>t[0]==="_"||t==="$stable",Ls=t=>lt(t)?t.map(Jt):[Jt(t)],Qo=(t,e,n)=>{if(e._n)return e;const s=rs((...i)=>Ls(e(...i)),n);return s._c=!1,s},ni=(t,e,n)=>{const s=t._ctx;for(const i in t){if(ei(i))continue;const r=t[i];if(ut(r))e[i]=Qo(i,r,s);else if(r!=null){const a=Ls(r);e[i]=()=>a}}},si=(t,e)=>{const n=Ls(e);t.slots.default=()=>n},ta=(t,e)=>{if(t.vnode.shapeFlag&32){const n=e._;n?(t.slots=vt(e),vn(e,"_",n)):ni(e,t.slots={})}else t.slots={},e&&si(t,e);vn(t.slots,Mn,1)},ea=(t,e,n)=>{const{vnode:s,slots:i}=t;let r=!0,a=bt;if(s.shapeFlag&32){const l=e._;l?n&&l===1?r=!1:(Dt(i,e),!n&&l===1&&delete i._):(r=!e.$stable,ni(e,i)),a=e}else e&&(si(t,e),a={default:1});if(r)for(const l in i)!ei(l)&&a[l]==null&&delete i[l]};function us(t,e,n,s,i=!1){if(lt(t)){t.forEach((v,f)=>us(v,e&&(lt(e)?e[f]:e),n,s,i));return}if(hn(s)&&!i)return;const r=s.shapeFlag&4?Nn(s.component)||s.component.proxy:s.el,a=i?null:r,{i:l,r:c}=t,h=e&&e.r,b=l.refs===bt?l.refs={}:l.refs,g=l.setupState;if(h!=null&&h!==c&&(zt(h)?(b[h]=null,wt(g,h)&&(g[h]=null)):Wt(h)&&(h.value=null)),ut(c))de(c,l,12,[a,b]);else{const v=zt(c),f=Wt(c);if(v||f){const k=()=>{if(t.f){const p=v?wt(g,c)?g[c]:b[c]:c.value;i?lt(p)&&gs(p,r):lt(p)?p.includes(r)||p.push(r):v?(b[c]=[r],wt(g,c)&&(g[c]=b[c])):(c.value=[r],t.k&&(b[t.k]=c.value))}else v?(b[c]=a,wt(g,c)&&(g[c]=a)):f&&(c.value=a,t.k&&(b[t.k]=a))};a?(k.id=-1,Nt(k,n)):k()}}}const Nt=To;function na(t){return sa(t)}function sa(t,e){const n=_r();n.__VUE__=!0;const{insert:s,remove:i,patchProp:r,createElement:a,createText:l,createComment:c,setText:h,setElementText:b,parentNode:g,nextSibling:v,setScopeId:f=Vt,insertStaticContent:k}=t,p=(u,o,S,I=null,w=null,m=null,T=void 0,L=null,D=!!o.dynamicChildren)=>{if(u===o)return;u&&!ce(u,o)&&(I=yt(u),B(u,w,m,!0),u=null),o.patchFlag===-2&&(D=!1,o.dynamicChildren=null);const{type:E,ref:R,shapeFlag:K}=o;switch(E){case Rn:_(u,o,S,I);break;case ne:y(u,o,S,I);break;case mn:u==null&&C(o,S,I,T);break;case Bt:O(u,o,S,I,w,m,T,L,D);break;default:K&1?P(u,o,S,I,w,m,T,L,D):K&6?H(u,o,S,I,w,m,T,L,D):(K&64||K&128)&&E.process(u,o,S,I,w,m,T,L,D,_t)}R!=null&&w&&us(R,u&&u.ref,m,o||u,!o)},_=(u,o,S,I)=>{if(u==null)s(o.el=l(o.children),S,I);else{const w=o.el=u.el;o.children!==u.children&&h(w,o.children)}},y=(u,o,S,I)=>{u==null?s(o.el=c(o.children||""),S,I):o.el=u.el},C=(u,o,S,I)=>{[u.el,u.anchor]=k(u.children,o,S,I,u.el,u.anchor)},A=({el:u,anchor:o},S,I)=>{let w;for(;u&&u!==o;)w=v(u),s(u,S,I),u=w;s(o,S,I)},z=({el:u,anchor:o})=>{let S;for(;u&&u!==o;)S=v(u),i(u),u=S;i(o)},P=(u,o,S,I,w,m,T,L,D)=>{o.type==="svg"?T="svg":o.type==="math"&&(T="mathml"),u==null?$(o,S,I,w,m,T,L,D):M(u,o,w,m,T,L,D)},$=(u,o,S,I,w,m,T,L)=>{let D,E;const{props:R,shapeFlag:K,transition:j,dirs:J}=u;if(D=u.el=a(u.type,m,R&&R.is,R),K&8?b(D,u.children):K&16&&G(u.children,D,null,I,w,Gn(u,m),T,L),J&&me(u,null,I,"created"),N(D,u,u.scopeId,T,I),R){for(const rt in R)rt!=="value"&&!Ne(rt)&&r(D,rt,null,R[rt],m,u.children,I,w,mt);"value"in R&&r(D,"value",null,R.value,m),(E=R.onVnodeBeforeMount)&&Qt(E,I,u)}J&&me(u,null,I,"beforeMount");const st=ra(w,j);st&&j.beforeEnter(D),s(D,o,S),((E=R&&R.onVnodeMounted)||st||J)&&Nt(()=>{E&&Qt(E,I,u),st&&j.enter(D),J&&me(u,null,I,"mounted")},w)},N=(u,o,S,I,w)=>{if(S&&f(u,S),I)for(let m=0;m<I.length;m++)f(u,I[m]);if(w){let m=w.subTree;if(o===m){const T=w.vnode;N(u,T,T.scopeId,T.slotScopeIds,w.parent)}}},G=(u,o,S,I,w,m,T,L,D=0)=>{for(let E=D;E<u.length;E++){const R=u[E]=L?ae(u[E]):Jt(u[E]);p(null,R,o,S,I,w,m,T,L)}},M=(u,o,S,I,w,m,T)=>{const L=o.el=u.el;let{patchFlag:D,dynamicChildren:E,dirs:R}=o;D|=u.patchFlag&16;const K=u.props||bt,j=o.props||bt;let J;if(S&&ge(S,!1),(J=j.onVnodeBeforeUpdate)&&Qt(J,S,o,u),R&&me(o,u,S,"beforeUpdate"),S&&ge(S,!0),E?q(u.dynamicChildren,E,L,S,I,Gn(o,w),m):T||et(u,o,L,null,S,I,Gn(o,w),m,!1),D>0){if(D&16)nt(L,o,K,j,S,I,w);else if(D&2&&K.class!==j.class&&r(L,"class",null,j.class,w),D&4&&r(L,"style",K.style,j.style,w),D&8){const st=o.dynamicProps;for(let rt=0;rt<st.length;rt++){const ht=st[rt],kt=K[ht],Ot=j[ht];(Ot!==kt||ht==="value")&&r(L,ht,kt,Ot,w,u.children,S,I,mt)}}D&1&&u.children!==o.children&&b(L,o.children)}else!T&&E==null&&nt(L,o,K,j,S,I,w);((J=j.onVnodeUpdated)||R)&&Nt(()=>{J&&Qt(J,S,o,u),R&&me(o,u,S,"updated")},I)},q=(u,o,S,I,w,m,T)=>{for(let L=0;L<o.length;L++){const D=u[L],E=o[L],R=D.el&&(D.type===Bt||!ce(D,E)||D.shapeFlag&70)?g(D.el):S;p(D,E,R,null,I,w,m,T,!0)}},nt=(u,o,S,I,w,m,T)=>{if(S!==I){if(S!==bt)for(const L in S)!Ne(L)&&!(L in I)&&r(u,L,S[L],null,T,o.children,w,m,mt);for(const L in I){if(Ne(L))continue;const D=I[L],E=S[L];D!==E&&L!=="value"&&r(u,L,E,D,T,o.children,w,m,mt)}"value"in I&&r(u,"value",S.value,I.value,T)}},O=(u,o,S,I,w,m,T,L,D)=>{const E=o.el=u?u.el:l(""),R=o.anchor=u?u.anchor:l("");let{patchFlag:K,dynamicChildren:j,slotScopeIds:J}=o;J&&(L=L?L.concat(J):J),u==null?(s(E,S,I),s(R,S,I),G(o.children||[],S,R,w,m,T,L,D)):K>0&&K&64&&j&&u.dynamicChildren?(q(u.dynamicChildren,j,S,w,m,T,L),(o.key!=null||w&&o===w.subTree)&&ri(u,o,!0)):et(u,o,S,R,w,m,T,L,D)},H=(u,o,S,I,w,m,T,L,D)=>{o.slotScopeIds=L,u==null?o.shapeFlag&512?w.ctx.activate(o,S,I,T,D):d(o,S,I,w,m,T,D):W(u,o,D)},d=(u,o,S,I,w,m,T)=>{const L=u.component=ha(u,I,w);if(qr(u)&&(L.ctx.renderer=_t),ma(L),L.asyncDep){if(w&&w.registerDep(L,Q),!u.el){const D=L.subTree=Lt(ne);y(null,D,o,S)}}else Q(L,u,o,S,w,m,T)},W=(u,o,S)=>{const I=o.component=u.component;if(wo(u,o,S))if(I.asyncDep&&!I.asyncResolved){V(I,o,S);return}else I.next=o,uo(I.update),I.effect.dirty=!0,I.update();else o.el=u.el,I.vnode=o},Q=(u,o,S,I,w,m,T)=>{const L=()=>{if(u.isMounted){let{next:R,bu:K,u:j,parent:J,vnode:st}=u;{const Kt=ii(u);if(Kt){R&&(R.el=st.el,V(u,R,T)),Kt.asyncDep.then(()=>{u.isUnmounted||L()});return}}let rt=R,ht;ge(u,!1),R?(R.el=st.el,V(u,R,T)):R=st,K&&dn(K),(ht=R.props&&R.props.onVnodeBeforeUpdate)&&Qt(ht,J,R,st),ge(u,!0);const kt=Zn(u),Ot=u.subTree;u.subTree=kt,p(Ot,kt,g(Ot.el),yt(Ot),u,w,m),R.el=kt.el,rt===null&&Os(u,kt.el),j&&Nt(j,w),(ht=R.props&&R.props.onVnodeUpdated)&&Nt(()=>Qt(ht,J,R,st),w)}else{let R;const{el:K,props:j}=o,{bm:J,m:st,parent:rt}=u,ht=hn(o);if(ge(u,!1),J&&dn(J),!ht&&(R=j&&j.onVnodeBeforeMount)&&Qt(R,rt,o),ge(u,!0),K&&U){const kt=()=>{u.subTree=Zn(u),U(K,u.subTree,u,w,null)};ht?o.type.__asyncLoader().then(()=>!u.isUnmounted&&kt()):kt()}else{const kt=u.subTree=Zn(u);p(null,kt,S,I,u,w,m),o.el=kt.el}if(st&&Nt(st,w),!ht&&(R=j&&j.onVnodeMounted)){const kt=o;Nt(()=>Qt(R,rt,kt),w)}(o.shapeFlag&256||rt&&hn(rt.vnode)&&rt.vnode.shapeFlag&256)&&u.a&&Nt(u.a,w),u.isMounted=!0,o=S=I=null}},D=u.effect=new ys(L,Vt,()=>As(E),u.scope),E=u.update=()=>{D.dirty&&D.run()};E.id=u.uid,ge(u,!0),E()},V=(u,o,S)=>{o.component=u;const I=u.vnode.props;u.vnode=o,u.next=null,Xo(u,o.props,I,S),ea(u,o.children,S),xe(),Vs(u),ke()},et=(u,o,S,I,w,m,T,L,D=!1)=>{const E=u&&u.children,R=u?u.shapeFlag:0,K=o.children,{patchFlag:j,shapeFlag:J}=o;if(j>0){if(j&128){at(E,K,S,I,w,m,T,L,D);return}else if(j&256){Z(E,K,S,I,w,m,T,L,D);return}}J&8?(R&16&&mt(E,w,m),K!==E&&b(S,K)):R&16?J&16?at(E,K,S,I,w,m,T,L,D):mt(E,w,m,!0):(R&8&&b(S,""),J&16&&G(K,S,I,w,m,T,L,D))},Z=(u,o,S,I,w,m,T,L,D)=>{u=u||Te,o=o||Te;const E=u.length,R=o.length,K=Math.min(E,R);let j;for(j=0;j<K;j++){const J=o[j]=D?ae(o[j]):Jt(o[j]);p(u[j],J,S,null,w,m,T,L,D)}E>R?mt(u,w,m,!0,!1,K):G(o,S,I,w,m,T,L,D,K)},at=(u,o,S,I,w,m,T,L,D)=>{let E=0;const R=o.length;let K=u.length-1,j=R-1;for(;E<=K&&E<=j;){const J=u[E],st=o[E]=D?ae(o[E]):Jt(o[E]);if(ce(J,st))p(J,st,S,null,w,m,T,L,D);else break;E++}for(;E<=K&&E<=j;){const J=u[K],st=o[j]=D?ae(o[j]):Jt(o[j]);if(ce(J,st))p(J,st,S,null,w,m,T,L,D);else break;K--,j--}if(E>K){if(E<=j){const J=j+1,st=J<R?o[J].el:I;for(;E<=j;)p(null,o[E]=D?ae(o[E]):Jt(o[E]),S,st,w,m,T,L,D),E++}}else if(E>j)for(;E<=K;)B(u[E],w,m,!0),E++;else{const J=E,st=E,rt=new Map;for(E=st;E<=j;E++){const It=o[E]=D?ae(o[E]):Jt(o[E]);It.key!=null&&rt.set(It.key,E)}let ht,kt=0;const Ot=j-st+1;let Kt=!1,Ct=0;const Xt=new Array(Ot);for(E=0;E<Ot;E++)Xt[E]=0;for(E=J;E<=K;E++){const It=u[E];if(kt>=Ot){B(It,w,m,!0);continue}let Zt;if(It.key!=null)Zt=rt.get(It.key);else for(ht=st;ht<=j;ht++)if(Xt[ht-st]===0&&ce(It,o[ht])){Zt=ht;break}Zt===void 0?B(It,w,m,!0):(Xt[Zt-st]=E+1,Zt>=Ct?Ct=Zt:Kt=!0,p(It,o[Zt],S,null,w,m,T,L,D),kt++)}const Se=Kt?ia(Xt):Te;for(ht=Se.length-1,E=Ot-1;E>=0;E--){const It=st+E,Zt=o[It],tn=It+1<R?o[It+1].el:I;Xt[E]===0?p(null,Zt,S,tn,w,m,T,L,D):Kt&&(ht<0||E!==Se[ht]?F(Zt,S,tn,2):ht--)}}},F=(u,o,S,I,w=null)=>{const{el:m,type:T,transition:L,children:D,shapeFlag:E}=u;if(E&6){F(u.component.subTree,o,S,I);return}if(E&128){u.suspense.move(o,S,I);return}if(E&64){T.move(u,o,S,_t);return}if(T===Bt){s(m,o,S);for(let K=0;K<D.length;K++)F(D[K],o,S,I);s(u.anchor,o,S);return}if(T===mn){A(u,o,S);return}if(I!==2&&E&1&&L)if(I===0)L.beforeEnter(m),s(m,o,S),Nt(()=>L.enter(m),w);else{const{leave:K,delayLeave:j,afterLeave:J}=L,st=()=>s(m,o,S),rt=()=>{K(m,()=>{st(),J&&J()})};j?j(m,st,rt):rt()}else s(m,o,S)},B=(u,o,S,I=!1,w=!1)=>{const{type:m,props:T,ref:L,children:D,dynamicChildren:E,shapeFlag:R,patchFlag:K,dirs:j}=u;if(L!=null&&us(L,null,S,u,!0),R&256){o.ctx.deactivate(u);return}const J=R&1&&j,st=!hn(u);let rt;if(st&&(rt=T&&T.onVnodeBeforeUnmount)&&Qt(rt,o,u),R&6)X(u.component,S,I);else{if(R&128){u.suspense.unmount(S,I);return}J&&me(u,null,o,"beforeUnmount"),R&64?u.type.remove(u,o,S,w,_t,I):E&&(m!==Bt||K>0&&K&64)?mt(E,o,S,!1,!0):(m===Bt&&K&384||!w&&R&16)&&mt(D,o,S),I&&it(u)}(st&&(rt=T&&T.onVnodeUnmounted)||J)&&Nt(()=>{rt&&Qt(rt,o,u),J&&me(u,null,o,"unmounted")},S)},it=u=>{const{type:o,el:S,anchor:I,transition:w}=u;if(o===Bt){tt(S,I);return}if(o===mn){z(u);return}const m=()=>{i(S),w&&!w.persisted&&w.afterLeave&&w.afterLeave()};if(u.shapeFlag&1&&w&&!w.persisted){const{leave:T,delayLeave:L}=w,D=()=>T(S,m);L?L(u.el,m,D):D()}else m()},tt=(u,o)=>{let S;for(;u!==o;)S=v(u),i(u),u=S;i(o)},X=(u,o,S)=>{const{bum:I,scope:w,update:m,subTree:T,um:L}=u;I&&dn(I),w.stop(),m&&(m.active=!1,B(T,u,o,S)),L&&Nt(L,o),Nt(()=>{u.isUnmounted=!0},o),o&&o.pendingBranch&&!o.isUnmounted&&u.asyncDep&&!u.asyncResolved&&u.suspenseId===o.pendingId&&(o.deps--,o.deps===0&&o.resolve())},mt=(u,o,S,I=!1,w=!1,m=0)=>{for(let T=m;T<u.length;T++)B(u[T],o,S,I,w)},yt=u=>u.shapeFlag&6?yt(u.component.subTree):u.shapeFlag&128?u.suspense.next():v(u.anchor||u.el);let ct=!1;const ft=(u,o,S)=>{u==null?o._vnode&&B(o._vnode,null,null,!0):p(o._vnode||null,u,o,null,null,null,S),ct||(ct=!0,Vs(),jr(),ct=!1),o._vnode=u},_t={p,um:B,m:F,r:it,mt:d,mc:G,pc:et,pbc:q,n:yt,o:t};let Y,U;return e&&([Y,U]=e(_t)),{render:ft,hydrate:Y,createApp:qo(ft,Y)}}function Gn({type:t,props:e},n){return n==="svg"&&t==="foreignObject"||n==="mathml"&&t==="annotation-xml"&&e&&e.encoding&&e.encoding.includes("html")?void 0:n}function ge({effect:t,update:e},n){t.allowRecurse=e.allowRecurse=n}function ra(t,e){return(!t||t&&!t.pendingBranch)&&e&&!e.persisted}function ri(t,e,n=!1){const s=t.children,i=e.children;if(lt(s)&&lt(i))for(let r=0;r<s.length;r++){const a=s[r];let l=i[r];l.shapeFlag&1&&!l.dynamicChildren&&((l.patchFlag<=0||l.patchFlag===32)&&(l=i[r]=ae(i[r]),l.el=a.el),n||ri(a,l)),l.type===Rn&&(l.el=a.el)}}function ia(t){const e=t.slice(),n=[0];let s,i,r,a,l;const c=t.length;for(s=0;s<c;s++){const h=t[s];if(h!==0){if(i=n[n.length-1],t[i]<h){e[s]=i,n.push(s);continue}for(r=0,a=n.length-1;r<a;)l=r+a>>1,t[n[l]]<h?r=l+1:a=l;h<t[n[r]]&&(r>0&&(e[s]=n[r-1]),n[r]=s)}}for(r=n.length,a=n[r-1];r-- >0;)n[r]=a,a=e[a];return n}function ii(t){const e=t.subTree.component;if(e)return e.asyncDep&&!e.asyncResolved?e:ii(e)}const oa=t=>t.__isTeleport,Bt=Symbol.for("v-fgt"),Rn=Symbol.for("v-txt"),ne=Symbol.for("v-cmt"),mn=Symbol.for("v-stc"),We=[];let Gt=null;function pt(t=!1){We.push(Gt=t?null:[])}function oi(){We.pop(),Gt=We[We.length-1]||null}let Le=1;function sr(t){Le+=t}function ai(t){return t.dynamicChildren=Le>0?Gt||Te:null,oi(),Le>0&&Gt&&Gt.push(t),t}function gt(t,e,n,s,i,r){return ai(x(t,e,n,s,i,r,!0))}function li(t,e,n,s,i){return ai(Lt(t,e,n,s,i,!0))}function ci(t){return t?t.__v_isVNode===!0:!1}function ce(t,e){return t.type===e.type&&t.key===e.key}const Mn="__vInternal",ui=({key:t})=>t??null,gn=({ref:t,ref_key:e,ref_for:n})=>(typeof t=="number"&&(t=""+t),t!=null?zt(t)||Wt(t)||ut(t)?{i:jt,r:t,k:e,f:!!n}:t:null);function x(t,e=null,n=null,s=0,i=null,r=t===Bt?0:1,a=!1,l=!1){const c={__v_isVNode:!0,__v_skip:!0,type:t,props:e,key:e&&ui(e),ref:e&&gn(e),scopeId:Bn,slotScopeIds:null,children:n,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:r,patchFlag:s,dynamicProps:i,dynamicChildren:null,appContext:null,ctx:jt};return l?(Bs(c,n),r&128&&t.normalize(c)):n&&(c.shapeFlag|=zt(n)?8:16),Le>0&&!a&&Gt&&(c.patchFlag>0||r&6)&&c.patchFlag!==32&&Gt.push(c),c}const Lt=aa;function aa(t,e=null,n=null,s=0,i=null,r=!1){if((!t||t===vo)&&(t=ne),ci(t)){const l=Be(t,e,!0);return n&&Bs(l,n),Le>0&&!r&&Gt&&(l.shapeFlag&6?Gt[Gt.indexOf(t)]=l:Gt.push(l)),l.patchFlag|=-2,l}if(_a(t)&&(t=t.__vccOpts),e){e=la(e);let{class:l,style:c}=e;l&&!zt(l)&&(e.class=At(l)),xt(c)&&(Br(c)&&!lt(c)&&(c=Dt({},c)),e.style=Je(c))}const a=zt(t)?1:_o(t)?128:oa(t)?64:xt(t)?4:ut(t)?2:0;return x(t,e,n,s,i,a,r,!0)}function la(t){return t?Br(t)||Mn in t?Dt({},t):t:null}function Be(t,e,n=!1){const{props:s,ref:i,patchFlag:r,children:a}=t,l=e?ua(s||{},e):s;return{__v_isVNode:!0,__v_skip:!0,type:t.type,props:l,key:l&&ui(l),ref:e&&e.ref?n&&i?lt(i)?i.concat(gn(e)):[i,gn(e)]:gn(e):i,scopeId:t.scopeId,slotScopeIds:t.slotScopeIds,children:a,target:t.target,targetAnchor:t.targetAnchor,staticCount:t.staticCount,shapeFlag:t.shapeFlag,patchFlag:e&&t.type!==Bt?r===-1?16:r|16:r,dynamicProps:t.dynamicProps,dynamicChildren:t.dynamicChildren,appContext:t.appContext,dirs:t.dirs,transition:t.transition,component:t.component,suspense:t.suspense,ssContent:t.ssContent&&Be(t.ssContent),ssFallback:t.ssFallback&&Be(t.ssFallback),el:t.el,anchor:t.anchor,ctx:t.ctx,ce:t.ce}}function Mt(t=" ",e=0){return Lt(Rn,null,t,e)}function ca(t,e){const n=Lt(mn,null,t);return n.staticCount=e,n}function Qe(t="",e=!1){return e?(pt(),li(ne,null,t)):Lt(ne,null,t)}function Jt(t){return t==null||typeof t=="boolean"?Lt(ne):lt(t)?Lt(Bt,null,t.slice()):typeof t=="object"?ae(t):Lt(Rn,null,String(t))}function ae(t){return t.el===null&&t.patchFlag!==-1||t.memo?t:Be(t)}function Bs(t,e){let n=0;const{shapeFlag:s}=t;if(e==null)e=null;else if(lt(e))n=16;else if(typeof e=="object")if(s&65){const i=e.default;i&&(i._c&&(i._d=!1),Bs(t,i()),i._c&&(i._d=!0));return}else{n=32;const i=e._;!i&&!(Mn in e)?e._ctx=jt:i===3&&jt&&(jt.slots._===1?e._=1:(e._=2,t.patchFlag|=1024))}else ut(e)?(e={default:e,_ctx:jt},n=32):(e=String(e),s&64?(n=16,e=[Mt(e)]):n=8);t.children=e,t.shapeFlag|=n}function ua(...t){const e={};for(let n=0;n<t.length;n++){const s=t[n];for(const i in s)if(i==="class")e.class!==s.class&&(e.class=At([e.class,s.class]));else if(i==="style")e.style=Je([e.style,s.style]);else if(En(i)){const r=e[i],a=s[i];a&&r!==a&&!(lt(r)&&r.includes(a))&&(e[i]=r?[].concat(r,a):a)}else i!==""&&(e[i]=s[i])}return e}function Qt(t,e,n,s=null){Yt(t,e,7,[n,s])}const da=Xr();let fa=0;function ha(t,e,n){const s=t.type,i=(e?e.appContext:t.appContext)||da,r={uid:fa++,vnode:t,type:s,parent:e,appContext:i,root:null,next:null,subTree:null,effect:null,update:null,scope:new Di(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:e?e.provides:Object.create(i.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:ti(s,i),emitsOptions:Wr(s,i),emit:null,emitted:null,propsDefaults:bt,inheritAttrs:s.inheritAttrs,ctx:bt,data:bt,props:bt,attrs:bt,slots:bt,refs:bt,setupState:bt,setupContext:null,attrsProxy:null,slotsProxy:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return r.ctx={_:r},r.root=e?e.root:r,r.emit=ho.bind(null,r),t.ce&&t.ce(r),r}let Rt=null;const pa=()=>Rt||jt;let kn,ds;{const t=_r(),e=(n,s)=>{let i;return(i=t[n])||(i=t[n]=[]),i.push(s),r=>{i.length>1?i.forEach(a=>a(r)):i[0](r)}};kn=e("__VUE_INSTANCE_SETTERS__",n=>Rt=n),ds=e("__VUE_SSR_SETTERS__",n=>Fn=n)}const be=t=>{const e=Rt;return kn(t),t.scope.on(),()=>{t.scope.off(),kn(e)}},fs=()=>{Rt&&Rt.scope.off(),kn(null)};function di(t){return t.vnode.shapeFlag&4}let Fn=!1;function ma(t,e=!1){e&&ds(e);const{props:n,children:s}=t.vnode,i=di(t);Yo(t,n,i,e),ta(t,s);const r=i?ga(t,e):void 0;return e&&ds(!1),r}function ga(t,e){const n=t.type;t.accessCache=Object.create(null),t.proxy=Dr(new Proxy(t.ctx,jo));const{setup:s}=n;if(s){const i=t.setupContext=s.length>1?va(t):null,r=be(t);xe();const a=de(s,t,0,[t.props,i]);if(ke(),r(),ws(a)){if(a.then(fs,fs),e)return a.then(l=>{hs(t,l,e)}).catch(l=>{Ye(l,t,0)});t.asyncDep=a}else hs(t,a,e)}else fi(t,e)}function hs(t,e,n){ut(e)?t.type.__ssrInlineRender?t.ssrRender=e:t.render=e:xt(e)&&(t.setupState=Rr(e)),fi(t,n)}let rr;function fi(t,e,n){const s=t.type;if(!t.render){if(!e&&rr&&!s.render){const i=s.template||zs(t).template;if(i){const{isCustomElement:r,compilerOptions:a}=t.appContext.config,{delimiters:l,compilerOptions:c}=s,h=Dt(Dt({isCustomElement:r,delimiters:l},a),c);s.render=rr(i,h)}}t.render=s.render||Vt}{const i=be(t);xe();try{Ho(t)}finally{ke(),i()}}}function wa(t){return t.attrsProxy||(t.attrsProxy=new Proxy(t.attrs,{get(e,n){return Ht(t,"get","$attrs"),e[n]}}))}function va(t){const e=n=>{t.exposed=n||{}};return{get attrs(){return wa(t)},slots:t.slots,emit:t.emit,expose:e}}function Nn(t){if(t.exposed)return t.exposeProxy||(t.exposeProxy=new Proxy(Rr(Dr(t.exposed)),{get(e,n){if(n in e)return e[n];if(n in je)return je[n](t)},has(e,n){return n in e||n in je}}))}function _a(t){return ut(t)&&"__vccOpts"in t}const Pt=(t,e)=>ro(t,e,Fn),ya="3.4.21";/**
* @vue/runtime-dom v3.4.21
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/const ba="http://www.w3.org/2000/svg",xa="http://www.w3.org/1998/Math/MathML",le=typeof document<"u"?document:null,ir=le&&le.createElement("template"),ka={insert:(t,e,n)=>{e.insertBefore(t,n||null)},remove:t=>{const e=t.parentNode;e&&e.removeChild(t)},createElement:(t,e,n,s)=>{const i=e==="svg"?le.createElementNS(ba,t):e==="mathml"?le.createElementNS(xa,t):le.createElement(t,n?{is:n}:void 0);return t==="select"&&s&&s.multiple!=null&&i.setAttribute("multiple",s.multiple),i},createText:t=>le.createTextNode(t),createComment:t=>le.createComment(t),setText:(t,e)=>{t.nodeValue=e},setElementText:(t,e)=>{t.textContent=e},parentNode:t=>t.parentNode,nextSibling:t=>t.nextSibling,querySelector:t=>le.querySelector(t),setScopeId(t,e){t.setAttribute(e,"")},insertStaticContent(t,e,n,s,i,r){const a=n?n.previousSibling:e.lastChild;if(i&&(i===r||i.nextSibling))for(;e.insertBefore(i.cloneNode(!0),n),!(i===r||!(i=i.nextSibling)););else{ir.innerHTML=s==="svg"?`<svg>${t}</svg>`:s==="mathml"?`<math>${t}</math>`:t;const l=ir.content;if(s==="svg"||s==="mathml"){const c=l.firstChild;for(;c.firstChild;)l.appendChild(c.firstChild);l.removeChild(c)}e.insertBefore(l,n)}return[a?a.nextSibling:e.firstChild,n?n.previousSibling:e.lastChild]}},Ca=Symbol("_vtc");function Sa(t,e,n){const s=t[Ca];s&&(e=(e?[e,...s]:[...s]).join(" ")),e==null?t.removeAttribute("class"):n?t.setAttribute("class",e):t.className=e}const Cn=Symbol("_vod"),hi=Symbol("_vsh"),Et={beforeMount(t,{value:e},{transition:n}){t[Cn]=t.style.display==="none"?"":t.style.display,n&&e?n.beforeEnter(t):Me(t,e)},mounted(t,{value:e},{transition:n}){n&&e&&n.enter(t)},updated(t,{value:e,oldValue:n},{transition:s}){!e!=!n&&(s?e?(s.beforeEnter(t),Me(t,!0),s.enter(t)):s.leave(t,()=>{Me(t,!1)}):Me(t,e))},beforeUnmount(t,{value:e}){Me(t,e)}};function Me(t,e){t.style.display=e?t[Cn]:"none",t[hi]=!e}const Ta=Symbol(""),Ia=/(^|;)\s*display\s*:/;function Ea(t,e,n){const s=t.style,i=zt(n);let r=!1;if(n&&!i){if(e)if(zt(e))for(const a of e.split(";")){const l=a.slice(0,a.indexOf(":")).trim();n[l]==null&&wn(s,l,"")}else for(const a in e)n[a]==null&&wn(s,a,"");for(const a in n)a==="display"&&(r=!0),wn(s,a,n[a])}else if(i){if(e!==n){const a=s[Ta];a&&(n+=";"+a),s.cssText=n,r=Ia.test(n)}}else e&&t.removeAttribute("style");Cn in t&&(t[Cn]=r?s.display:"",t[hi]&&(s.display="none"))}const or=/\s*!important$/;function wn(t,e,n){if(lt(n))n.forEach(s=>wn(t,e,s));else if(n==null&&(n=""),e.startsWith("--"))t.setProperty(e,n);else{const s=Aa(t,e);or.test(n)?t.setProperty(De(s),n.replace(or,""),"important"):t[s]=n}}const ar=["Webkit","Moz","ms"],qn={};function Aa(t,e){const n=qn[e];if(n)return n;let s=Pe(e);if(s!=="filter"&&s in t)return qn[e]=s;s=vr(s);for(let i=0;i<ar.length;i++){const r=ar[i]+s;if(r in t)return qn[e]=r}return e}const lr="http://www.w3.org/1999/xlink";function Oa(t,e,n,s,i){if(s&&e.startsWith("xlink:"))n==null?t.removeAttributeNS(lr,e.slice(6,e.length)):t.setAttributeNS(lr,e,n);else{const r=zi(e);n==null||r&&!yr(n)?t.removeAttribute(e):t.setAttribute(e,r?"":n)}}function Pa(t,e,n,s,i,r,a){if(e==="innerHTML"||e==="textContent"){s&&a(s,i,r),t[e]=n??"";return}const l=t.tagName;if(e==="value"&&l!=="PROGRESS"&&!l.includes("-")){const h=l==="OPTION"?t.getAttribute("value")||"":t.value,b=n??"";(h!==b||!("_value"in t))&&(t.value=b),n==null&&t.removeAttribute(e),t._value=n;return}let c=!1;if(n===""||n==null){const h=typeof t[e];h==="boolean"?n=yr(n):n==null&&h==="string"?(n="",c=!0):h==="number"&&(n=0,c=!0)}try{t[e]=n}catch{}c&&t.removeAttribute(e)}function pi(t,e,n,s){t.addEventListener(e,n,s)}function za(t,e,n,s){t.removeEventListener(e,n,s)}const cr=Symbol("_vei");function La(t,e,n,s,i=null){const r=t[cr]||(t[cr]={}),a=r[e];if(s&&a)a.value=s;else{const[l,c]=Ba(e);if(s){const h=r[e]=Ua(s,i);pi(t,l,h,c)}else a&&(za(t,l,a,c),r[e]=void 0)}}const ur=/(?:Once|Passive|Capture)$/;function Ba(t){let e;if(ur.test(t)){e={};let s;for(;s=t.match(ur);)t=t.slice(0,t.length-s[0].length),e[s[0].toLowerCase()]=!0}return[t[2]===":"?t.slice(3):De(t.slice(2)),e]}let Jn=0;const Da=Promise.resolve(),$a=()=>Jn||(Da.then(()=>Jn=0),Jn=Date.now());function Ua(t,e){const n=s=>{if(!s._vts)s._vts=Date.now();else if(s._vts<=n.attached)return;Yt(Ra(s,n.value),e,5,[s])};return n.value=t,n.attached=$a(),n}function Ra(t,e){if(lt(e)){const n=t.stopImmediatePropagation;return t.stopImmediatePropagation=()=>{n.call(t),t._stopped=!0},e.map(s=>i=>!i._stopped&&s&&s(i))}else return e}const dr=t=>t.charCodeAt(0)===111&&t.charCodeAt(1)===110&&t.charCodeAt(2)>96&&t.charCodeAt(2)<123,Ma=(t,e,n,s,i,r,a,l,c)=>{const h=i==="svg";e==="class"?Sa(t,s,h):e==="style"?Ea(t,n,s):En(e)?ms(e)||La(t,e,n,s,a):(e[0]==="."?(e=e.slice(1),!0):e[0]==="^"?(e=e.slice(1),!1):Fa(t,e,s,h))?Pa(t,e,s,r,a,l,c):(e==="true-value"?t._trueValue=s:e==="false-value"&&(t._falseValue=s),Oa(t,e,s,h))};function Fa(t,e,n,s){if(s)return!!(e==="innerHTML"||e==="textContent"||e in t&&dr(e)&&ut(n));if(e==="spellcheck"||e==="draggable"||e==="translate"||e==="form"||e==="list"&&t.tagName==="INPUT"||e==="type"&&t.tagName==="TEXTAREA")return!1;if(e==="width"||e==="height"){const i=t.tagName;if(i==="IMG"||i==="VIDEO"||i==="CANVAS"||i==="SOURCE")return!1}return dr(e)&&zt(n)?!1:e in t}const fr=t=>{const e=t.props["onUpdate:modelValue"]||!1;return lt(e)?n=>dn(e,n):e},Yn=Symbol("_assign"),Na={deep:!0,created(t,{value:e,modifiers:{number:n}},s){const i=An(e);pi(t,"change",()=>{const r=Array.prototype.filter.call(t.options,a=>a.selected).map(a=>n?_s(Sn(a)):Sn(a));t[Yn](t.multiple?i?new Set(r):r:r[0]),t._assigning=!0,Fr(()=>{t._assigning=!1})}),t[Yn]=fr(s)},mounted(t,{value:e,modifiers:{number:n}}){hr(t,e,n)},beforeUpdate(t,e,n){t[Yn]=fr(n)},updated(t,{value:e,modifiers:{number:n}}){t._assigning||hr(t,e,n)}};function hr(t,e,n){const s=t.multiple,i=lt(e);if(!(s&&!i&&!An(e))){for(let r=0,a=t.options.length;r<a;r++){const l=t.options[r],c=Sn(l);if(s)if(i){const h=typeof c;h==="string"||h==="number"?l.selected=e.includes(n?_s(c):c):l.selected=Bi(e,c)>-1}else l.selected=e.has(c);else if(Pn(Sn(l),e)){t.selectedIndex!==r&&(t.selectedIndex=r);return}}!s&&t.selectedIndex!==-1&&(t.selectedIndex=-1)}}function Sn(t){return"_value"in t?t._value:t.value}const ja=["ctrl","shift","alt","meta"],Ha={stop:t=>t.stopPropagation(),prevent:t=>t.preventDefault(),self:t=>t.target!==t.currentTarget,ctrl:t=>!t.ctrlKey,shift:t=>!t.shiftKey,alt:t=>!t.altKey,meta:t=>!t.metaKey,left:t=>"button"in t&&t.button!==0,middle:t=>"button"in t&&t.button!==1,right:t=>"button"in t&&t.button!==2,exact:(t,e)=>ja.some(n=>t[`${n}Key`]&&!e.includes(n))},jn=(t,e)=>{const n=t._withMods||(t._withMods={}),s=e.join(".");return n[s]||(n[s]=(i,...r)=>{for(let a=0;a<e.length;a++){const l=Ha[e[a]];if(l&&l(i,e))return}return t(i,...r)})},Wa=Dt({patchProp:Ma},ka);let pr;function Za(){return pr||(pr=na(Wa))}const Va=(...t)=>{const e=Za().createApp(...t),{mount:n}=e;return e.mount=s=>{const i=Ga(s);if(!i)return;const r=e._component;!ut(r)&&!r.render&&!r.template&&(r.template=i.innerHTML),i.innerHTML="";const a=n(i,!1,Ka(i));return i instanceof Element&&(i.removeAttribute("v-cloak"),i.setAttribute("data-v-app","")),a},e};function Ka(t){if(t instanceof SVGElement)return"svg";if(typeof MathMLElement=="function"&&t instanceof MathMLElement)return"mathml"}function Ga(t){return zt(t)?document.querySelector(t):t}const qa={class:"relative flex flex-wrap justify-center w-full gap-2"},Ja={class:"relative flex flex-wrap justify-center w-full gap-2"},Ya=["onClick"],Xa=pe({__name:"Toolbar",props:{pluginList:{},activeCategory:{}},emits:["update-active-category"],setup(t){const e=t,n=dt(!1),s=Pt(()=>{let a=[];return Array.isArray(e.pluginList)&&e.pluginList.forEach(l=>{if(l.tags&&typeof l.tags=="string"){let c=l.tags.split(",").map(h=>h.trim());c=c.filter(h=>h!==""),c.length>0&&a.push(c[0])}}),a}),i=Pt(()=>Array.from(new Set(s.value))),r=()=>{n.value=!n.value};return(a,l)=>(pt(),gt("div",qa,[x("button",{class:At(["inline-flex items-center border-2 shadow-md justify-center px-4 py-2 font-sans text-sm transition-colors duration-300 rounded-lg bg-muted-200 dark:bg-muted-800 text-muted-500 hover:bg-muted-300 dark:hover:bg-muted-700 dark:hover:text-muted-200 tw-accessibility",a.activeCategory==="all"?"border-primary-500 bg-muted-50 dark:bg-muted-700":"border-transparent "]),onClick:l[0]||(l[0]=c=>a.$emit("update-active-category","all"))}," All ",2),x("button",{class:"inline-flex w-full items-center shadow-md justify-center px-4 py-2 font-sans text-sm transition-colors duration-300 rounded-lg bg-muted-200 dark:bg-muted-800 text-muted-500 hover:bg-muted-300 dark:hover:bg-muted-700 dark:hover:text-muted-200 tw-accessibility",onClick:r}," 按分类筛选 ⇣ "),St(x("div",Ja,[(pt(!0),gt(Bt,null,Un(i.value,c=>(pt(),gt("div",{class:"plugin-item",key:c},[x("button",{class:At(["h-6 inline-flex items-center border-2 shadow-md justify-center flex-1 px-4 py-2 font-sans text-sm transition-colors duration-300 rounded-lg bg-muted-200 dark:bg-muted-800 text-muted-500 hover:bg-muted-300 dark:hover:bg-muted-700 dark:hover:text-muted-200 tw-accessibility",a.activeCategory===c?"border-primary-500 bg-muted-50 dark:bg-muted-700":"border-transparent"]),onClick:()=>{a.$emit("update-active-category",c)}},Tt(c),11,Ya)]))),128))],512),[[Et,n.value]])]))}}),$e=t=>(Zr("data-v-cee997d8"),t=t(),Vr(),t),Qa={class:"relative"},tl={class:"flex flex-col items-start h-full gap-4 p-6"},el={class:"relative w-full space-y-2"},nl={class:"relative"},sl={class:"absolute z-1 top-3 left-3 inline-block font-sans text-xs py-1.5 px-3 m-1 rounded-lg bg-primary-500 text-white shadow-xl shadow-primary-500/20"},rl={class:"mark"},il=$e(()=>x("span",{class:"learn"},"Tips ",-1)),ol=[il],al=["data-name"],ll=["data-name","alt","src"],cl=["src"],ul={class:"relative flex items-center h-10 overflow-hidden plugin_name"},dl={"data-pagefind-meta":"title",class:"flex items-center text-lg font-medium leading-6 plugin_name font-heading text-muted-800 dark:text-white"},fl=["href"],hl={class:"-mt-2 ml-2 px-2 rounded text-muted-100 bg-green-600 text-xs"},pl={class:"-mt-2 text-orange-500 ml-2 text-lg font-serif font-bold italic"},ml=$e(()=>x("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-v-35974737":"","data-icon":"mdi:temperature-celsius",class:"-mt-2 text-orange-500 iconify w-4 h-4 iconify--mdi"},[x("path",{fill:"currentColor",d:"M16.5 5c1.55 0 3 .47 4.19 1.28l-1.16 2.89A4.47 4.47 0 0 0 16.5 8C14 8 12 10 12 12.5s2 4.5 4.5 4.5c1.03 0 1.97-.34 2.73-.92l1.14 2.85A7.47 7.47 0 0 1 16.5 20A7.5 7.5 0 0 1 9 12.5A7.5 7.5 0 0 1 16.5 5M6 3a3 3 0 0 1 3 3a3 3 0 0 1-3 3a3 3 0 0 1-3-3a3 3 0 0 1 3-3m0 2a1 1 0 0 0-1 1a1 1 0 0 0 1 1a1 1 0 0 0 1-1a1 1 0 0 0-1-1Z"})],-1)),gl={class:"flex flex-wrap items-center leading-6 text-muted-600 dark:text-muted-400"},wl=["src"],vl=["src"],_l=["href"],yl=$e(()=>x("span",{class:"text-white font-sans text-xs py-1 px-3 m-1 rounded-lg bg-yellow-500"}," 教程 ",-1)),bl=[yl],xl=["href"],kl=$e(()=>x("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 32 32","data-v-5df2a037":"","data-icon":"la:readme",class:"text-green-500 block mx-auto iconify w-6 h-6 iconify--la"},[x("path",{fill:"currentColor",d:"M5 6C3.346 6 2 7.346 2 9v12c0 1.654 1.346 3 3 3l6.184-.02c.99 0 1.949.31 2.773.86L16 26.2l2.043-1.361a4.988 4.988 0 0 1 2.773-.84H27c1.654 0 3-1.346 3-3V9c0-1.654-1.346-3-3-3h-6.184c-1.386 0-2.73.408-3.882 1.176L16 7.799l-.934-.623A6.978 6.978 0 0 0 11.184 6H5zm0 2h6.184c.99 0 1.949.29 2.773.84L16 10.2l2.043-1.361A4.988 4.988 0 0 1 20.816 8H27c.552 0 1 .449 1 1v12c0 .551-.448 1-1 1h-6.184c-1.386 0-2.73.408-3.882 1.176l-.934.623l-.934-.623A6.978 6.978 0 0 0 11.184 22H5c-.552 0-1-.449-1-1V9c0-.551.448-1 1-1zm1 4v2h8v-2H6zm12 0v2h8v-2h-8zM6 16v2h8v-2H6zm12 0v2h8v-2h-8z"})],-1)),Cl=[kl],Sl={class:"plugin_desc text-base mt-auto min-h-[3rem] text-muted-600 dark:text-muted-400 leading-6"},Tl={class:"w-full mt-auto space-y-6"},Il={class:"relative flex items-center justify-start w-full"},El=["src","onerror"],Al=["href"],Ol={class:"pl-2"},Pl=["tooltip"],zl={class:"font-sans text-sm text-muted-400"},Ll={class:"block ml-auto font-sans text-sm text-muted-400"},Bl=$e(()=>x("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round",class:"svg-icon lucide-download"},[x("path",{d:"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}),x("polyline",{points:"7 10 12 15 17 10"}),x("line",{x1:"12",y1:"15",x2:"12",y2:"3"})],-1)),Dl=$e(()=>x("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 20 20","data-v-5ade68da":"","data-icon":"dashicons:update",class:"block w-4 h-4 mx-auto iconify iconify--dashicons"},[x("path",{fill:"currentColor",d:"M10.2 3.28c3.53 0 6.43 2.61 6.92 6h2.08l-3.5 4l-3.5-4h2.32a4.439 4.439 0 0 0-4.32-3.45c-1.45 0-2.73.71-3.54 1.78L4.95 5.66a6.965 6.965 0 0 1 5.25-2.38zm-.4 13.44c-3.52 0-6.43-2.61-6.92-6H.8l3.5-4c1.17 1.33 2.33 2.67 3.5 4H5.48a4.439 4.439 0 0 0 4.32 3.45c1.45 0 2.73-.71 3.54-1.78l1.71 1.95a6.95 6.95 0 0 1-5.25 2.38z"})],-1)),$l=["tooltip"],Ul={xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Rl=["fill"],Ml=pe({__name:"PluginCard",props:{app:{},pluginInfo:{},isLogin:{type:Boolean}},emits:["download-update-plugin"],setup(t){const e=t,n=e.isLogin,s=dt(!1),i=dt(""),r=dt("rgba(255, 51, 68, 0.8)");function a(){return e.pluginInfo.authorAvatar&&e.pluginInfo.authorAvatar.length>0?e.pluginInfo.authorAvatar:f(e.pluginInfo.author)}let l=[];e.pluginInfo.tags&&e.pluginInfo.tags.length>0&&(l=e.pluginInfo.tags.split(","));function c(_){return _>=1e6?(_/1e6).toFixed(0)+"M":_>=1e3?(_/1e3).toFixed(0)+"K":_.toString()}function h(_){if(_){const y=new Date(_),C=new Date,A=24*60*60*1e3,z=Math.round(Math.abs((C.getTime()-y.getTime())/A)),P=Math.round(z/30),$=Math.round(z/365);return z<=30?`${z}天前`:P<=12?`${P}月前`:`${$}年前`}else return"未知"}const b=()=>i.value=="未启用"?"当前插件未启用，点击启用":i.value=="已启用"?"当前插件已启动，点击禁用":"未成功启用。请查看控制台错误信息。",g=async _=>{i.value=="已启用"?(await e.app.plugins.disablePluginAndSave(_),i.value="未启用",r.value="rgba(255, 51, 68, 0.8)"):await e.app.plugins.enablePluginAndSave(_)?(i.value="已启用",r.value="#2aa330"):i.value="未成功"};Array.from(app.plugins.enabledPlugins).indexOf(e.pluginInfo.id)!=-1&&e.pluginInfo.isInstalled&&(i.value="已启用",r.value="#2aa330"),Array.from(app.plugins.enabledPlugins).indexOf(e.pluginInfo.id)==-1&&e.pluginInfo.isInstalled&&(i.value="未启用",r.value="rgba(255, 51, 68, 0.8)");function v(_){return(_.match(/\b\w/g)||[]).join("").toUpperCase()}function f(_){let y="";if(_){const C=v(_);/^[a-zA-Z]+$/.test(C)?y=`https://dummyimage.com/100x100/555/fff&text=${C.toUpperCase()}`:y=`https://dummyimage.com/100x100/555/ffff&text=${encodeURIComponent(C)}`}else y="https://cdn.pkmer.cn/covers/logo.png!nomark";return y}const k=()=>`background-image:url(${`https://pkmer.cn/img/cover/${Math.floor(Math.random()*11)}.jpg`});`,p=()=>{e.app.setting.open(),e.app.setting.openTabById("pkmer")};return(_,y)=>(pt(),gt("div",Qa,[x("div",tl,[x("div",el,[x("div",nl,[x("span",sl,Tt($t(l)[0]),1),St(x("view",rl,ol,512),[[Et,_.pluginInfo.contentUrl]]),x("span",{"data-name":_.pluginInfo.banner?"":_.pluginInfo.name,class:"noimg h-40 md:h-52",style:Je(k())},[x("img",{"data-name":_.pluginInfo.name,alt:_.pluginInfo.name,class:"border-0 absolute rounded-lg w-[200px] md:w-[300px] max-h-[148px] object-contain cursor-pointer",width:"348",height:"208",src:_.pluginInfo.banner?_.pluginInfo.banner.replace("!pkmer","!nomark"):"",loading:"lazy",decoding:"async",onClick:y[0]||(y[0]=C=>s.value=!0)},null,8,ll)],12,al),s.value?(pt(),gt("div",{key:0,class:"overlay",onClick:y[2]||(y[2]=C=>s.value=!1)},[x("img",{src:_.pluginInfo.banner?.replace("!nomark","!pkmer").replace("gif!pkmer","gif"),alt:"原图",onClick:y[1]||(y[1]=jn(()=>{},["stop"]))},null,8,cl)])):Qe("",!0)]),x("div",ul,[x("h3",dl,[x("a",{href:_.pluginInfo.contentUrl?_.pluginInfo.contentUrl:_.pluginInfo.readme_zh?_.pluginInfo.readme_zh:"#"},Tt(_.pluginInfo.name),9,fl),x("span",hl,Tt(_.pluginInfo.version),1),x("span",pl,Tt(c(_.pluginInfo.pkmerDownloadCount)),1),ml])]),x("p",gl,[x("img",{class:"h-full",alt:"GitHub stars",src:`https://img.shields.io/github/stars/${_.pluginInfo.repo}?style=plastic&color=4F46E5&label=关注量`},null,8,wl),x("img",{class:"h-full ml-2",alt:"下载数量",src:`https://img.shields.io/badge/下载总数-${c(_.pluginInfo.downloadCount)}-yellow`},null,8,vl),St(x("a",{class:"ml-2",href:_.pluginInfo.contentUrl?_.pluginInfo.contentUrl:"javascript:void(0)"},bl,8,_l),[[Et,_.pluginInfo.contentUrl]]),St(x("a",{class:"ml-2",href:_.pluginInfo.readme_zh?_.pluginInfo.readme_zh:"javascript:void(0)",tooltip:"Readme文档"},Cl,8,xl),[[Et,_.pluginInfo.readme_zh]])]),x("p",Sl,Tt(_.pluginInfo.chineseDescription?.replace("【机翻】","")||_.pluginInfo.description),1)]),x("div",Tl,[x("div",Il,[x("img",{class:"w-12 mask mask-blob",src:a(),onerror:`javascript:this.src='${f(_.pluginInfo.author)}'`,alt:"avatar"},null,8,El),x("a",{href:"https://github.com/"+_.pluginInfo.repo},[x("div",Ol,[x("h3",{class:"whitespace-nowrap text-ellipsis overflow-hidden max-w-[140px] font-heading font-medium text-muted-800 dark:text-muted-50",tooltip:_.pluginInfo.author},Tt(_.pluginInfo.author),9,Pl),x("p",zl,Tt(h(_.pluginInfo.pluginUpdatedTime)),1)])],8,Al),x("div",Ll,[St(x("button",{onClick:p,class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility"}," 请登录 ",512),[[Et,!$t(n)]]),St(x("div",null,[_.pluginInfo.isInstalled?_.pluginInfo.isInstalled&&_.pluginInfo.isOutdated?(pt(),gt("button",{key:1,class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility",onClick:y[4]||(y[4]=C=>_.$emit("download-update-plugin","update",_.pluginInfo.id,_.pluginInfo.version))},[Dl,Mt(" 更新 ")])):(pt(),gt("button",{key:2,onClick:y[5]||(y[5]=C=>g(_.pluginInfo.id)),tooltip:b(),class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility"},[(pt(),gt("svg",Ul,[x("path",{fill:r.value,d:"M8 4c.367 0 .721.048 1.063.145a3.943 3.943 0 0 1 1.762 1.031a3.944 3.944 0 0 1 1.03 1.762c.097.34.145.695.145 1.062c0 .367-.048.721-.145 1.063a3.94 3.94 0 0 1-1.03 1.765a4.017 4.017 0 0 1-1.762 1.031C8.72 11.953 8.367 12 8 12s-.721-.047-1.063-.14a4.056 4.056 0 0 1-1.765-1.032A4.055 4.055 0 0 1 4.14 9.062A3.992 3.992 0 0 1 4 8c0-.367.047-.721.14-1.063a4.02 4.02 0 0 1 .407-.953A4.089 4.089 0 0 1 5.98 4.546a3.94 3.94 0 0 1 .957-.401A3.89 3.89 0 0 1 8 4z"},null,8,Rl)])),Mt(" 已安装 ")],8,$l)):St((pt(),gt("button",{key:0,class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility",onClick:y[3]||(y[3]=C=>_.$emit("download-update-plugin","download",_.pluginInfo.id,_.pluginInfo.version))},[Bl,Mt(" 下载 ")],512)),[[Et,$t(n)]])],512),[[Et,$t(n)]])])])])])]))}});const mi=(t,e)=>{const n=t.__vccOpts||t;for(const[s,i]of e)n[s]=i;return n},Fl=mi(Ml,[["__scopeId","data-v-cee997d8"]]),ie="https://api.pkmer.cn/api/v1/download/obsidian";class Ce{token;constructor(e){this.token=e}fetchWithToken(e,n){return fetch(e,{...n,headers:{Authorization:"Bearer "+this.token}})}isTokenExpired(e){return Math.floor(Date.now()/1e3)>e.exp}async isUserLogin(){const e=this.token;if(e){const n=e.split("."),s=JSON.parse(decodeURIComponent(escape(window.atob(n[1].replace(/-/g,"+").replace(/_/g,"/")))));return this.isTokenExpired(s)?(console.log("Pkmer Token has expired. Please log in again to get a new token."),!1):!0}else return!1}async getPkmerDocs(){const e=await ot.requestUrl("https://pkmer.cn/getPost.json");return JSON.parse(e.text).map(s=>({slug:s.slug.split("/").pop(),uid:s.uid}))}async getDownloadUrl(e,n){return e=="obsidian-pkmer"?`https://pkmer.cn/_release/obsidian-pkmer.zip?v=${n}`:await(await this.fetchWithToken(ie+"/getPluginDownloadUrl/"+e+"/"+n,{method:"GET"})).text()}async getDownloadCount(){const e=await this.fetchWithToken(ie+"/getPluginDownloadCount");return parseInt(await e.text())+1}async getTop20Plugins(){const e=localStorage.getItem("top20Plugins"),n=localStorage.getItem("top20PluginsExpiry"),s=new Date().getTime();if(e&&n&&s<+n)return JSON.parse(e);{const r=await(await this.fetchWithToken(ie+"/getTop20Plugins")).json();return localStorage.setItem("top20Plugins",JSON.stringify(r)),localStorage.setItem("top20PluginsExpiry",String(s+8*60*60*1e3)),r}}async searchPlugins(e){return await(await this.fetchWithToken(ie+"/searchPlugins?keyword="+e+"&limit=10",{method:"GET"})).json()}async getPluginList(e=1*60*60*1e3){const n=localStorage.getItem("pluginList"),s=localStorage.getItem("pluginListExpiry"),i=new Date().getTime();if(n&&s){const r=parseInt(s);if(i<r)return JSON.parse(n)}try{const a=await(await this.fetchWithToken(ie+"/getAllPlugins",{method:"GET"})).json();return localStorage.setItem("pluginList",JSON.stringify(a)),localStorage.setItem("pluginListExpiry",String(i+e)),a}catch(r){throw console.error("Error fetching plugin list:",r),r}}async getTop20Themes(){const e=localStorage.getItem("top20Themes"),n=localStorage.getItem("top20ThemesExpiry"),s=new Date().getTime();if(e&&n&&s<+n)return JSON.parse(e);{const r=await(await this.fetchWithToken(ie+"/getTop20Themes")).json();return localStorage.setItem("top20Themes",JSON.stringify(r)),localStorage.setItem("top20ThemesExpiry",String(s+8*60*60*1e3)),r}}async getThemeList(e=1*60*60*1e3){const n=localStorage.getItem("themeList"),s=localStorage.getItem("themeListExpiry"),i=new Date().getTime();if(n&&s&&i<+s)return JSON.parse(n);try{const a=await(await this.fetchWithToken(ie+"/getAllThemes",{method:"GET"})).json();return localStorage.setItem("themeList",JSON.stringify(a)),localStorage.setItem("themeListExpiry",String(i+e)),a}catch(r){throw console.error("Error fetching theme list:",r),r}}async getThemeDownloadUrl(e,n){return await(await this.fetchWithToken(ie+"/getThemeDownloadUrl/"+e+"/"+n,{method:"GET"})).text()}async getPkmerVersion(){const e=Math.random(),n=await ot.requestUrl(`https://pkmer.cn/_release/manifest.json?_=${e}`);return JSON.parse(n.text).version}}var cn=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function un(t){throw new Error('Could not dynamically require "'+t+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var gi={exports:{}};/*!

JSZip v3.10.1 - A JavaScript class for generating and reading zip files
<http://stuartk.com/jszip>

(c) 2009-2016 Stuart Knightley <stuart [at] stuartk.com>
Dual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/main/LICENSE.markdown.

JSZip uses the library pako released under the MIT license :
https://github.com/nodeca/pako/blob/main/LICENSE
*/(function(t,e){(function(n){t.exports=n()})(function(){return function n(s,i,r){function a(h,b){if(!i[h]){if(!s[h]){var g=typeof un=="function"&&un;if(!b&&g)return g(h,!0);if(l)return l(h,!0);var v=new Error("Cannot find module '"+h+"'");throw v.code="MODULE_NOT_FOUND",v}var f=i[h]={exports:{}};s[h][0].call(f.exports,function(k){var p=s[h][1][k];return a(p||k)},f,f.exports,n,s,i,r)}return i[h].exports}for(var l=typeof un=="function"&&un,c=0;c<r.length;c++)a(r[c]);return a}({1:[function(n,s,i){var r=n("./utils"),a=n("./support"),l="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";i.encode=function(c){for(var h,b,g,v,f,k,p,_=[],y=0,C=c.length,A=C,z=r.getTypeOf(c)!=="string";y<c.length;)A=C-y,g=z?(h=c[y++],b=y<C?c[y++]:0,y<C?c[y++]:0):(h=c.charCodeAt(y++),b=y<C?c.charCodeAt(y++):0,y<C?c.charCodeAt(y++):0),v=h>>2,f=(3&h)<<4|b>>4,k=1<A?(15&b)<<2|g>>6:64,p=2<A?63&g:64,_.push(l.charAt(v)+l.charAt(f)+l.charAt(k)+l.charAt(p));return _.join("")},i.decode=function(c){var h,b,g,v,f,k,p=0,_=0,y="data:";if(c.substr(0,y.length)===y)throw new Error("Invalid base64 input, it looks like a data url.");var C,A=3*(c=c.replace(/[^A-Za-z0-9+/=]/g,"")).length/4;if(c.charAt(c.length-1)===l.charAt(64)&&A--,c.charAt(c.length-2)===l.charAt(64)&&A--,A%1!=0)throw new Error("Invalid base64 input, bad content length.");for(C=a.uint8array?new Uint8Array(0|A):new Array(0|A);p<c.length;)h=l.indexOf(c.charAt(p++))<<2|(v=l.indexOf(c.charAt(p++)))>>4,b=(15&v)<<4|(f=l.indexOf(c.charAt(p++)))>>2,g=(3&f)<<6|(k=l.indexOf(c.charAt(p++))),C[_++]=h,f!==64&&(C[_++]=b),k!==64&&(C[_++]=g);return C}},{"./support":30,"./utils":32}],2:[function(n,s,i){var r=n("./external"),a=n("./stream/DataWorker"),l=n("./stream/Crc32Probe"),c=n("./stream/DataLengthProbe");function h(b,g,v,f,k){this.compressedSize=b,this.uncompressedSize=g,this.crc32=v,this.compression=f,this.compressedContent=k}h.prototype={getContentWorker:function(){var b=new a(r.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new c("data_length")),g=this;return b.on("end",function(){if(this.streamInfo.data_length!==g.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")}),b},getCompressedWorker:function(){return new a(r.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},h.createWorkerFrom=function(b,g,v){return b.pipe(new l).pipe(new c("uncompressedSize")).pipe(g.compressWorker(v)).pipe(new c("compressedSize")).withStreamInfo("compression",g)},s.exports=h},{"./external":6,"./stream/Crc32Probe":25,"./stream/DataLengthProbe":26,"./stream/DataWorker":27}],3:[function(n,s,i){var r=n("./stream/GenericWorker");i.STORE={magic:"\0\0",compressWorker:function(){return new r("STORE compression")},uncompressWorker:function(){return new r("STORE decompression")}},i.DEFLATE=n("./flate")},{"./flate":7,"./stream/GenericWorker":28}],4:[function(n,s,i){var r=n("./utils"),a=function(){for(var l,c=[],h=0;h<256;h++){l=h;for(var b=0;b<8;b++)l=1&l?3988292384^l>>>1:l>>>1;c[h]=l}return c}();s.exports=function(l,c){return l!==void 0&&l.length?r.getTypeOf(l)!=="string"?function(h,b,g,v){var f=a,k=v+g;h^=-1;for(var p=v;p<k;p++)h=h>>>8^f[255&(h^b[p])];return-1^h}(0|c,l,l.length,0):function(h,b,g,v){var f=a,k=v+g;h^=-1;for(var p=v;p<k;p++)h=h>>>8^f[255&(h^b.charCodeAt(p))];return-1^h}(0|c,l,l.length,0):0}},{"./utils":32}],5:[function(n,s,i){i.base64=!1,i.binary=!1,i.dir=!1,i.createFolders=!0,i.date=null,i.compression=null,i.compressionOptions=null,i.comment=null,i.unixPermissions=null,i.dosPermissions=null},{}],6:[function(n,s,i){var r=null;r=typeof Promise<"u"?Promise:n("lie"),s.exports={Promise:r}},{lie:37}],7:[function(n,s,i){var r=typeof Uint8Array<"u"&&typeof Uint16Array<"u"&&typeof Uint32Array<"u",a=n("pako"),l=n("./utils"),c=n("./stream/GenericWorker"),h=r?"uint8array":"array";function b(g,v){c.call(this,"FlateWorker/"+g),this._pako=null,this._pakoAction=g,this._pakoOptions=v,this.meta={}}i.magic="\b\0",l.inherits(b,c),b.prototype.processChunk=function(g){this.meta=g.meta,this._pako===null&&this._createPako(),this._pako.push(l.transformTo(h,g.data),!1)},b.prototype.flush=function(){c.prototype.flush.call(this),this._pako===null&&this._createPako(),this._pako.push([],!0)},b.prototype.cleanUp=function(){c.prototype.cleanUp.call(this),this._pako=null},b.prototype._createPako=function(){this._pako=new a[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var g=this;this._pako.onData=function(v){g.push({data:v,meta:g.meta})}},i.compressWorker=function(g){return new b("Deflate",g)},i.uncompressWorker=function(){return new b("Inflate",{})}},{"./stream/GenericWorker":28,"./utils":32,pako:38}],8:[function(n,s,i){function r(f,k){var p,_="";for(p=0;p<k;p++)_+=String.fromCharCode(255&f),f>>>=8;return _}function a(f,k,p,_,y,C){var A,z,P=f.file,$=f.compression,N=C!==h.utf8encode,G=l.transformTo("string",C(P.name)),M=l.transformTo("string",h.utf8encode(P.name)),q=P.comment,nt=l.transformTo("string",C(q)),O=l.transformTo("string",h.utf8encode(q)),H=M.length!==P.name.length,d=O.length!==q.length,W="",Q="",V="",et=P.dir,Z=P.date,at={crc32:0,compressedSize:0,uncompressedSize:0};k&&!p||(at.crc32=f.crc32,at.compressedSize=f.compressedSize,at.uncompressedSize=f.uncompressedSize);var F=0;k&&(F|=8),N||!H&&!d||(F|=2048);var B=0,it=0;et&&(B|=16),y==="UNIX"?(it=798,B|=function(X,mt){var yt=X;return X||(yt=mt?16893:33204),(65535&yt)<<16}(P.unixPermissions,et)):(it=20,B|=function(X){return 63&(X||0)}(P.dosPermissions)),A=Z.getUTCHours(),A<<=6,A|=Z.getUTCMinutes(),A<<=5,A|=Z.getUTCSeconds()/2,z=Z.getUTCFullYear()-1980,z<<=4,z|=Z.getUTCMonth()+1,z<<=5,z|=Z.getUTCDate(),H&&(Q=r(1,1)+r(b(G),4)+M,W+="up"+r(Q.length,2)+Q),d&&(V=r(1,1)+r(b(nt),4)+O,W+="uc"+r(V.length,2)+V);var tt="";return tt+=`
\0`,tt+=r(F,2),tt+=$.magic,tt+=r(A,2),tt+=r(z,2),tt+=r(at.crc32,4),tt+=r(at.compressedSize,4),tt+=r(at.uncompressedSize,4),tt+=r(G.length,2),tt+=r(W.length,2),{fileRecord:g.LOCAL_FILE_HEADER+tt+G+W,dirRecord:g.CENTRAL_FILE_HEADER+r(it,2)+tt+r(nt.length,2)+"\0\0\0\0"+r(B,4)+r(_,4)+G+W+nt}}var l=n("../utils"),c=n("../stream/GenericWorker"),h=n("../utf8"),b=n("../crc32"),g=n("../signature");function v(f,k,p,_){c.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=k,this.zipPlatform=p,this.encodeFileName=_,this.streamFiles=f,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}l.inherits(v,c),v.prototype.push=function(f){var k=f.meta.percent||0,p=this.entriesCount,_=this._sources.length;this.accumulate?this.contentBuffer.push(f):(this.bytesWritten+=f.data.length,c.prototype.push.call(this,{data:f.data,meta:{currentFile:this.currentFile,percent:p?(k+100*(p-_-1))/p:100}}))},v.prototype.openedSource=function(f){this.currentSourceOffset=this.bytesWritten,this.currentFile=f.file.name;var k=this.streamFiles&&!f.file.dir;if(k){var p=a(f,k,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:p.fileRecord,meta:{percent:0}})}else this.accumulate=!0},v.prototype.closedSource=function(f){this.accumulate=!1;var k=this.streamFiles&&!f.file.dir,p=a(f,k,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(p.dirRecord),k)this.push({data:function(_){return g.DATA_DESCRIPTOR+r(_.crc32,4)+r(_.compressedSize,4)+r(_.uncompressedSize,4)}(f),meta:{percent:100}});else for(this.push({data:p.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},v.prototype.flush=function(){for(var f=this.bytesWritten,k=0;k<this.dirRecords.length;k++)this.push({data:this.dirRecords[k],meta:{percent:100}});var p=this.bytesWritten-f,_=function(y,C,A,z,P){var $=l.transformTo("string",P(z));return g.CENTRAL_DIRECTORY_END+"\0\0\0\0"+r(y,2)+r(y,2)+r(C,4)+r(A,4)+r($.length,2)+$}(this.dirRecords.length,p,f,this.zipComment,this.encodeFileName);this.push({data:_,meta:{percent:100}})},v.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},v.prototype.registerPrevious=function(f){this._sources.push(f);var k=this;return f.on("data",function(p){k.processChunk(p)}),f.on("end",function(){k.closedSource(k.previous.streamInfo),k._sources.length?k.prepareNextSource():k.end()}),f.on("error",function(p){k.error(p)}),this},v.prototype.resume=function(){return!!c.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},v.prototype.error=function(f){var k=this._sources;if(!c.prototype.error.call(this,f))return!1;for(var p=0;p<k.length;p++)try{k[p].error(f)}catch{}return!0},v.prototype.lock=function(){c.prototype.lock.call(this);for(var f=this._sources,k=0;k<f.length;k++)f[k].lock()},s.exports=v},{"../crc32":4,"../signature":23,"../stream/GenericWorker":28,"../utf8":31,"../utils":32}],9:[function(n,s,i){var r=n("../compressions"),a=n("./ZipFileWorker");i.generateWorker=function(l,c,h){var b=new a(c.streamFiles,h,c.platform,c.encodeFileName),g=0;try{l.forEach(function(v,f){g++;var k=function(C,A){var z=C||A,P=r[z];if(!P)throw new Error(z+" is not a valid compression method !");return P}(f.options.compression,c.compression),p=f.options.compressionOptions||c.compressionOptions||{},_=f.dir,y=f.date;f._compressWorker(k,p).withStreamInfo("file",{name:v,dir:_,date:y,comment:f.comment||"",unixPermissions:f.unixPermissions,dosPermissions:f.dosPermissions}).pipe(b)}),b.entriesCount=g}catch(v){b.error(v)}return b}},{"../compressions":3,"./ZipFileWorker":8}],10:[function(n,s,i){function r(){if(!(this instanceof r))return new r;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files=Object.create(null),this.comment=null,this.root="",this.clone=function(){var a=new r;for(var l in this)typeof this[l]!="function"&&(a[l]=this[l]);return a}}(r.prototype=n("./object")).loadAsync=n("./load"),r.support=n("./support"),r.defaults=n("./defaults"),r.version="3.10.1",r.loadAsync=function(a,l){return new r().loadAsync(a,l)},r.external=n("./external"),s.exports=r},{"./defaults":5,"./external":6,"./load":11,"./object":15,"./support":30}],11:[function(n,s,i){var r=n("./utils"),a=n("./external"),l=n("./utf8"),c=n("./zipEntries"),h=n("./stream/Crc32Probe"),b=n("./nodejsUtils");function g(v){return new a.Promise(function(f,k){var p=v.decompressed.getContentWorker().pipe(new h);p.on("error",function(_){k(_)}).on("end",function(){p.streamInfo.crc32!==v.decompressed.crc32?k(new Error("Corrupted zip : CRC32 mismatch")):f()}).resume()})}s.exports=function(v,f){var k=this;return f=r.extend(f||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:l.utf8decode}),b.isNode&&b.isStream(v)?a.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")):r.prepareContent("the loaded zip file",v,!0,f.optimizedBinaryString,f.base64).then(function(p){var _=new c(f);return _.load(p),_}).then(function(p){var _=[a.Promise.resolve(p)],y=p.files;if(f.checkCRC32)for(var C=0;C<y.length;C++)_.push(g(y[C]));return a.Promise.all(_)}).then(function(p){for(var _=p.shift(),y=_.files,C=0;C<y.length;C++){var A=y[C],z=A.fileNameStr,P=r.resolve(A.fileNameStr);k.file(P,A.decompressed,{binary:!0,optimizedBinaryString:!0,date:A.date,dir:A.dir,comment:A.fileCommentStr.length?A.fileCommentStr:null,unixPermissions:A.unixPermissions,dosPermissions:A.dosPermissions,createFolders:f.createFolders}),A.dir||(k.file(P).unsafeOriginalName=z)}return _.zipComment.length&&(k.comment=_.zipComment),k})}},{"./external":6,"./nodejsUtils":14,"./stream/Crc32Probe":25,"./utf8":31,"./utils":32,"./zipEntries":33}],12:[function(n,s,i){var r=n("../utils"),a=n("../stream/GenericWorker");function l(c,h){a.call(this,"Nodejs stream input adapter for "+c),this._upstreamEnded=!1,this._bindStream(h)}r.inherits(l,a),l.prototype._bindStream=function(c){var h=this;(this._stream=c).pause(),c.on("data",function(b){h.push({data:b,meta:{percent:0}})}).on("error",function(b){h.isPaused?this.generatedError=b:h.error(b)}).on("end",function(){h.isPaused?h._upstreamEnded=!0:h.end()})},l.prototype.pause=function(){return!!a.prototype.pause.call(this)&&(this._stream.pause(),!0)},l.prototype.resume=function(){return!!a.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},s.exports=l},{"../stream/GenericWorker":28,"../utils":32}],13:[function(n,s,i){var r=n("readable-stream").Readable;function a(l,c,h){r.call(this,c),this._helper=l;var b=this;l.on("data",function(g,v){b.push(g)||b._helper.pause(),h&&h(v)}).on("error",function(g){b.emit("error",g)}).on("end",function(){b.push(null)})}n("../utils").inherits(a,r),a.prototype._read=function(){this._helper.resume()},s.exports=a},{"../utils":32,"readable-stream":16}],14:[function(n,s,i){s.exports={isNode:typeof Buffer<"u",newBufferFrom:function(r,a){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(r,a);if(typeof r=="number")throw new Error('The "data" argument must not be a number');return new Buffer(r,a)},allocBuffer:function(r){if(Buffer.alloc)return Buffer.alloc(r);var a=new Buffer(r);return a.fill(0),a},isBuffer:function(r){return Buffer.isBuffer(r)},isStream:function(r){return r&&typeof r.on=="function"&&typeof r.pause=="function"&&typeof r.resume=="function"}}},{}],15:[function(n,s,i){function r(P,$,N){var G,M=l.getTypeOf($),q=l.extend(N||{},b);q.date=q.date||new Date,q.compression!==null&&(q.compression=q.compression.toUpperCase()),typeof q.unixPermissions=="string"&&(q.unixPermissions=parseInt(q.unixPermissions,8)),q.unixPermissions&&16384&q.unixPermissions&&(q.dir=!0),q.dosPermissions&&16&q.dosPermissions&&(q.dir=!0),q.dir&&(P=y(P)),q.createFolders&&(G=_(P))&&C.call(this,G,!0);var nt=M==="string"&&q.binary===!1&&q.base64===!1;N&&N.binary!==void 0||(q.binary=!nt),($ instanceof g&&$.uncompressedSize===0||q.dir||!$||$.length===0)&&(q.base64=!1,q.binary=!0,$="",q.compression="STORE",M="string");var O=null;O=$ instanceof g||$ instanceof c?$:k.isNode&&k.isStream($)?new p(P,$):l.prepareContent(P,$,q.binary,q.optimizedBinaryString,q.base64);var H=new v(P,O,q);this.files[P]=H}var a=n("./utf8"),l=n("./utils"),c=n("./stream/GenericWorker"),h=n("./stream/StreamHelper"),b=n("./defaults"),g=n("./compressedObject"),v=n("./zipObject"),f=n("./generate"),k=n("./nodejsUtils"),p=n("./nodejs/NodejsStreamInputAdapter"),_=function(P){P.slice(-1)==="/"&&(P=P.substring(0,P.length-1));var $=P.lastIndexOf("/");return 0<$?P.substring(0,$):""},y=function(P){return P.slice(-1)!=="/"&&(P+="/"),P},C=function(P,$){return $=$!==void 0?$:b.createFolders,P=y(P),this.files[P]||r.call(this,P,null,{dir:!0,createFolders:$}),this.files[P]};function A(P){return Object.prototype.toString.call(P)==="[object RegExp]"}var z={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(P){var $,N,G;for($ in this.files)G=this.files[$],(N=$.slice(this.root.length,$.length))&&$.slice(0,this.root.length)===this.root&&P(N,G)},filter:function(P){var $=[];return this.forEach(function(N,G){P(N,G)&&$.push(G)}),$},file:function(P,$,N){if(arguments.length!==1)return P=this.root+P,r.call(this,P,$,N),this;if(A(P)){var G=P;return this.filter(function(q,nt){return!nt.dir&&G.test(q)})}var M=this.files[this.root+P];return M&&!M.dir?M:null},folder:function(P){if(!P)return this;if(A(P))return this.filter(function(M,q){return q.dir&&P.test(M)});var $=this.root+P,N=C.call(this,$),G=this.clone();return G.root=N.name,G},remove:function(P){P=this.root+P;var $=this.files[P];if($||(P.slice(-1)!=="/"&&(P+="/"),$=this.files[P]),$&&!$.dir)delete this.files[P];else for(var N=this.filter(function(M,q){return q.name.slice(0,P.length)===P}),G=0;G<N.length;G++)delete this.files[N[G].name];return this},generate:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(P){var $,N={};try{if((N=l.extend(P||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:a.utf8encode})).type=N.type.toLowerCase(),N.compression=N.compression.toUpperCase(),N.type==="binarystring"&&(N.type="string"),!N.type)throw new Error("No output type specified.");l.checkSupport(N.type),N.platform!=="darwin"&&N.platform!=="freebsd"&&N.platform!=="linux"&&N.platform!=="sunos"||(N.platform="UNIX"),N.platform==="win32"&&(N.platform="DOS");var G=N.comment||this.comment||"";$=f.generateWorker(this,N,G)}catch(M){($=new c("error")).error(M)}return new h($,N.type||"string",N.mimeType)},generateAsync:function(P,$){return this.generateInternalStream(P).accumulate($)},generateNodeStream:function(P,$){return(P=P||{}).type||(P.type="nodebuffer"),this.generateInternalStream(P).toNodejsStream($)}};s.exports=z},{"./compressedObject":2,"./defaults":5,"./generate":9,"./nodejs/NodejsStreamInputAdapter":12,"./nodejsUtils":14,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31,"./utils":32,"./zipObject":35}],16:[function(n,s,i){s.exports=n("stream")},{stream:void 0}],17:[function(n,s,i){var r=n("./DataReader");function a(l){r.call(this,l);for(var c=0;c<this.data.length;c++)l[c]=255&l[c]}n("../utils").inherits(a,r),a.prototype.byteAt=function(l){return this.data[this.zero+l]},a.prototype.lastIndexOfSignature=function(l){for(var c=l.charCodeAt(0),h=l.charCodeAt(1),b=l.charCodeAt(2),g=l.charCodeAt(3),v=this.length-4;0<=v;--v)if(this.data[v]===c&&this.data[v+1]===h&&this.data[v+2]===b&&this.data[v+3]===g)return v-this.zero;return-1},a.prototype.readAndCheckSignature=function(l){var c=l.charCodeAt(0),h=l.charCodeAt(1),b=l.charCodeAt(2),g=l.charCodeAt(3),v=this.readData(4);return c===v[0]&&h===v[1]&&b===v[2]&&g===v[3]},a.prototype.readData=function(l){if(this.checkOffset(l),l===0)return[];var c=this.data.slice(this.zero+this.index,this.zero+this.index+l);return this.index+=l,c},s.exports=a},{"../utils":32,"./DataReader":18}],18:[function(n,s,i){var r=n("../utils");function a(l){this.data=l,this.length=l.length,this.index=0,this.zero=0}a.prototype={checkOffset:function(l){this.checkIndex(this.index+l)},checkIndex:function(l){if(this.length<this.zero+l||l<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+l+"). Corrupted zip ?")},setIndex:function(l){this.checkIndex(l),this.index=l},skip:function(l){this.setIndex(this.index+l)},byteAt:function(){},readInt:function(l){var c,h=0;for(this.checkOffset(l),c=this.index+l-1;c>=this.index;c--)h=(h<<8)+this.byteAt(c);return this.index+=l,h},readString:function(l){return r.transformTo("string",this.readData(l))},readData:function(){},lastIndexOfSignature:function(){},readAndCheckSignature:function(){},readDate:function(){var l=this.readInt(4);return new Date(Date.UTC(1980+(l>>25&127),(l>>21&15)-1,l>>16&31,l>>11&31,l>>5&63,(31&l)<<1))}},s.exports=a},{"../utils":32}],19:[function(n,s,i){var r=n("./Uint8ArrayReader");function a(l){r.call(this,l)}n("../utils").inherits(a,r),a.prototype.readData=function(l){this.checkOffset(l);var c=this.data.slice(this.zero+this.index,this.zero+this.index+l);return this.index+=l,c},s.exports=a},{"../utils":32,"./Uint8ArrayReader":21}],20:[function(n,s,i){var r=n("./DataReader");function a(l){r.call(this,l)}n("../utils").inherits(a,r),a.prototype.byteAt=function(l){return this.data.charCodeAt(this.zero+l)},a.prototype.lastIndexOfSignature=function(l){return this.data.lastIndexOf(l)-this.zero},a.prototype.readAndCheckSignature=function(l){return l===this.readData(4)},a.prototype.readData=function(l){this.checkOffset(l);var c=this.data.slice(this.zero+this.index,this.zero+this.index+l);return this.index+=l,c},s.exports=a},{"../utils":32,"./DataReader":18}],21:[function(n,s,i){var r=n("./ArrayReader");function a(l){r.call(this,l)}n("../utils").inherits(a,r),a.prototype.readData=function(l){if(this.checkOffset(l),l===0)return new Uint8Array(0);var c=this.data.subarray(this.zero+this.index,this.zero+this.index+l);return this.index+=l,c},s.exports=a},{"../utils":32,"./ArrayReader":17}],22:[function(n,s,i){var r=n("../utils"),a=n("../support"),l=n("./ArrayReader"),c=n("./StringReader"),h=n("./NodeBufferReader"),b=n("./Uint8ArrayReader");s.exports=function(g){var v=r.getTypeOf(g);return r.checkSupport(v),v!=="string"||a.uint8array?v==="nodebuffer"?new h(g):a.uint8array?new b(r.transformTo("uint8array",g)):new l(r.transformTo("array",g)):new c(g)}},{"../support":30,"../utils":32,"./ArrayReader":17,"./NodeBufferReader":19,"./StringReader":20,"./Uint8ArrayReader":21}],23:[function(n,s,i){i.LOCAL_FILE_HEADER="PK",i.CENTRAL_FILE_HEADER="PK",i.CENTRAL_DIRECTORY_END="PK",i.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK\x07",i.ZIP64_CENTRAL_DIRECTORY_END="PK",i.DATA_DESCRIPTOR="PK\x07\b"},{}],24:[function(n,s,i){var r=n("./GenericWorker"),a=n("../utils");function l(c){r.call(this,"ConvertWorker to "+c),this.destType=c}a.inherits(l,r),l.prototype.processChunk=function(c){this.push({data:a.transformTo(this.destType,c.data),meta:c.meta})},s.exports=l},{"../utils":32,"./GenericWorker":28}],25:[function(n,s,i){var r=n("./GenericWorker"),a=n("../crc32");function l(){r.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0)}n("../utils").inherits(l,r),l.prototype.processChunk=function(c){this.streamInfo.crc32=a(c.data,this.streamInfo.crc32||0),this.push(c)},s.exports=l},{"../crc32":4,"../utils":32,"./GenericWorker":28}],26:[function(n,s,i){var r=n("../utils"),a=n("./GenericWorker");function l(c){a.call(this,"DataLengthProbe for "+c),this.propName=c,this.withStreamInfo(c,0)}r.inherits(l,a),l.prototype.processChunk=function(c){if(c){var h=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=h+c.data.length}a.prototype.processChunk.call(this,c)},s.exports=l},{"../utils":32,"./GenericWorker":28}],27:[function(n,s,i){var r=n("../utils"),a=n("./GenericWorker");function l(c){a.call(this,"DataWorker");var h=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,c.then(function(b){h.dataIsReady=!0,h.data=b,h.max=b&&b.length||0,h.type=r.getTypeOf(b),h.isPaused||h._tickAndRepeat()},function(b){h.error(b)})}r.inherits(l,a),l.prototype.cleanUp=function(){a.prototype.cleanUp.call(this),this.data=null},l.prototype.resume=function(){return!!a.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,r.delay(this._tickAndRepeat,[],this)),!0)},l.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(r.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},l.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var c=null,h=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":c=this.data.substring(this.index,h);break;case"uint8array":c=this.data.subarray(this.index,h);break;case"array":case"nodebuffer":c=this.data.slice(this.index,h)}return this.index=h,this.push({data:c,meta:{percent:this.max?this.index/this.max*100:0}})},s.exports=l},{"../utils":32,"./GenericWorker":28}],28:[function(n,s,i){function r(a){this.name=a||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}r.prototype={push:function(a){this.emit("data",a)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0}catch(a){this.emit("error",a)}return!0},error:function(a){return!this.isFinished&&(this.isPaused?this.generatedError=a:(this.isFinished=!0,this.emit("error",a),this.previous&&this.previous.error(a),this.cleanUp()),!0)},on:function(a,l){return this._listeners[a].push(l),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(a,l){if(this._listeners[a])for(var c=0;c<this._listeners[a].length;c++)this._listeners[a][c].call(this,l)},pipe:function(a){return a.registerPrevious(this)},registerPrevious:function(a){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.streamInfo=a.streamInfo,this.mergeStreamInfo(),this.previous=a;var l=this;return a.on("data",function(c){l.processChunk(c)}),a.on("end",function(){l.end()}),a.on("error",function(c){l.error(c)}),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;var a=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),a=!0),this.previous&&this.previous.resume(),!a},flush:function(){},processChunk:function(a){this.push(a)},withStreamInfo:function(a,l){return this.extraStreamInfo[a]=l,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var a in this.extraStreamInfo)Object.prototype.hasOwnProperty.call(this.extraStreamInfo,a)&&(this.streamInfo[a]=this.extraStreamInfo[a])},lock:function(){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var a="Worker "+this.name;return this.previous?this.previous+" -> "+a:a}},s.exports=r},{}],29:[function(n,s,i){var r=n("../utils"),a=n("./ConvertWorker"),l=n("./GenericWorker"),c=n("../base64"),h=n("../support"),b=n("../external"),g=null;if(h.nodestream)try{g=n("../nodejs/NodejsStreamOutputAdapter")}catch{}function v(k,p){return new b.Promise(function(_,y){var C=[],A=k._internalType,z=k._outputType,P=k._mimeType;k.on("data",function($,N){C.push($),p&&p(N)}).on("error",function($){C=[],y($)}).on("end",function(){try{var $=function(N,G,M){switch(N){case"blob":return r.newBlob(r.transformTo("arraybuffer",G),M);case"base64":return c.encode(G);default:return r.transformTo(N,G)}}(z,function(N,G){var M,q=0,nt=null,O=0;for(M=0;M<G.length;M++)O+=G[M].length;switch(N){case"string":return G.join("");case"array":return Array.prototype.concat.apply([],G);case"uint8array":for(nt=new Uint8Array(O),M=0;M<G.length;M++)nt.set(G[M],q),q+=G[M].length;return nt;case"nodebuffer":return Buffer.concat(G);default:throw new Error("concat : unsupported type '"+N+"'")}}(A,C),P);_($)}catch(N){y(N)}C=[]}).resume()})}function f(k,p,_){var y=p;switch(p){case"blob":case"arraybuffer":y="uint8array";break;case"base64":y="string"}try{this._internalType=y,this._outputType=p,this._mimeType=_,r.checkSupport(y),this._worker=k.pipe(new a(y)),k.lock()}catch(C){this._worker=new l("error"),this._worker.error(C)}}f.prototype={accumulate:function(k){return v(this,k)},on:function(k,p){var _=this;return k==="data"?this._worker.on(k,function(y){p.call(_,y.data,y.meta)}):this._worker.on(k,function(){r.delay(p,arguments,_)}),this},resume:function(){return r.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(k){if(r.checkSupport("nodestream"),this._outputType!=="nodebuffer")throw new Error(this._outputType+" is not supported by this method");return new g(this,{objectMode:this._outputType!=="nodebuffer"},k)}},s.exports=f},{"../base64":1,"../external":6,"../nodejs/NodejsStreamOutputAdapter":13,"../support":30,"../utils":32,"./ConvertWorker":24,"./GenericWorker":28}],30:[function(n,s,i){if(i.base64=!0,i.array=!0,i.string=!0,i.arraybuffer=typeof ArrayBuffer<"u"&&typeof Uint8Array<"u",i.nodebuffer=typeof Buffer<"u",i.uint8array=typeof Uint8Array<"u",typeof ArrayBuffer>"u")i.blob=!1;else{var r=new ArrayBuffer(0);try{i.blob=new Blob([r],{type:"application/zip"}).size===0}catch{try{var a=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);a.append(r),i.blob=a.getBlob("application/zip").size===0}catch{i.blob=!1}}}try{i.nodestream=!!n("readable-stream").Readable}catch{i.nodestream=!1}},{"readable-stream":16}],31:[function(n,s,i){for(var r=n("./utils"),a=n("./support"),l=n("./nodejsUtils"),c=n("./stream/GenericWorker"),h=new Array(256),b=0;b<256;b++)h[b]=252<=b?6:248<=b?5:240<=b?4:224<=b?3:192<=b?2:1;h[254]=h[254]=1;function g(){c.call(this,"utf-8 decode"),this.leftOver=null}function v(){c.call(this,"utf-8 encode")}i.utf8encode=function(f){return a.nodebuffer?l.newBufferFrom(f,"utf-8"):function(k){var p,_,y,C,A,z=k.length,P=0;for(C=0;C<z;C++)(64512&(_=k.charCodeAt(C)))==55296&&C+1<z&&(64512&(y=k.charCodeAt(C+1)))==56320&&(_=65536+(_-55296<<10)+(y-56320),C++),P+=_<128?1:_<2048?2:_<65536?3:4;for(p=a.uint8array?new Uint8Array(P):new Array(P),C=A=0;A<P;C++)(64512&(_=k.charCodeAt(C)))==55296&&C+1<z&&(64512&(y=k.charCodeAt(C+1)))==56320&&(_=65536+(_-55296<<10)+(y-56320),C++),_<128?p[A++]=_:(_<2048?p[A++]=192|_>>>6:(_<65536?p[A++]=224|_>>>12:(p[A++]=240|_>>>18,p[A++]=128|_>>>12&63),p[A++]=128|_>>>6&63),p[A++]=128|63&_);return p}(f)},i.utf8decode=function(f){return a.nodebuffer?r.transformTo("nodebuffer",f).toString("utf-8"):function(k){var p,_,y,C,A=k.length,z=new Array(2*A);for(p=_=0;p<A;)if((y=k[p++])<128)z[_++]=y;else if(4<(C=h[y]))z[_++]=65533,p+=C-1;else{for(y&=C===2?31:C===3?15:7;1<C&&p<A;)y=y<<6|63&k[p++],C--;1<C?z[_++]=65533:y<65536?z[_++]=y:(y-=65536,z[_++]=55296|y>>10&1023,z[_++]=56320|1023&y)}return z.length!==_&&(z.subarray?z=z.subarray(0,_):z.length=_),r.applyFromCharCode(z)}(f=r.transformTo(a.uint8array?"uint8array":"array",f))},r.inherits(g,c),g.prototype.processChunk=function(f){var k=r.transformTo(a.uint8array?"uint8array":"array",f.data);if(this.leftOver&&this.leftOver.length){if(a.uint8array){var p=k;(k=new Uint8Array(p.length+this.leftOver.length)).set(this.leftOver,0),k.set(p,this.leftOver.length)}else k=this.leftOver.concat(k);this.leftOver=null}var _=function(C,A){var z;for((A=A||C.length)>C.length&&(A=C.length),z=A-1;0<=z&&(192&C[z])==128;)z--;return z<0||z===0?A:z+h[C[z]]>A?z:A}(k),y=k;_!==k.length&&(a.uint8array?(y=k.subarray(0,_),this.leftOver=k.subarray(_,k.length)):(y=k.slice(0,_),this.leftOver=k.slice(_,k.length))),this.push({data:i.utf8decode(y),meta:f.meta})},g.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:i.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},i.Utf8DecodeWorker=g,r.inherits(v,c),v.prototype.processChunk=function(f){this.push({data:i.utf8encode(f.data),meta:f.meta})},i.Utf8EncodeWorker=v},{"./nodejsUtils":14,"./stream/GenericWorker":28,"./support":30,"./utils":32}],32:[function(n,s,i){var r=n("./support"),a=n("./base64"),l=n("./nodejsUtils"),c=n("./external");function h(p){return p}function b(p,_){for(var y=0;y<p.length;++y)_[y]=255&p.charCodeAt(y);return _}n("setimmediate"),i.newBlob=function(p,_){i.checkSupport("blob");try{return new Blob([p],{type:_})}catch{try{var y=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return y.append(p),y.getBlob(_)}catch{throw new Error("Bug : can't construct the Blob.")}}};var g={stringifyByChunk:function(p,_,y){var C=[],A=0,z=p.length;if(z<=y)return String.fromCharCode.apply(null,p);for(;A<z;)_==="array"||_==="nodebuffer"?C.push(String.fromCharCode.apply(null,p.slice(A,Math.min(A+y,z)))):C.push(String.fromCharCode.apply(null,p.subarray(A,Math.min(A+y,z)))),A+=y;return C.join("")},stringifyByChar:function(p){for(var _="",y=0;y<p.length;y++)_+=String.fromCharCode(p[y]);return _},applyCanBeUsed:{uint8array:function(){try{return r.uint8array&&String.fromCharCode.apply(null,new Uint8Array(1)).length===1}catch{return!1}}(),nodebuffer:function(){try{return r.nodebuffer&&String.fromCharCode.apply(null,l.allocBuffer(1)).length===1}catch{return!1}}()}};function v(p){var _=65536,y=i.getTypeOf(p),C=!0;if(y==="uint8array"?C=g.applyCanBeUsed.uint8array:y==="nodebuffer"&&(C=g.applyCanBeUsed.nodebuffer),C)for(;1<_;)try{return g.stringifyByChunk(p,y,_)}catch{_=Math.floor(_/2)}return g.stringifyByChar(p)}function f(p,_){for(var y=0;y<p.length;y++)_[y]=p[y];return _}i.applyFromCharCode=v;var k={};k.string={string:h,array:function(p){return b(p,new Array(p.length))},arraybuffer:function(p){return k.string.uint8array(p).buffer},uint8array:function(p){return b(p,new Uint8Array(p.length))},nodebuffer:function(p){return b(p,l.allocBuffer(p.length))}},k.array={string:v,array:h,arraybuffer:function(p){return new Uint8Array(p).buffer},uint8array:function(p){return new Uint8Array(p)},nodebuffer:function(p){return l.newBufferFrom(p)}},k.arraybuffer={string:function(p){return v(new Uint8Array(p))},array:function(p){return f(new Uint8Array(p),new Array(p.byteLength))},arraybuffer:h,uint8array:function(p){return new Uint8Array(p)},nodebuffer:function(p){return l.newBufferFrom(new Uint8Array(p))}},k.uint8array={string:v,array:function(p){return f(p,new Array(p.length))},arraybuffer:function(p){return p.buffer},uint8array:h,nodebuffer:function(p){return l.newBufferFrom(p)}},k.nodebuffer={string:v,array:function(p){return f(p,new Array(p.length))},arraybuffer:function(p){return k.nodebuffer.uint8array(p).buffer},uint8array:function(p){return f(p,new Uint8Array(p.length))},nodebuffer:h},i.transformTo=function(p,_){if(_=_||"",!p)return _;i.checkSupport(p);var y=i.getTypeOf(_);return k[y][p](_)},i.resolve=function(p){for(var _=p.split("/"),y=[],C=0;C<_.length;C++){var A=_[C];A==="."||A===""&&C!==0&&C!==_.length-1||(A===".."?y.pop():y.push(A))}return y.join("/")},i.getTypeOf=function(p){return typeof p=="string"?"string":Object.prototype.toString.call(p)==="[object Array]"?"array":r.nodebuffer&&l.isBuffer(p)?"nodebuffer":r.uint8array&&p instanceof Uint8Array?"uint8array":r.arraybuffer&&p instanceof ArrayBuffer?"arraybuffer":void 0},i.checkSupport=function(p){if(!r[p.toLowerCase()])throw new Error(p+" is not supported by this platform")},i.MAX_VALUE_16BITS=65535,i.MAX_VALUE_32BITS=-1,i.pretty=function(p){var _,y,C="";for(y=0;y<(p||"").length;y++)C+="\\x"+((_=p.charCodeAt(y))<16?"0":"")+_.toString(16).toUpperCase();return C},i.delay=function(p,_,y){setImmediate(function(){p.apply(y||null,_||[])})},i.inherits=function(p,_){function y(){}y.prototype=_.prototype,p.prototype=new y},i.extend=function(){var p,_,y={};for(p=0;p<arguments.length;p++)for(_ in arguments[p])Object.prototype.hasOwnProperty.call(arguments[p],_)&&y[_]===void 0&&(y[_]=arguments[p][_]);return y},i.prepareContent=function(p,_,y,C,A){return c.Promise.resolve(_).then(function(z){return r.blob&&(z instanceof Blob||["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(z))!==-1)&&typeof FileReader<"u"?new c.Promise(function(P,$){var N=new FileReader;N.onload=function(G){P(G.target.result)},N.onerror=function(G){$(G.target.error)},N.readAsArrayBuffer(z)}):z}).then(function(z){var P=i.getTypeOf(z);return P?(P==="arraybuffer"?z=i.transformTo("uint8array",z):P==="string"&&(A?z=a.decode(z):y&&C!==!0&&(z=function($){return b($,r.uint8array?new Uint8Array($.length):new Array($.length))}(z))),z):c.Promise.reject(new Error("Can't read the data of '"+p+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))})}},{"./base64":1,"./external":6,"./nodejsUtils":14,"./support":30,setimmediate:54}],33:[function(n,s,i){var r=n("./reader/readerFor"),a=n("./utils"),l=n("./signature"),c=n("./zipEntry"),h=n("./support");function b(g){this.files=[],this.loadOptions=g}b.prototype={checkSignature:function(g){if(!this.reader.readAndCheckSignature(g)){this.reader.index-=4;var v=this.reader.readString(4);throw new Error("Corrupted zip or bug: unexpected signature ("+a.pretty(v)+", expected "+a.pretty(g)+")")}},isSignature:function(g,v){var f=this.reader.index;this.reader.setIndex(g);var k=this.reader.readString(4)===v;return this.reader.setIndex(f),k},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var g=this.reader.readData(this.zipCommentLength),v=h.uint8array?"uint8array":"array",f=a.transformTo(v,g);this.zipComment=this.loadOptions.decodeFileName(f)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var g,v,f,k=this.zip64EndOfCentralSize-44;0<k;)g=this.reader.readInt(2),v=this.reader.readInt(4),f=this.reader.readData(v),this.zip64ExtensibleData[g]={id:g,length:v,value:f}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var g,v;for(g=0;g<this.files.length;g++)v=this.files[g],this.reader.setIndex(v.localHeaderOffset),this.checkSignature(l.LOCAL_FILE_HEADER),v.readLocalPart(this.reader),v.handleUTF8(),v.processAttributes()},readCentralDir:function(){var g;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(l.CENTRAL_FILE_HEADER);)(g=new c({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(g);if(this.centralDirRecords!==this.files.length&&this.centralDirRecords!==0&&this.files.length===0)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var g=this.reader.lastIndexOfSignature(l.CENTRAL_DIRECTORY_END);if(g<0)throw this.isSignature(0,l.LOCAL_FILE_HEADER)?new Error("Corrupted zip: can't find end of central directory"):new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html");this.reader.setIndex(g);var v=g;if(this.checkSignature(l.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===a.MAX_VALUE_16BITS||this.diskWithCentralDirStart===a.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===a.MAX_VALUE_16BITS||this.centralDirRecords===a.MAX_VALUE_16BITS||this.centralDirSize===a.MAX_VALUE_32BITS||this.centralDirOffset===a.MAX_VALUE_32BITS){if(this.zip64=!0,(g=this.reader.lastIndexOfSignature(l.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(g),this.checkSignature(l.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,l.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(l.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(l.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var f=this.centralDirOffset+this.centralDirSize;this.zip64&&(f+=20,f+=12+this.zip64EndOfCentralSize);var k=v-f;if(0<k)this.isSignature(v,l.CENTRAL_FILE_HEADER)||(this.reader.zero=k);else if(k<0)throw new Error("Corrupted zip: missing "+Math.abs(k)+" bytes.")},prepareReader:function(g){this.reader=r(g)},load:function(g){this.prepareReader(g),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},s.exports=b},{"./reader/readerFor":22,"./signature":23,"./support":30,"./utils":32,"./zipEntry":34}],34:[function(n,s,i){var r=n("./reader/readerFor"),a=n("./utils"),l=n("./compressedObject"),c=n("./crc32"),h=n("./utf8"),b=n("./compressions"),g=n("./support");function v(f,k){this.options=f,this.loadOptions=k}v.prototype={isEncrypted:function(){return(1&this.bitFlag)==1},useUTF8:function(){return(2048&this.bitFlag)==2048},readLocalPart:function(f){var k,p;if(f.skip(22),this.fileNameLength=f.readInt(2),p=f.readInt(2),this.fileName=f.readData(this.fileNameLength),f.skip(p),this.compressedSize===-1||this.uncompressedSize===-1)throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");if((k=function(_){for(var y in b)if(Object.prototype.hasOwnProperty.call(b,y)&&b[y].magic===_)return b[y];return null}(this.compressionMethod))===null)throw new Error("Corrupted zip : compression "+a.pretty(this.compressionMethod)+" unknown (inner file : "+a.transformTo("string",this.fileName)+")");this.decompressed=new l(this.compressedSize,this.uncompressedSize,this.crc32,k,f.readData(this.compressedSize))},readCentralPart:function(f){this.versionMadeBy=f.readInt(2),f.skip(2),this.bitFlag=f.readInt(2),this.compressionMethod=f.readString(2),this.date=f.readDate(),this.crc32=f.readInt(4),this.compressedSize=f.readInt(4),this.uncompressedSize=f.readInt(4);var k=f.readInt(2);if(this.extraFieldsLength=f.readInt(2),this.fileCommentLength=f.readInt(2),this.diskNumberStart=f.readInt(2),this.internalFileAttributes=f.readInt(2),this.externalFileAttributes=f.readInt(4),this.localHeaderOffset=f.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");f.skip(k),this.readExtraFields(f),this.parseZIP64ExtraField(f),this.fileComment=f.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var f=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),f==0&&(this.dosPermissions=63&this.externalFileAttributes),f==3&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||this.fileNameStr.slice(-1)!=="/"||(this.dir=!0)},parseZIP64ExtraField:function(){if(this.extraFields[1]){var f=r(this.extraFields[1].value);this.uncompressedSize===a.MAX_VALUE_32BITS&&(this.uncompressedSize=f.readInt(8)),this.compressedSize===a.MAX_VALUE_32BITS&&(this.compressedSize=f.readInt(8)),this.localHeaderOffset===a.MAX_VALUE_32BITS&&(this.localHeaderOffset=f.readInt(8)),this.diskNumberStart===a.MAX_VALUE_32BITS&&(this.diskNumberStart=f.readInt(4))}},readExtraFields:function(f){var k,p,_,y=f.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});f.index+4<y;)k=f.readInt(2),p=f.readInt(2),_=f.readData(p),this.extraFields[k]={id:k,length:p,value:_};f.setIndex(y)},handleUTF8:function(){var f=g.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=h.utf8decode(this.fileName),this.fileCommentStr=h.utf8decode(this.fileComment);else{var k=this.findExtraFieldUnicodePath();if(k!==null)this.fileNameStr=k;else{var p=a.transformTo(f,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(p)}var _=this.findExtraFieldUnicodeComment();if(_!==null)this.fileCommentStr=_;else{var y=a.transformTo(f,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(y)}}},findExtraFieldUnicodePath:function(){var f=this.extraFields[28789];if(f){var k=r(f.value);return k.readInt(1)!==1||c(this.fileName)!==k.readInt(4)?null:h.utf8decode(k.readData(f.length-5))}return null},findExtraFieldUnicodeComment:function(){var f=this.extraFields[25461];if(f){var k=r(f.value);return k.readInt(1)!==1||c(this.fileComment)!==k.readInt(4)?null:h.utf8decode(k.readData(f.length-5))}return null}},s.exports=v},{"./compressedObject":2,"./compressions":3,"./crc32":4,"./reader/readerFor":22,"./support":30,"./utf8":31,"./utils":32}],35:[function(n,s,i){function r(k,p,_){this.name=k,this.dir=_.dir,this.date=_.date,this.comment=_.comment,this.unixPermissions=_.unixPermissions,this.dosPermissions=_.dosPermissions,this._data=p,this._dataBinary=_.binary,this.options={compression:_.compression,compressionOptions:_.compressionOptions}}var a=n("./stream/StreamHelper"),l=n("./stream/DataWorker"),c=n("./utf8"),h=n("./compressedObject"),b=n("./stream/GenericWorker");r.prototype={internalStream:function(k){var p=null,_="string";try{if(!k)throw new Error("No output type specified.");var y=(_=k.toLowerCase())==="string"||_==="text";_!=="binarystring"&&_!=="text"||(_="string"),p=this._decompressWorker();var C=!this._dataBinary;C&&!y&&(p=p.pipe(new c.Utf8EncodeWorker)),!C&&y&&(p=p.pipe(new c.Utf8DecodeWorker))}catch(A){(p=new b("error")).error(A)}return new a(p,_,"")},async:function(k,p){return this.internalStream(k).accumulate(p)},nodeStream:function(k,p){return this.internalStream(k||"nodebuffer").toNodejsStream(p)},_compressWorker:function(k,p){if(this._data instanceof h&&this._data.compression.magic===k.magic)return this._data.getCompressedWorker();var _=this._decompressWorker();return this._dataBinary||(_=_.pipe(new c.Utf8EncodeWorker)),h.createWorkerFrom(_,k,p)},_decompressWorker:function(){return this._data instanceof h?this._data.getContentWorker():this._data instanceof b?this._data:new l(this._data)}};for(var g=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],v=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},f=0;f<g.length;f++)r.prototype[g[f]]=v;s.exports=r},{"./compressedObject":2,"./stream/DataWorker":27,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31}],36:[function(n,s,i){(function(r){var a,l,c=r.MutationObserver||r.WebKitMutationObserver;if(c){var h=0,b=new c(k),g=r.document.createTextNode("");b.observe(g,{characterData:!0}),a=function(){g.data=h=++h%2}}else if(r.setImmediate||r.MessageChannel===void 0)a="document"in r&&"onreadystatechange"in r.document.createElement("script")?function(){var p=r.document.createElement("script");p.onreadystatechange=function(){k(),p.onreadystatechange=null,p.parentNode.removeChild(p),p=null},r.document.documentElement.appendChild(p)}:function(){setTimeout(k,0)};else{var v=new r.MessageChannel;v.port1.onmessage=k,a=function(){v.port2.postMessage(0)}}var f=[];function k(){var p,_;l=!0;for(var y=f.length;y;){for(_=f,f=[],p=-1;++p<y;)_[p]();y=f.length}l=!1}s.exports=function(p){f.push(p)!==1||l||a()}}).call(this,typeof cn<"u"?cn:typeof self<"u"?self:typeof window<"u"?window:{})},{}],37:[function(n,s,i){var r=n("immediate");function a(){}var l={},c=["REJECTED"],h=["FULFILLED"],b=["PENDING"];function g(y){if(typeof y!="function")throw new TypeError("resolver must be a function");this.state=b,this.queue=[],this.outcome=void 0,y!==a&&p(this,y)}function v(y,C,A){this.promise=y,typeof C=="function"&&(this.onFulfilled=C,this.callFulfilled=this.otherCallFulfilled),typeof A=="function"&&(this.onRejected=A,this.callRejected=this.otherCallRejected)}function f(y,C,A){r(function(){var z;try{z=C(A)}catch(P){return l.reject(y,P)}z===y?l.reject(y,new TypeError("Cannot resolve promise with itself")):l.resolve(y,z)})}function k(y){var C=y&&y.then;if(y&&(typeof y=="object"||typeof y=="function")&&typeof C=="function")return function(){C.apply(y,arguments)}}function p(y,C){var A=!1;function z(N){A||(A=!0,l.reject(y,N))}function P(N){A||(A=!0,l.resolve(y,N))}var $=_(function(){C(P,z)});$.status==="error"&&z($.value)}function _(y,C){var A={};try{A.value=y(C),A.status="success"}catch(z){A.status="error",A.value=z}return A}(s.exports=g).prototype.finally=function(y){if(typeof y!="function")return this;var C=this.constructor;return this.then(function(A){return C.resolve(y()).then(function(){return A})},function(A){return C.resolve(y()).then(function(){throw A})})},g.prototype.catch=function(y){return this.then(null,y)},g.prototype.then=function(y,C){if(typeof y!="function"&&this.state===h||typeof C!="function"&&this.state===c)return this;var A=new this.constructor(a);return this.state!==b?f(A,this.state===h?y:C,this.outcome):this.queue.push(new v(A,y,C)),A},v.prototype.callFulfilled=function(y){l.resolve(this.promise,y)},v.prototype.otherCallFulfilled=function(y){f(this.promise,this.onFulfilled,y)},v.prototype.callRejected=function(y){l.reject(this.promise,y)},v.prototype.otherCallRejected=function(y){f(this.promise,this.onRejected,y)},l.resolve=function(y,C){var A=_(k,C);if(A.status==="error")return l.reject(y,A.value);var z=A.value;if(z)p(y,z);else{y.state=h,y.outcome=C;for(var P=-1,$=y.queue.length;++P<$;)y.queue[P].callFulfilled(C)}return y},l.reject=function(y,C){y.state=c,y.outcome=C;for(var A=-1,z=y.queue.length;++A<z;)y.queue[A].callRejected(C);return y},g.resolve=function(y){return y instanceof this?y:l.resolve(new this(a),y)},g.reject=function(y){var C=new this(a);return l.reject(C,y)},g.all=function(y){var C=this;if(Object.prototype.toString.call(y)!=="[object Array]")return this.reject(new TypeError("must be an array"));var A=y.length,z=!1;if(!A)return this.resolve([]);for(var P=new Array(A),$=0,N=-1,G=new this(a);++N<A;)M(y[N],N);return G;function M(q,nt){C.resolve(q).then(function(O){P[nt]=O,++$!==A||z||(z=!0,l.resolve(G,P))},function(O){z||(z=!0,l.reject(G,O))})}},g.race=function(y){var C=this;if(Object.prototype.toString.call(y)!=="[object Array]")return this.reject(new TypeError("must be an array"));var A=y.length,z=!1;if(!A)return this.resolve([]);for(var P=-1,$=new this(a);++P<A;)N=y[P],C.resolve(N).then(function(G){z||(z=!0,l.resolve($,G))},function(G){z||(z=!0,l.reject($,G))});var N;return $}},{immediate:36}],38:[function(n,s,i){var r={};(0,n("./lib/utils/common").assign)(r,n("./lib/deflate"),n("./lib/inflate"),n("./lib/zlib/constants")),s.exports=r},{"./lib/deflate":39,"./lib/inflate":40,"./lib/utils/common":41,"./lib/zlib/constants":44}],39:[function(n,s,i){var r=n("./zlib/deflate"),a=n("./utils/common"),l=n("./utils/strings"),c=n("./zlib/messages"),h=n("./zlib/zstream"),b=Object.prototype.toString,g=0,v=-1,f=0,k=8;function p(y){if(!(this instanceof p))return new p(y);this.options=a.assign({level:v,method:k,chunkSize:16384,windowBits:15,memLevel:8,strategy:f,to:""},y||{});var C=this.options;C.raw&&0<C.windowBits?C.windowBits=-C.windowBits:C.gzip&&0<C.windowBits&&C.windowBits<16&&(C.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new h,this.strm.avail_out=0;var A=r.deflateInit2(this.strm,C.level,C.method,C.windowBits,C.memLevel,C.strategy);if(A!==g)throw new Error(c[A]);if(C.header&&r.deflateSetHeader(this.strm,C.header),C.dictionary){var z;if(z=typeof C.dictionary=="string"?l.string2buf(C.dictionary):b.call(C.dictionary)==="[object ArrayBuffer]"?new Uint8Array(C.dictionary):C.dictionary,(A=r.deflateSetDictionary(this.strm,z))!==g)throw new Error(c[A]);this._dict_set=!0}}function _(y,C){var A=new p(C);if(A.push(y,!0),A.err)throw A.msg||c[A.err];return A.result}p.prototype.push=function(y,C){var A,z,P=this.strm,$=this.options.chunkSize;if(this.ended)return!1;z=C===~~C?C:C===!0?4:0,typeof y=="string"?P.input=l.string2buf(y):b.call(y)==="[object ArrayBuffer]"?P.input=new Uint8Array(y):P.input=y,P.next_in=0,P.avail_in=P.input.length;do{if(P.avail_out===0&&(P.output=new a.Buf8($),P.next_out=0,P.avail_out=$),(A=r.deflate(P,z))!==1&&A!==g)return this.onEnd(A),!(this.ended=!0);P.avail_out!==0&&(P.avail_in!==0||z!==4&&z!==2)||(this.options.to==="string"?this.onData(l.buf2binstring(a.shrinkBuf(P.output,P.next_out))):this.onData(a.shrinkBuf(P.output,P.next_out)))}while((0<P.avail_in||P.avail_out===0)&&A!==1);return z===4?(A=r.deflateEnd(this.strm),this.onEnd(A),this.ended=!0,A===g):z!==2||(this.onEnd(g),!(P.avail_out=0))},p.prototype.onData=function(y){this.chunks.push(y)},p.prototype.onEnd=function(y){y===g&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=a.flattenChunks(this.chunks)),this.chunks=[],this.err=y,this.msg=this.strm.msg},i.Deflate=p,i.deflate=_,i.deflateRaw=function(y,C){return(C=C||{}).raw=!0,_(y,C)},i.gzip=function(y,C){return(C=C||{}).gzip=!0,_(y,C)}},{"./utils/common":41,"./utils/strings":42,"./zlib/deflate":46,"./zlib/messages":51,"./zlib/zstream":53}],40:[function(n,s,i){var r=n("./zlib/inflate"),a=n("./utils/common"),l=n("./utils/strings"),c=n("./zlib/constants"),h=n("./zlib/messages"),b=n("./zlib/zstream"),g=n("./zlib/gzheader"),v=Object.prototype.toString;function f(p){if(!(this instanceof f))return new f(p);this.options=a.assign({chunkSize:16384,windowBits:0,to:""},p||{});var _=this.options;_.raw&&0<=_.windowBits&&_.windowBits<16&&(_.windowBits=-_.windowBits,_.windowBits===0&&(_.windowBits=-15)),!(0<=_.windowBits&&_.windowBits<16)||p&&p.windowBits||(_.windowBits+=32),15<_.windowBits&&_.windowBits<48&&!(15&_.windowBits)&&(_.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new b,this.strm.avail_out=0;var y=r.inflateInit2(this.strm,_.windowBits);if(y!==c.Z_OK)throw new Error(h[y]);this.header=new g,r.inflateGetHeader(this.strm,this.header)}function k(p,_){var y=new f(_);if(y.push(p,!0),y.err)throw y.msg||h[y.err];return y.result}f.prototype.push=function(p,_){var y,C,A,z,P,$,N=this.strm,G=this.options.chunkSize,M=this.options.dictionary,q=!1;if(this.ended)return!1;C=_===~~_?_:_===!0?c.Z_FINISH:c.Z_NO_FLUSH,typeof p=="string"?N.input=l.binstring2buf(p):v.call(p)==="[object ArrayBuffer]"?N.input=new Uint8Array(p):N.input=p,N.next_in=0,N.avail_in=N.input.length;do{if(N.avail_out===0&&(N.output=new a.Buf8(G),N.next_out=0,N.avail_out=G),(y=r.inflate(N,c.Z_NO_FLUSH))===c.Z_NEED_DICT&&M&&($=typeof M=="string"?l.string2buf(M):v.call(M)==="[object ArrayBuffer]"?new Uint8Array(M):M,y=r.inflateSetDictionary(this.strm,$)),y===c.Z_BUF_ERROR&&q===!0&&(y=c.Z_OK,q=!1),y!==c.Z_STREAM_END&&y!==c.Z_OK)return this.onEnd(y),!(this.ended=!0);N.next_out&&(N.avail_out!==0&&y!==c.Z_STREAM_END&&(N.avail_in!==0||C!==c.Z_FINISH&&C!==c.Z_SYNC_FLUSH)||(this.options.to==="string"?(A=l.utf8border(N.output,N.next_out),z=N.next_out-A,P=l.buf2string(N.output,A),N.next_out=z,N.avail_out=G-z,z&&a.arraySet(N.output,N.output,A,z,0),this.onData(P)):this.onData(a.shrinkBuf(N.output,N.next_out)))),N.avail_in===0&&N.avail_out===0&&(q=!0)}while((0<N.avail_in||N.avail_out===0)&&y!==c.Z_STREAM_END);return y===c.Z_STREAM_END&&(C=c.Z_FINISH),C===c.Z_FINISH?(y=r.inflateEnd(this.strm),this.onEnd(y),this.ended=!0,y===c.Z_OK):C!==c.Z_SYNC_FLUSH||(this.onEnd(c.Z_OK),!(N.avail_out=0))},f.prototype.onData=function(p){this.chunks.push(p)},f.prototype.onEnd=function(p){p===c.Z_OK&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=a.flattenChunks(this.chunks)),this.chunks=[],this.err=p,this.msg=this.strm.msg},i.Inflate=f,i.inflate=k,i.inflateRaw=function(p,_){return(_=_||{}).raw=!0,k(p,_)},i.ungzip=k},{"./utils/common":41,"./utils/strings":42,"./zlib/constants":44,"./zlib/gzheader":47,"./zlib/inflate":49,"./zlib/messages":51,"./zlib/zstream":53}],41:[function(n,s,i){var r=typeof Uint8Array<"u"&&typeof Uint16Array<"u"&&typeof Int32Array<"u";i.assign=function(c){for(var h=Array.prototype.slice.call(arguments,1);h.length;){var b=h.shift();if(b){if(typeof b!="object")throw new TypeError(b+"must be non-object");for(var g in b)b.hasOwnProperty(g)&&(c[g]=b[g])}}return c},i.shrinkBuf=function(c,h){return c.length===h?c:c.subarray?c.subarray(0,h):(c.length=h,c)};var a={arraySet:function(c,h,b,g,v){if(h.subarray&&c.subarray)c.set(h.subarray(b,b+g),v);else for(var f=0;f<g;f++)c[v+f]=h[b+f]},flattenChunks:function(c){var h,b,g,v,f,k;for(h=g=0,b=c.length;h<b;h++)g+=c[h].length;for(k=new Uint8Array(g),h=v=0,b=c.length;h<b;h++)f=c[h],k.set(f,v),v+=f.length;return k}},l={arraySet:function(c,h,b,g,v){for(var f=0;f<g;f++)c[v+f]=h[b+f]},flattenChunks:function(c){return[].concat.apply([],c)}};i.setTyped=function(c){c?(i.Buf8=Uint8Array,i.Buf16=Uint16Array,i.Buf32=Int32Array,i.assign(i,a)):(i.Buf8=Array,i.Buf16=Array,i.Buf32=Array,i.assign(i,l))},i.setTyped(r)},{}],42:[function(n,s,i){var r=n("./common"),a=!0,l=!0;try{String.fromCharCode.apply(null,[0])}catch{a=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch{l=!1}for(var c=new r.Buf8(256),h=0;h<256;h++)c[h]=252<=h?6:248<=h?5:240<=h?4:224<=h?3:192<=h?2:1;function b(g,v){if(v<65537&&(g.subarray&&l||!g.subarray&&a))return String.fromCharCode.apply(null,r.shrinkBuf(g,v));for(var f="",k=0;k<v;k++)f+=String.fromCharCode(g[k]);return f}c[254]=c[254]=1,i.string2buf=function(g){var v,f,k,p,_,y=g.length,C=0;for(p=0;p<y;p++)(64512&(f=g.charCodeAt(p)))==55296&&p+1<y&&(64512&(k=g.charCodeAt(p+1)))==56320&&(f=65536+(f-55296<<10)+(k-56320),p++),C+=f<128?1:f<2048?2:f<65536?3:4;for(v=new r.Buf8(C),p=_=0;_<C;p++)(64512&(f=g.charCodeAt(p)))==55296&&p+1<y&&(64512&(k=g.charCodeAt(p+1)))==56320&&(f=65536+(f-55296<<10)+(k-56320),p++),f<128?v[_++]=f:(f<2048?v[_++]=192|f>>>6:(f<65536?v[_++]=224|f>>>12:(v[_++]=240|f>>>18,v[_++]=128|f>>>12&63),v[_++]=128|f>>>6&63),v[_++]=128|63&f);return v},i.buf2binstring=function(g){return b(g,g.length)},i.binstring2buf=function(g){for(var v=new r.Buf8(g.length),f=0,k=v.length;f<k;f++)v[f]=g.charCodeAt(f);return v},i.buf2string=function(g,v){var f,k,p,_,y=v||g.length,C=new Array(2*y);for(f=k=0;f<y;)if((p=g[f++])<128)C[k++]=p;else if(4<(_=c[p]))C[k++]=65533,f+=_-1;else{for(p&=_===2?31:_===3?15:7;1<_&&f<y;)p=p<<6|63&g[f++],_--;1<_?C[k++]=65533:p<65536?C[k++]=p:(p-=65536,C[k++]=55296|p>>10&1023,C[k++]=56320|1023&p)}return b(C,k)},i.utf8border=function(g,v){var f;for((v=v||g.length)>g.length&&(v=g.length),f=v-1;0<=f&&(192&g[f])==128;)f--;return f<0||f===0?v:f+c[g[f]]>v?f:v}},{"./common":41}],43:[function(n,s,i){s.exports=function(r,a,l,c){for(var h=65535&r|0,b=r>>>16&65535|0,g=0;l!==0;){for(l-=g=2e3<l?2e3:l;b=b+(h=h+a[c++]|0)|0,--g;);h%=65521,b%=65521}return h|b<<16|0}},{}],44:[function(n,s,i){s.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(n,s,i){var r=function(){for(var a,l=[],c=0;c<256;c++){a=c;for(var h=0;h<8;h++)a=1&a?3988292384^a>>>1:a>>>1;l[c]=a}return l}();s.exports=function(a,l,c,h){var b=r,g=h+c;a^=-1;for(var v=h;v<g;v++)a=a>>>8^b[255&(a^l[v])];return-1^a}},{}],46:[function(n,s,i){var r,a=n("../utils/common"),l=n("./trees"),c=n("./adler32"),h=n("./crc32"),b=n("./messages"),g=0,v=4,f=0,k=-2,p=-1,_=4,y=2,C=8,A=9,z=286,P=30,$=19,N=2*z+1,G=15,M=3,q=258,nt=q+M+1,O=42,H=113,d=1,W=2,Q=3,V=4;function et(o,S){return o.msg=b[S],S}function Z(o){return(o<<1)-(4<o?9:0)}function at(o){for(var S=o.length;0<=--S;)o[S]=0}function F(o){var S=o.state,I=S.pending;I>o.avail_out&&(I=o.avail_out),I!==0&&(a.arraySet(o.output,S.pending_buf,S.pending_out,I,o.next_out),o.next_out+=I,S.pending_out+=I,o.total_out+=I,o.avail_out-=I,S.pending-=I,S.pending===0&&(S.pending_out=0))}function B(o,S){l._tr_flush_block(o,0<=o.block_start?o.block_start:-1,o.strstart-o.block_start,S),o.block_start=o.strstart,F(o.strm)}function it(o,S){o.pending_buf[o.pending++]=S}function tt(o,S){o.pending_buf[o.pending++]=S>>>8&255,o.pending_buf[o.pending++]=255&S}function X(o,S){var I,w,m=o.max_chain_length,T=o.strstart,L=o.prev_length,D=o.nice_match,E=o.strstart>o.w_size-nt?o.strstart-(o.w_size-nt):0,R=o.window,K=o.w_mask,j=o.prev,J=o.strstart+q,st=R[T+L-1],rt=R[T+L];o.prev_length>=o.good_match&&(m>>=2),D>o.lookahead&&(D=o.lookahead);do if(R[(I=S)+L]===rt&&R[I+L-1]===st&&R[I]===R[T]&&R[++I]===R[T+1]){T+=2,I++;do;while(R[++T]===R[++I]&&R[++T]===R[++I]&&R[++T]===R[++I]&&R[++T]===R[++I]&&R[++T]===R[++I]&&R[++T]===R[++I]&&R[++T]===R[++I]&&R[++T]===R[++I]&&T<J);if(w=q-(J-T),T=J-q,L<w){if(o.match_start=S,D<=(L=w))break;st=R[T+L-1],rt=R[T+L]}}while((S=j[S&K])>E&&--m!=0);return L<=o.lookahead?L:o.lookahead}function mt(o){var S,I,w,m,T,L,D,E,R,K,j=o.w_size;do{if(m=o.window_size-o.lookahead-o.strstart,o.strstart>=j+(j-nt)){for(a.arraySet(o.window,o.window,j,j,0),o.match_start-=j,o.strstart-=j,o.block_start-=j,S=I=o.hash_size;w=o.head[--S],o.head[S]=j<=w?w-j:0,--I;);for(S=I=j;w=o.prev[--S],o.prev[S]=j<=w?w-j:0,--I;);m+=j}if(o.strm.avail_in===0)break;if(L=o.strm,D=o.window,E=o.strstart+o.lookahead,R=m,K=void 0,K=L.avail_in,R<K&&(K=R),I=K===0?0:(L.avail_in-=K,a.arraySet(D,L.input,L.next_in,K,E),L.state.wrap===1?L.adler=c(L.adler,D,K,E):L.state.wrap===2&&(L.adler=h(L.adler,D,K,E)),L.next_in+=K,L.total_in+=K,K),o.lookahead+=I,o.lookahead+o.insert>=M)for(T=o.strstart-o.insert,o.ins_h=o.window[T],o.ins_h=(o.ins_h<<o.hash_shift^o.window[T+1])&o.hash_mask;o.insert&&(o.ins_h=(o.ins_h<<o.hash_shift^o.window[T+M-1])&o.hash_mask,o.prev[T&o.w_mask]=o.head[o.ins_h],o.head[o.ins_h]=T,T++,o.insert--,!(o.lookahead+o.insert<M)););}while(o.lookahead<nt&&o.strm.avail_in!==0)}function yt(o,S){for(var I,w;;){if(o.lookahead<nt){if(mt(o),o.lookahead<nt&&S===g)return d;if(o.lookahead===0)break}if(I=0,o.lookahead>=M&&(o.ins_h=(o.ins_h<<o.hash_shift^o.window[o.strstart+M-1])&o.hash_mask,I=o.prev[o.strstart&o.w_mask]=o.head[o.ins_h],o.head[o.ins_h]=o.strstart),I!==0&&o.strstart-I<=o.w_size-nt&&(o.match_length=X(o,I)),o.match_length>=M)if(w=l._tr_tally(o,o.strstart-o.match_start,o.match_length-M),o.lookahead-=o.match_length,o.match_length<=o.max_lazy_match&&o.lookahead>=M){for(o.match_length--;o.strstart++,o.ins_h=(o.ins_h<<o.hash_shift^o.window[o.strstart+M-1])&o.hash_mask,I=o.prev[o.strstart&o.w_mask]=o.head[o.ins_h],o.head[o.ins_h]=o.strstart,--o.match_length!=0;);o.strstart++}else o.strstart+=o.match_length,o.match_length=0,o.ins_h=o.window[o.strstart],o.ins_h=(o.ins_h<<o.hash_shift^o.window[o.strstart+1])&o.hash_mask;else w=l._tr_tally(o,0,o.window[o.strstart]),o.lookahead--,o.strstart++;if(w&&(B(o,!1),o.strm.avail_out===0))return d}return o.insert=o.strstart<M-1?o.strstart:M-1,S===v?(B(o,!0),o.strm.avail_out===0?Q:V):o.last_lit&&(B(o,!1),o.strm.avail_out===0)?d:W}function ct(o,S){for(var I,w,m;;){if(o.lookahead<nt){if(mt(o),o.lookahead<nt&&S===g)return d;if(o.lookahead===0)break}if(I=0,o.lookahead>=M&&(o.ins_h=(o.ins_h<<o.hash_shift^o.window[o.strstart+M-1])&o.hash_mask,I=o.prev[o.strstart&o.w_mask]=o.head[o.ins_h],o.head[o.ins_h]=o.strstart),o.prev_length=o.match_length,o.prev_match=o.match_start,o.match_length=M-1,I!==0&&o.prev_length<o.max_lazy_match&&o.strstart-I<=o.w_size-nt&&(o.match_length=X(o,I),o.match_length<=5&&(o.strategy===1||o.match_length===M&&4096<o.strstart-o.match_start)&&(o.match_length=M-1)),o.prev_length>=M&&o.match_length<=o.prev_length){for(m=o.strstart+o.lookahead-M,w=l._tr_tally(o,o.strstart-1-o.prev_match,o.prev_length-M),o.lookahead-=o.prev_length-1,o.prev_length-=2;++o.strstart<=m&&(o.ins_h=(o.ins_h<<o.hash_shift^o.window[o.strstart+M-1])&o.hash_mask,I=o.prev[o.strstart&o.w_mask]=o.head[o.ins_h],o.head[o.ins_h]=o.strstart),--o.prev_length!=0;);if(o.match_available=0,o.match_length=M-1,o.strstart++,w&&(B(o,!1),o.strm.avail_out===0))return d}else if(o.match_available){if((w=l._tr_tally(o,0,o.window[o.strstart-1]))&&B(o,!1),o.strstart++,o.lookahead--,o.strm.avail_out===0)return d}else o.match_available=1,o.strstart++,o.lookahead--}return o.match_available&&(w=l._tr_tally(o,0,o.window[o.strstart-1]),o.match_available=0),o.insert=o.strstart<M-1?o.strstart:M-1,S===v?(B(o,!0),o.strm.avail_out===0?Q:V):o.last_lit&&(B(o,!1),o.strm.avail_out===0)?d:W}function ft(o,S,I,w,m){this.good_length=o,this.max_lazy=S,this.nice_length=I,this.max_chain=w,this.func=m}function _t(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=C,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new a.Buf16(2*N),this.dyn_dtree=new a.Buf16(2*(2*P+1)),this.bl_tree=new a.Buf16(2*(2*$+1)),at(this.dyn_ltree),at(this.dyn_dtree),at(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new a.Buf16(G+1),this.heap=new a.Buf16(2*z+1),at(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new a.Buf16(2*z+1),at(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function Y(o){var S;return o&&o.state?(o.total_in=o.total_out=0,o.data_type=y,(S=o.state).pending=0,S.pending_out=0,S.wrap<0&&(S.wrap=-S.wrap),S.status=S.wrap?O:H,o.adler=S.wrap===2?0:1,S.last_flush=g,l._tr_init(S),f):et(o,k)}function U(o){var S=Y(o);return S===f&&function(I){I.window_size=2*I.w_size,at(I.head),I.max_lazy_match=r[I.level].max_lazy,I.good_match=r[I.level].good_length,I.nice_match=r[I.level].nice_length,I.max_chain_length=r[I.level].max_chain,I.strstart=0,I.block_start=0,I.lookahead=0,I.insert=0,I.match_length=I.prev_length=M-1,I.match_available=0,I.ins_h=0}(o.state),S}function u(o,S,I,w,m,T){if(!o)return k;var L=1;if(S===p&&(S=6),w<0?(L=0,w=-w):15<w&&(L=2,w-=16),m<1||A<m||I!==C||w<8||15<w||S<0||9<S||T<0||_<T)return et(o,k);w===8&&(w=9);var D=new _t;return(o.state=D).strm=o,D.wrap=L,D.gzhead=null,D.w_bits=w,D.w_size=1<<D.w_bits,D.w_mask=D.w_size-1,D.hash_bits=m+7,D.hash_size=1<<D.hash_bits,D.hash_mask=D.hash_size-1,D.hash_shift=~~((D.hash_bits+M-1)/M),D.window=new a.Buf8(2*D.w_size),D.head=new a.Buf16(D.hash_size),D.prev=new a.Buf16(D.w_size),D.lit_bufsize=1<<m+6,D.pending_buf_size=4*D.lit_bufsize,D.pending_buf=new a.Buf8(D.pending_buf_size),D.d_buf=1*D.lit_bufsize,D.l_buf=3*D.lit_bufsize,D.level=S,D.strategy=T,D.method=I,U(o)}r=[new ft(0,0,0,0,function(o,S){var I=65535;for(I>o.pending_buf_size-5&&(I=o.pending_buf_size-5);;){if(o.lookahead<=1){if(mt(o),o.lookahead===0&&S===g)return d;if(o.lookahead===0)break}o.strstart+=o.lookahead,o.lookahead=0;var w=o.block_start+I;if((o.strstart===0||o.strstart>=w)&&(o.lookahead=o.strstart-w,o.strstart=w,B(o,!1),o.strm.avail_out===0)||o.strstart-o.block_start>=o.w_size-nt&&(B(o,!1),o.strm.avail_out===0))return d}return o.insert=0,S===v?(B(o,!0),o.strm.avail_out===0?Q:V):(o.strstart>o.block_start&&(B(o,!1),o.strm.avail_out),d)}),new ft(4,4,8,4,yt),new ft(4,5,16,8,yt),new ft(4,6,32,32,yt),new ft(4,4,16,16,ct),new ft(8,16,32,32,ct),new ft(8,16,128,128,ct),new ft(8,32,128,256,ct),new ft(32,128,258,1024,ct),new ft(32,258,258,4096,ct)],i.deflateInit=function(o,S){return u(o,S,C,15,8,0)},i.deflateInit2=u,i.deflateReset=U,i.deflateResetKeep=Y,i.deflateSetHeader=function(o,S){return o&&o.state?o.state.wrap!==2?k:(o.state.gzhead=S,f):k},i.deflate=function(o,S){var I,w,m,T;if(!o||!o.state||5<S||S<0)return o?et(o,k):k;if(w=o.state,!o.output||!o.input&&o.avail_in!==0||w.status===666&&S!==v)return et(o,o.avail_out===0?-5:k);if(w.strm=o,I=w.last_flush,w.last_flush=S,w.status===O)if(w.wrap===2)o.adler=0,it(w,31),it(w,139),it(w,8),w.gzhead?(it(w,(w.gzhead.text?1:0)+(w.gzhead.hcrc?2:0)+(w.gzhead.extra?4:0)+(w.gzhead.name?8:0)+(w.gzhead.comment?16:0)),it(w,255&w.gzhead.time),it(w,w.gzhead.time>>8&255),it(w,w.gzhead.time>>16&255),it(w,w.gzhead.time>>24&255),it(w,w.level===9?2:2<=w.strategy||w.level<2?4:0),it(w,255&w.gzhead.os),w.gzhead.extra&&w.gzhead.extra.length&&(it(w,255&w.gzhead.extra.length),it(w,w.gzhead.extra.length>>8&255)),w.gzhead.hcrc&&(o.adler=h(o.adler,w.pending_buf,w.pending,0)),w.gzindex=0,w.status=69):(it(w,0),it(w,0),it(w,0),it(w,0),it(w,0),it(w,w.level===9?2:2<=w.strategy||w.level<2?4:0),it(w,3),w.status=H);else{var L=C+(w.w_bits-8<<4)<<8;L|=(2<=w.strategy||w.level<2?0:w.level<6?1:w.level===6?2:3)<<6,w.strstart!==0&&(L|=32),L+=31-L%31,w.status=H,tt(w,L),w.strstart!==0&&(tt(w,o.adler>>>16),tt(w,65535&o.adler)),o.adler=1}if(w.status===69)if(w.gzhead.extra){for(m=w.pending;w.gzindex<(65535&w.gzhead.extra.length)&&(w.pending!==w.pending_buf_size||(w.gzhead.hcrc&&w.pending>m&&(o.adler=h(o.adler,w.pending_buf,w.pending-m,m)),F(o),m=w.pending,w.pending!==w.pending_buf_size));)it(w,255&w.gzhead.extra[w.gzindex]),w.gzindex++;w.gzhead.hcrc&&w.pending>m&&(o.adler=h(o.adler,w.pending_buf,w.pending-m,m)),w.gzindex===w.gzhead.extra.length&&(w.gzindex=0,w.status=73)}else w.status=73;if(w.status===73)if(w.gzhead.name){m=w.pending;do{if(w.pending===w.pending_buf_size&&(w.gzhead.hcrc&&w.pending>m&&(o.adler=h(o.adler,w.pending_buf,w.pending-m,m)),F(o),m=w.pending,w.pending===w.pending_buf_size)){T=1;break}T=w.gzindex<w.gzhead.name.length?255&w.gzhead.name.charCodeAt(w.gzindex++):0,it(w,T)}while(T!==0);w.gzhead.hcrc&&w.pending>m&&(o.adler=h(o.adler,w.pending_buf,w.pending-m,m)),T===0&&(w.gzindex=0,w.status=91)}else w.status=91;if(w.status===91)if(w.gzhead.comment){m=w.pending;do{if(w.pending===w.pending_buf_size&&(w.gzhead.hcrc&&w.pending>m&&(o.adler=h(o.adler,w.pending_buf,w.pending-m,m)),F(o),m=w.pending,w.pending===w.pending_buf_size)){T=1;break}T=w.gzindex<w.gzhead.comment.length?255&w.gzhead.comment.charCodeAt(w.gzindex++):0,it(w,T)}while(T!==0);w.gzhead.hcrc&&w.pending>m&&(o.adler=h(o.adler,w.pending_buf,w.pending-m,m)),T===0&&(w.status=103)}else w.status=103;if(w.status===103&&(w.gzhead.hcrc?(w.pending+2>w.pending_buf_size&&F(o),w.pending+2<=w.pending_buf_size&&(it(w,255&o.adler),it(w,o.adler>>8&255),o.adler=0,w.status=H)):w.status=H),w.pending!==0){if(F(o),o.avail_out===0)return w.last_flush=-1,f}else if(o.avail_in===0&&Z(S)<=Z(I)&&S!==v)return et(o,-5);if(w.status===666&&o.avail_in!==0)return et(o,-5);if(o.avail_in!==0||w.lookahead!==0||S!==g&&w.status!==666){var D=w.strategy===2?function(E,R){for(var K;;){if(E.lookahead===0&&(mt(E),E.lookahead===0)){if(R===g)return d;break}if(E.match_length=0,K=l._tr_tally(E,0,E.window[E.strstart]),E.lookahead--,E.strstart++,K&&(B(E,!1),E.strm.avail_out===0))return d}return E.insert=0,R===v?(B(E,!0),E.strm.avail_out===0?Q:V):E.last_lit&&(B(E,!1),E.strm.avail_out===0)?d:W}(w,S):w.strategy===3?function(E,R){for(var K,j,J,st,rt=E.window;;){if(E.lookahead<=q){if(mt(E),E.lookahead<=q&&R===g)return d;if(E.lookahead===0)break}if(E.match_length=0,E.lookahead>=M&&0<E.strstart&&(j=rt[J=E.strstart-1])===rt[++J]&&j===rt[++J]&&j===rt[++J]){st=E.strstart+q;do;while(j===rt[++J]&&j===rt[++J]&&j===rt[++J]&&j===rt[++J]&&j===rt[++J]&&j===rt[++J]&&j===rt[++J]&&j===rt[++J]&&J<st);E.match_length=q-(st-J),E.match_length>E.lookahead&&(E.match_length=E.lookahead)}if(E.match_length>=M?(K=l._tr_tally(E,1,E.match_length-M),E.lookahead-=E.match_length,E.strstart+=E.match_length,E.match_length=0):(K=l._tr_tally(E,0,E.window[E.strstart]),E.lookahead--,E.strstart++),K&&(B(E,!1),E.strm.avail_out===0))return d}return E.insert=0,R===v?(B(E,!0),E.strm.avail_out===0?Q:V):E.last_lit&&(B(E,!1),E.strm.avail_out===0)?d:W}(w,S):r[w.level].func(w,S);if(D!==Q&&D!==V||(w.status=666),D===d||D===Q)return o.avail_out===0&&(w.last_flush=-1),f;if(D===W&&(S===1?l._tr_align(w):S!==5&&(l._tr_stored_block(w,0,0,!1),S===3&&(at(w.head),w.lookahead===0&&(w.strstart=0,w.block_start=0,w.insert=0))),F(o),o.avail_out===0))return w.last_flush=-1,f}return S!==v?f:w.wrap<=0?1:(w.wrap===2?(it(w,255&o.adler),it(w,o.adler>>8&255),it(w,o.adler>>16&255),it(w,o.adler>>24&255),it(w,255&o.total_in),it(w,o.total_in>>8&255),it(w,o.total_in>>16&255),it(w,o.total_in>>24&255)):(tt(w,o.adler>>>16),tt(w,65535&o.adler)),F(o),0<w.wrap&&(w.wrap=-w.wrap),w.pending!==0?f:1)},i.deflateEnd=function(o){var S;return o&&o.state?(S=o.state.status)!==O&&S!==69&&S!==73&&S!==91&&S!==103&&S!==H&&S!==666?et(o,k):(o.state=null,S===H?et(o,-3):f):k},i.deflateSetDictionary=function(o,S){var I,w,m,T,L,D,E,R,K=S.length;if(!o||!o.state||(T=(I=o.state).wrap)===2||T===1&&I.status!==O||I.lookahead)return k;for(T===1&&(o.adler=c(o.adler,S,K,0)),I.wrap=0,K>=I.w_size&&(T===0&&(at(I.head),I.strstart=0,I.block_start=0,I.insert=0),R=new a.Buf8(I.w_size),a.arraySet(R,S,K-I.w_size,I.w_size,0),S=R,K=I.w_size),L=o.avail_in,D=o.next_in,E=o.input,o.avail_in=K,o.next_in=0,o.input=S,mt(I);I.lookahead>=M;){for(w=I.strstart,m=I.lookahead-(M-1);I.ins_h=(I.ins_h<<I.hash_shift^I.window[w+M-1])&I.hash_mask,I.prev[w&I.w_mask]=I.head[I.ins_h],I.head[I.ins_h]=w,w++,--m;);I.strstart=w,I.lookahead=M-1,mt(I)}return I.strstart+=I.lookahead,I.block_start=I.strstart,I.insert=I.lookahead,I.lookahead=0,I.match_length=I.prev_length=M-1,I.match_available=0,o.next_in=D,o.input=E,o.avail_in=L,I.wrap=T,f},i.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./messages":51,"./trees":52}],47:[function(n,s,i){s.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},{}],48:[function(n,s,i){s.exports=function(r,a){var l,c,h,b,g,v,f,k,p,_,y,C,A,z,P,$,N,G,M,q,nt,O,H,d,W;l=r.state,c=r.next_in,d=r.input,h=c+(r.avail_in-5),b=r.next_out,W=r.output,g=b-(a-r.avail_out),v=b+(r.avail_out-257),f=l.dmax,k=l.wsize,p=l.whave,_=l.wnext,y=l.window,C=l.hold,A=l.bits,z=l.lencode,P=l.distcode,$=(1<<l.lenbits)-1,N=(1<<l.distbits)-1;t:do{A<15&&(C+=d[c++]<<A,A+=8,C+=d[c++]<<A,A+=8),G=z[C&$];e:for(;;){if(C>>>=M=G>>>24,A-=M,(M=G>>>16&255)===0)W[b++]=65535&G;else{if(!(16&M)){if(!(64&M)){G=z[(65535&G)+(C&(1<<M)-1)];continue e}if(32&M){l.mode=12;break t}r.msg="invalid literal/length code",l.mode=30;break t}q=65535&G,(M&=15)&&(A<M&&(C+=d[c++]<<A,A+=8),q+=C&(1<<M)-1,C>>>=M,A-=M),A<15&&(C+=d[c++]<<A,A+=8,C+=d[c++]<<A,A+=8),G=P[C&N];n:for(;;){if(C>>>=M=G>>>24,A-=M,!(16&(M=G>>>16&255))){if(!(64&M)){G=P[(65535&G)+(C&(1<<M)-1)];continue n}r.msg="invalid distance code",l.mode=30;break t}if(nt=65535&G,A<(M&=15)&&(C+=d[c++]<<A,(A+=8)<M&&(C+=d[c++]<<A,A+=8)),f<(nt+=C&(1<<M)-1)){r.msg="invalid distance too far back",l.mode=30;break t}if(C>>>=M,A-=M,(M=b-g)<nt){if(p<(M=nt-M)&&l.sane){r.msg="invalid distance too far back",l.mode=30;break t}if(H=y,(O=0)===_){if(O+=k-M,M<q){for(q-=M;W[b++]=y[O++],--M;);O=b-nt,H=W}}else if(_<M){if(O+=k+_-M,(M-=_)<q){for(q-=M;W[b++]=y[O++],--M;);if(O=0,_<q){for(q-=M=_;W[b++]=y[O++],--M;);O=b-nt,H=W}}}else if(O+=_-M,M<q){for(q-=M;W[b++]=y[O++],--M;);O=b-nt,H=W}for(;2<q;)W[b++]=H[O++],W[b++]=H[O++],W[b++]=H[O++],q-=3;q&&(W[b++]=H[O++],1<q&&(W[b++]=H[O++]))}else{for(O=b-nt;W[b++]=W[O++],W[b++]=W[O++],W[b++]=W[O++],2<(q-=3););q&&(W[b++]=W[O++],1<q&&(W[b++]=W[O++]))}break}}break}}while(c<h&&b<v);c-=q=A>>3,C&=(1<<(A-=q<<3))-1,r.next_in=c,r.next_out=b,r.avail_in=c<h?h-c+5:5-(c-h),r.avail_out=b<v?v-b+257:257-(b-v),l.hold=C,l.bits=A}},{}],49:[function(n,s,i){var r=n("../utils/common"),a=n("./adler32"),l=n("./crc32"),c=n("./inffast"),h=n("./inftrees"),b=1,g=2,v=0,f=-2,k=1,p=852,_=592;function y(O){return(O>>>24&255)+(O>>>8&65280)+((65280&O)<<8)+((255&O)<<24)}function C(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new r.Buf16(320),this.work=new r.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function A(O){var H;return O&&O.state?(H=O.state,O.total_in=O.total_out=H.total=0,O.msg="",H.wrap&&(O.adler=1&H.wrap),H.mode=k,H.last=0,H.havedict=0,H.dmax=32768,H.head=null,H.hold=0,H.bits=0,H.lencode=H.lendyn=new r.Buf32(p),H.distcode=H.distdyn=new r.Buf32(_),H.sane=1,H.back=-1,v):f}function z(O){var H;return O&&O.state?((H=O.state).wsize=0,H.whave=0,H.wnext=0,A(O)):f}function P(O,H){var d,W;return O&&O.state?(W=O.state,H<0?(d=0,H=-H):(d=1+(H>>4),H<48&&(H&=15)),H&&(H<8||15<H)?f:(W.window!==null&&W.wbits!==H&&(W.window=null),W.wrap=d,W.wbits=H,z(O))):f}function $(O,H){var d,W;return O?(W=new C,(O.state=W).window=null,(d=P(O,H))!==v&&(O.state=null),d):f}var N,G,M=!0;function q(O){if(M){var H;for(N=new r.Buf32(512),G=new r.Buf32(32),H=0;H<144;)O.lens[H++]=8;for(;H<256;)O.lens[H++]=9;for(;H<280;)O.lens[H++]=7;for(;H<288;)O.lens[H++]=8;for(h(b,O.lens,0,288,N,0,O.work,{bits:9}),H=0;H<32;)O.lens[H++]=5;h(g,O.lens,0,32,G,0,O.work,{bits:5}),M=!1}O.lencode=N,O.lenbits=9,O.distcode=G,O.distbits=5}function nt(O,H,d,W){var Q,V=O.state;return V.window===null&&(V.wsize=1<<V.wbits,V.wnext=0,V.whave=0,V.window=new r.Buf8(V.wsize)),W>=V.wsize?(r.arraySet(V.window,H,d-V.wsize,V.wsize,0),V.wnext=0,V.whave=V.wsize):(W<(Q=V.wsize-V.wnext)&&(Q=W),r.arraySet(V.window,H,d-W,Q,V.wnext),(W-=Q)?(r.arraySet(V.window,H,d-W,W,0),V.wnext=W,V.whave=V.wsize):(V.wnext+=Q,V.wnext===V.wsize&&(V.wnext=0),V.whave<V.wsize&&(V.whave+=Q))),0}i.inflateReset=z,i.inflateReset2=P,i.inflateResetKeep=A,i.inflateInit=function(O){return $(O,15)},i.inflateInit2=$,i.inflate=function(O,H){var d,W,Q,V,et,Z,at,F,B,it,tt,X,mt,yt,ct,ft,_t,Y,U,u,o,S,I,w,m=0,T=new r.Buf8(4),L=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!O||!O.state||!O.output||!O.input&&O.avail_in!==0)return f;(d=O.state).mode===12&&(d.mode=13),et=O.next_out,Q=O.output,at=O.avail_out,V=O.next_in,W=O.input,Z=O.avail_in,F=d.hold,B=d.bits,it=Z,tt=at,S=v;t:for(;;)switch(d.mode){case k:if(d.wrap===0){d.mode=13;break}for(;B<16;){if(Z===0)break t;Z--,F+=W[V++]<<B,B+=8}if(2&d.wrap&&F===35615){T[d.check=0]=255&F,T[1]=F>>>8&255,d.check=l(d.check,T,2,0),B=F=0,d.mode=2;break}if(d.flags=0,d.head&&(d.head.done=!1),!(1&d.wrap)||(((255&F)<<8)+(F>>8))%31){O.msg="incorrect header check",d.mode=30;break}if((15&F)!=8){O.msg="unknown compression method",d.mode=30;break}if(B-=4,o=8+(15&(F>>>=4)),d.wbits===0)d.wbits=o;else if(o>d.wbits){O.msg="invalid window size",d.mode=30;break}d.dmax=1<<o,O.adler=d.check=1,d.mode=512&F?10:12,B=F=0;break;case 2:for(;B<16;){if(Z===0)break t;Z--,F+=W[V++]<<B,B+=8}if(d.flags=F,(255&d.flags)!=8){O.msg="unknown compression method",d.mode=30;break}if(57344&d.flags){O.msg="unknown header flags set",d.mode=30;break}d.head&&(d.head.text=F>>8&1),512&d.flags&&(T[0]=255&F,T[1]=F>>>8&255,d.check=l(d.check,T,2,0)),B=F=0,d.mode=3;case 3:for(;B<32;){if(Z===0)break t;Z--,F+=W[V++]<<B,B+=8}d.head&&(d.head.time=F),512&d.flags&&(T[0]=255&F,T[1]=F>>>8&255,T[2]=F>>>16&255,T[3]=F>>>24&255,d.check=l(d.check,T,4,0)),B=F=0,d.mode=4;case 4:for(;B<16;){if(Z===0)break t;Z--,F+=W[V++]<<B,B+=8}d.head&&(d.head.xflags=255&F,d.head.os=F>>8),512&d.flags&&(T[0]=255&F,T[1]=F>>>8&255,d.check=l(d.check,T,2,0)),B=F=0,d.mode=5;case 5:if(1024&d.flags){for(;B<16;){if(Z===0)break t;Z--,F+=W[V++]<<B,B+=8}d.length=F,d.head&&(d.head.extra_len=F),512&d.flags&&(T[0]=255&F,T[1]=F>>>8&255,d.check=l(d.check,T,2,0)),B=F=0}else d.head&&(d.head.extra=null);d.mode=6;case 6:if(1024&d.flags&&(Z<(X=d.length)&&(X=Z),X&&(d.head&&(o=d.head.extra_len-d.length,d.head.extra||(d.head.extra=new Array(d.head.extra_len)),r.arraySet(d.head.extra,W,V,X,o)),512&d.flags&&(d.check=l(d.check,W,X,V)),Z-=X,V+=X,d.length-=X),d.length))break t;d.length=0,d.mode=7;case 7:if(2048&d.flags){if(Z===0)break t;for(X=0;o=W[V+X++],d.head&&o&&d.length<65536&&(d.head.name+=String.fromCharCode(o)),o&&X<Z;);if(512&d.flags&&(d.check=l(d.check,W,X,V)),Z-=X,V+=X,o)break t}else d.head&&(d.head.name=null);d.length=0,d.mode=8;case 8:if(4096&d.flags){if(Z===0)break t;for(X=0;o=W[V+X++],d.head&&o&&d.length<65536&&(d.head.comment+=String.fromCharCode(o)),o&&X<Z;);if(512&d.flags&&(d.check=l(d.check,W,X,V)),Z-=X,V+=X,o)break t}else d.head&&(d.head.comment=null);d.mode=9;case 9:if(512&d.flags){for(;B<16;){if(Z===0)break t;Z--,F+=W[V++]<<B,B+=8}if(F!==(65535&d.check)){O.msg="header crc mismatch",d.mode=30;break}B=F=0}d.head&&(d.head.hcrc=d.flags>>9&1,d.head.done=!0),O.adler=d.check=0,d.mode=12;break;case 10:for(;B<32;){if(Z===0)break t;Z--,F+=W[V++]<<B,B+=8}O.adler=d.check=y(F),B=F=0,d.mode=11;case 11:if(d.havedict===0)return O.next_out=et,O.avail_out=at,O.next_in=V,O.avail_in=Z,d.hold=F,d.bits=B,2;O.adler=d.check=1,d.mode=12;case 12:if(H===5||H===6)break t;case 13:if(d.last){F>>>=7&B,B-=7&B,d.mode=27;break}for(;B<3;){if(Z===0)break t;Z--,F+=W[V++]<<B,B+=8}switch(d.last=1&F,B-=1,3&(F>>>=1)){case 0:d.mode=14;break;case 1:if(q(d),d.mode=20,H!==6)break;F>>>=2,B-=2;break t;case 2:d.mode=17;break;case 3:O.msg="invalid block type",d.mode=30}F>>>=2,B-=2;break;case 14:for(F>>>=7&B,B-=7&B;B<32;){if(Z===0)break t;Z--,F+=W[V++]<<B,B+=8}if((65535&F)!=(F>>>16^65535)){O.msg="invalid stored block lengths",d.mode=30;break}if(d.length=65535&F,B=F=0,d.mode=15,H===6)break t;case 15:d.mode=16;case 16:if(X=d.length){if(Z<X&&(X=Z),at<X&&(X=at),X===0)break t;r.arraySet(Q,W,V,X,et),Z-=X,V+=X,at-=X,et+=X,d.length-=X;break}d.mode=12;break;case 17:for(;B<14;){if(Z===0)break t;Z--,F+=W[V++]<<B,B+=8}if(d.nlen=257+(31&F),F>>>=5,B-=5,d.ndist=1+(31&F),F>>>=5,B-=5,d.ncode=4+(15&F),F>>>=4,B-=4,286<d.nlen||30<d.ndist){O.msg="too many length or distance symbols",d.mode=30;break}d.have=0,d.mode=18;case 18:for(;d.have<d.ncode;){for(;B<3;){if(Z===0)break t;Z--,F+=W[V++]<<B,B+=8}d.lens[L[d.have++]]=7&F,F>>>=3,B-=3}for(;d.have<19;)d.lens[L[d.have++]]=0;if(d.lencode=d.lendyn,d.lenbits=7,I={bits:d.lenbits},S=h(0,d.lens,0,19,d.lencode,0,d.work,I),d.lenbits=I.bits,S){O.msg="invalid code lengths set",d.mode=30;break}d.have=0,d.mode=19;case 19:for(;d.have<d.nlen+d.ndist;){for(;ft=(m=d.lencode[F&(1<<d.lenbits)-1])>>>16&255,_t=65535&m,!((ct=m>>>24)<=B);){if(Z===0)break t;Z--,F+=W[V++]<<B,B+=8}if(_t<16)F>>>=ct,B-=ct,d.lens[d.have++]=_t;else{if(_t===16){for(w=ct+2;B<w;){if(Z===0)break t;Z--,F+=W[V++]<<B,B+=8}if(F>>>=ct,B-=ct,d.have===0){O.msg="invalid bit length repeat",d.mode=30;break}o=d.lens[d.have-1],X=3+(3&F),F>>>=2,B-=2}else if(_t===17){for(w=ct+3;B<w;){if(Z===0)break t;Z--,F+=W[V++]<<B,B+=8}B-=ct,o=0,X=3+(7&(F>>>=ct)),F>>>=3,B-=3}else{for(w=ct+7;B<w;){if(Z===0)break t;Z--,F+=W[V++]<<B,B+=8}B-=ct,o=0,X=11+(127&(F>>>=ct)),F>>>=7,B-=7}if(d.have+X>d.nlen+d.ndist){O.msg="invalid bit length repeat",d.mode=30;break}for(;X--;)d.lens[d.have++]=o}}if(d.mode===30)break;if(d.lens[256]===0){O.msg="invalid code -- missing end-of-block",d.mode=30;break}if(d.lenbits=9,I={bits:d.lenbits},S=h(b,d.lens,0,d.nlen,d.lencode,0,d.work,I),d.lenbits=I.bits,S){O.msg="invalid literal/lengths set",d.mode=30;break}if(d.distbits=6,d.distcode=d.distdyn,I={bits:d.distbits},S=h(g,d.lens,d.nlen,d.ndist,d.distcode,0,d.work,I),d.distbits=I.bits,S){O.msg="invalid distances set",d.mode=30;break}if(d.mode=20,H===6)break t;case 20:d.mode=21;case 21:if(6<=Z&&258<=at){O.next_out=et,O.avail_out=at,O.next_in=V,O.avail_in=Z,d.hold=F,d.bits=B,c(O,tt),et=O.next_out,Q=O.output,at=O.avail_out,V=O.next_in,W=O.input,Z=O.avail_in,F=d.hold,B=d.bits,d.mode===12&&(d.back=-1);break}for(d.back=0;ft=(m=d.lencode[F&(1<<d.lenbits)-1])>>>16&255,_t=65535&m,!((ct=m>>>24)<=B);){if(Z===0)break t;Z--,F+=W[V++]<<B,B+=8}if(ft&&!(240&ft)){for(Y=ct,U=ft,u=_t;ft=(m=d.lencode[u+((F&(1<<Y+U)-1)>>Y)])>>>16&255,_t=65535&m,!(Y+(ct=m>>>24)<=B);){if(Z===0)break t;Z--,F+=W[V++]<<B,B+=8}F>>>=Y,B-=Y,d.back+=Y}if(F>>>=ct,B-=ct,d.back+=ct,d.length=_t,ft===0){d.mode=26;break}if(32&ft){d.back=-1,d.mode=12;break}if(64&ft){O.msg="invalid literal/length code",d.mode=30;break}d.extra=15&ft,d.mode=22;case 22:if(d.extra){for(w=d.extra;B<w;){if(Z===0)break t;Z--,F+=W[V++]<<B,B+=8}d.length+=F&(1<<d.extra)-1,F>>>=d.extra,B-=d.extra,d.back+=d.extra}d.was=d.length,d.mode=23;case 23:for(;ft=(m=d.distcode[F&(1<<d.distbits)-1])>>>16&255,_t=65535&m,!((ct=m>>>24)<=B);){if(Z===0)break t;Z--,F+=W[V++]<<B,B+=8}if(!(240&ft)){for(Y=ct,U=ft,u=_t;ft=(m=d.distcode[u+((F&(1<<Y+U)-1)>>Y)])>>>16&255,_t=65535&m,!(Y+(ct=m>>>24)<=B);){if(Z===0)break t;Z--,F+=W[V++]<<B,B+=8}F>>>=Y,B-=Y,d.back+=Y}if(F>>>=ct,B-=ct,d.back+=ct,64&ft){O.msg="invalid distance code",d.mode=30;break}d.offset=_t,d.extra=15&ft,d.mode=24;case 24:if(d.extra){for(w=d.extra;B<w;){if(Z===0)break t;Z--,F+=W[V++]<<B,B+=8}d.offset+=F&(1<<d.extra)-1,F>>>=d.extra,B-=d.extra,d.back+=d.extra}if(d.offset>d.dmax){O.msg="invalid distance too far back",d.mode=30;break}d.mode=25;case 25:if(at===0)break t;if(X=tt-at,d.offset>X){if((X=d.offset-X)>d.whave&&d.sane){O.msg="invalid distance too far back",d.mode=30;break}mt=X>d.wnext?(X-=d.wnext,d.wsize-X):d.wnext-X,X>d.length&&(X=d.length),yt=d.window}else yt=Q,mt=et-d.offset,X=d.length;for(at<X&&(X=at),at-=X,d.length-=X;Q[et++]=yt[mt++],--X;);d.length===0&&(d.mode=21);break;case 26:if(at===0)break t;Q[et++]=d.length,at--,d.mode=21;break;case 27:if(d.wrap){for(;B<32;){if(Z===0)break t;Z--,F|=W[V++]<<B,B+=8}if(tt-=at,O.total_out+=tt,d.total+=tt,tt&&(O.adler=d.check=d.flags?l(d.check,Q,tt,et-tt):a(d.check,Q,tt,et-tt)),tt=at,(d.flags?F:y(F))!==d.check){O.msg="incorrect data check",d.mode=30;break}B=F=0}d.mode=28;case 28:if(d.wrap&&d.flags){for(;B<32;){if(Z===0)break t;Z--,F+=W[V++]<<B,B+=8}if(F!==(4294967295&d.total)){O.msg="incorrect length check",d.mode=30;break}B=F=0}d.mode=29;case 29:S=1;break t;case 30:S=-3;break t;case 31:return-4;case 32:default:return f}return O.next_out=et,O.avail_out=at,O.next_in=V,O.avail_in=Z,d.hold=F,d.bits=B,(d.wsize||tt!==O.avail_out&&d.mode<30&&(d.mode<27||H!==4))&&nt(O,O.output,O.next_out,tt-O.avail_out)?(d.mode=31,-4):(it-=O.avail_in,tt-=O.avail_out,O.total_in+=it,O.total_out+=tt,d.total+=tt,d.wrap&&tt&&(O.adler=d.check=d.flags?l(d.check,Q,tt,O.next_out-tt):a(d.check,Q,tt,O.next_out-tt)),O.data_type=d.bits+(d.last?64:0)+(d.mode===12?128:0)+(d.mode===20||d.mode===15?256:0),(it==0&&tt===0||H===4)&&S===v&&(S=-5),S)},i.inflateEnd=function(O){if(!O||!O.state)return f;var H=O.state;return H.window&&(H.window=null),O.state=null,v},i.inflateGetHeader=function(O,H){var d;return O&&O.state&&2&(d=O.state).wrap?((d.head=H).done=!1,v):f},i.inflateSetDictionary=function(O,H){var d,W=H.length;return O&&O.state?(d=O.state).wrap!==0&&d.mode!==11?f:d.mode===11&&a(1,H,W,0)!==d.check?-3:nt(O,H,W,W)?(d.mode=31,-4):(d.havedict=1,v):f},i.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./inffast":48,"./inftrees":50}],50:[function(n,s,i){var r=n("../utils/common"),a=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],l=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],c=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],h=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];s.exports=function(b,g,v,f,k,p,_,y){var C,A,z,P,$,N,G,M,q,nt=y.bits,O=0,H=0,d=0,W=0,Q=0,V=0,et=0,Z=0,at=0,F=0,B=null,it=0,tt=new r.Buf16(16),X=new r.Buf16(16),mt=null,yt=0;for(O=0;O<=15;O++)tt[O]=0;for(H=0;H<f;H++)tt[g[v+H]]++;for(Q=nt,W=15;1<=W&&tt[W]===0;W--);if(W<Q&&(Q=W),W===0)return k[p++]=20971520,k[p++]=20971520,y.bits=1,0;for(d=1;d<W&&tt[d]===0;d++);for(Q<d&&(Q=d),O=Z=1;O<=15;O++)if(Z<<=1,(Z-=tt[O])<0)return-1;if(0<Z&&(b===0||W!==1))return-1;for(X[1]=0,O=1;O<15;O++)X[O+1]=X[O]+tt[O];for(H=0;H<f;H++)g[v+H]!==0&&(_[X[g[v+H]]++]=H);if(N=b===0?(B=mt=_,19):b===1?(B=a,it-=257,mt=l,yt-=257,256):(B=c,mt=h,-1),O=d,$=p,et=H=F=0,z=-1,P=(at=1<<(V=Q))-1,b===1&&852<at||b===2&&592<at)return 1;for(;;){for(G=O-et,q=_[H]<N?(M=0,_[H]):_[H]>N?(M=mt[yt+_[H]],B[it+_[H]]):(M=96,0),C=1<<O-et,d=A=1<<V;k[$+(F>>et)+(A-=C)]=G<<24|M<<16|q|0,A!==0;);for(C=1<<O-1;F&C;)C>>=1;if(C!==0?(F&=C-1,F+=C):F=0,H++,--tt[O]==0){if(O===W)break;O=g[v+_[H]]}if(Q<O&&(F&P)!==z){for(et===0&&(et=Q),$+=d,Z=1<<(V=O-et);V+et<W&&!((Z-=tt[V+et])<=0);)V++,Z<<=1;if(at+=1<<V,b===1&&852<at||b===2&&592<at)return 1;k[z=F&P]=Q<<24|V<<16|$-p|0}}return F!==0&&(k[$+F]=O-et<<24|64<<16|0),y.bits=Q,0}},{"../utils/common":41}],51:[function(n,s,i){s.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],52:[function(n,s,i){var r=n("../utils/common"),a=0,l=1;function c(m){for(var T=m.length;0<=--T;)m[T]=0}var h=0,b=29,g=256,v=g+1+b,f=30,k=19,p=2*v+1,_=15,y=16,C=7,A=256,z=16,P=17,$=18,N=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],G=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],M=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],q=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],nt=new Array(2*(v+2));c(nt);var O=new Array(2*f);c(O);var H=new Array(512);c(H);var d=new Array(256);c(d);var W=new Array(b);c(W);var Q,V,et,Z=new Array(f);function at(m,T,L,D,E){this.static_tree=m,this.extra_bits=T,this.extra_base=L,this.elems=D,this.max_length=E,this.has_stree=m&&m.length}function F(m,T){this.dyn_tree=m,this.max_code=0,this.stat_desc=T}function B(m){return m<256?H[m]:H[256+(m>>>7)]}function it(m,T){m.pending_buf[m.pending++]=255&T,m.pending_buf[m.pending++]=T>>>8&255}function tt(m,T,L){m.bi_valid>y-L?(m.bi_buf|=T<<m.bi_valid&65535,it(m,m.bi_buf),m.bi_buf=T>>y-m.bi_valid,m.bi_valid+=L-y):(m.bi_buf|=T<<m.bi_valid&65535,m.bi_valid+=L)}function X(m,T,L){tt(m,L[2*T],L[2*T+1])}function mt(m,T){for(var L=0;L|=1&m,m>>>=1,L<<=1,0<--T;);return L>>>1}function yt(m,T,L){var D,E,R=new Array(_+1),K=0;for(D=1;D<=_;D++)R[D]=K=K+L[D-1]<<1;for(E=0;E<=T;E++){var j=m[2*E+1];j!==0&&(m[2*E]=mt(R[j]++,j))}}function ct(m){var T;for(T=0;T<v;T++)m.dyn_ltree[2*T]=0;for(T=0;T<f;T++)m.dyn_dtree[2*T]=0;for(T=0;T<k;T++)m.bl_tree[2*T]=0;m.dyn_ltree[2*A]=1,m.opt_len=m.static_len=0,m.last_lit=m.matches=0}function ft(m){8<m.bi_valid?it(m,m.bi_buf):0<m.bi_valid&&(m.pending_buf[m.pending++]=m.bi_buf),m.bi_buf=0,m.bi_valid=0}function _t(m,T,L,D){var E=2*T,R=2*L;return m[E]<m[R]||m[E]===m[R]&&D[T]<=D[L]}function Y(m,T,L){for(var D=m.heap[L],E=L<<1;E<=m.heap_len&&(E<m.heap_len&&_t(T,m.heap[E+1],m.heap[E],m.depth)&&E++,!_t(T,D,m.heap[E],m.depth));)m.heap[L]=m.heap[E],L=E,E<<=1;m.heap[L]=D}function U(m,T,L){var D,E,R,K,j=0;if(m.last_lit!==0)for(;D=m.pending_buf[m.d_buf+2*j]<<8|m.pending_buf[m.d_buf+2*j+1],E=m.pending_buf[m.l_buf+j],j++,D===0?X(m,E,T):(X(m,(R=d[E])+g+1,T),(K=N[R])!==0&&tt(m,E-=W[R],K),X(m,R=B(--D),L),(K=G[R])!==0&&tt(m,D-=Z[R],K)),j<m.last_lit;);X(m,A,T)}function u(m,T){var L,D,E,R=T.dyn_tree,K=T.stat_desc.static_tree,j=T.stat_desc.has_stree,J=T.stat_desc.elems,st=-1;for(m.heap_len=0,m.heap_max=p,L=0;L<J;L++)R[2*L]!==0?(m.heap[++m.heap_len]=st=L,m.depth[L]=0):R[2*L+1]=0;for(;m.heap_len<2;)R[2*(E=m.heap[++m.heap_len]=st<2?++st:0)]=1,m.depth[E]=0,m.opt_len--,j&&(m.static_len-=K[2*E+1]);for(T.max_code=st,L=m.heap_len>>1;1<=L;L--)Y(m,R,L);for(E=J;L=m.heap[1],m.heap[1]=m.heap[m.heap_len--],Y(m,R,1),D=m.heap[1],m.heap[--m.heap_max]=L,m.heap[--m.heap_max]=D,R[2*E]=R[2*L]+R[2*D],m.depth[E]=(m.depth[L]>=m.depth[D]?m.depth[L]:m.depth[D])+1,R[2*L+1]=R[2*D+1]=E,m.heap[1]=E++,Y(m,R,1),2<=m.heap_len;);m.heap[--m.heap_max]=m.heap[1],function(rt,ht){var kt,Ot,Kt,Ct,Xt,Se,It=ht.dyn_tree,Zt=ht.max_code,tn=ht.stat_desc.static_tree,_i=ht.stat_desc.has_stree,yi=ht.stat_desc.extra_bits,$s=ht.stat_desc.extra_base,Re=ht.stat_desc.max_length,en=0;for(Ct=0;Ct<=_;Ct++)rt.bl_count[Ct]=0;for(It[2*rt.heap[rt.heap_max]+1]=0,kt=rt.heap_max+1;kt<p;kt++)Re<(Ct=It[2*It[2*(Ot=rt.heap[kt])+1]+1]+1)&&(Ct=Re,en++),It[2*Ot+1]=Ct,Zt<Ot||(rt.bl_count[Ct]++,Xt=0,$s<=Ot&&(Xt=yi[Ot-$s]),Se=It[2*Ot],rt.opt_len+=Se*(Ct+Xt),_i&&(rt.static_len+=Se*(tn[2*Ot+1]+Xt)));if(en!==0){do{for(Ct=Re-1;rt.bl_count[Ct]===0;)Ct--;rt.bl_count[Ct]--,rt.bl_count[Ct+1]+=2,rt.bl_count[Re]--,en-=2}while(0<en);for(Ct=Re;Ct!==0;Ct--)for(Ot=rt.bl_count[Ct];Ot!==0;)Zt<(Kt=rt.heap[--kt])||(It[2*Kt+1]!==Ct&&(rt.opt_len+=(Ct-It[2*Kt+1])*It[2*Kt],It[2*Kt+1]=Ct),Ot--)}}(m,T),yt(R,st,m.bl_count)}function o(m,T,L){var D,E,R=-1,K=T[1],j=0,J=7,st=4;for(K===0&&(J=138,st=3),T[2*(L+1)+1]=65535,D=0;D<=L;D++)E=K,K=T[2*(D+1)+1],++j<J&&E===K||(j<st?m.bl_tree[2*E]+=j:E!==0?(E!==R&&m.bl_tree[2*E]++,m.bl_tree[2*z]++):j<=10?m.bl_tree[2*P]++:m.bl_tree[2*$]++,R=E,st=(j=0)===K?(J=138,3):E===K?(J=6,3):(J=7,4))}function S(m,T,L){var D,E,R=-1,K=T[1],j=0,J=7,st=4;for(K===0&&(J=138,st=3),D=0;D<=L;D++)if(E=K,K=T[2*(D+1)+1],!(++j<J&&E===K)){if(j<st)for(;X(m,E,m.bl_tree),--j!=0;);else E!==0?(E!==R&&(X(m,E,m.bl_tree),j--),X(m,z,m.bl_tree),tt(m,j-3,2)):j<=10?(X(m,P,m.bl_tree),tt(m,j-3,3)):(X(m,$,m.bl_tree),tt(m,j-11,7));R=E,st=(j=0)===K?(J=138,3):E===K?(J=6,3):(J=7,4)}}c(Z);var I=!1;function w(m,T,L,D){tt(m,(h<<1)+(D?1:0),3),function(E,R,K,j){ft(E),j&&(it(E,K),it(E,~K)),r.arraySet(E.pending_buf,E.window,R,K,E.pending),E.pending+=K}(m,T,L,!0)}i._tr_init=function(m){I||(function(){var T,L,D,E,R,K=new Array(_+1);for(E=D=0;E<b-1;E++)for(W[E]=D,T=0;T<1<<N[E];T++)d[D++]=E;for(d[D-1]=E,E=R=0;E<16;E++)for(Z[E]=R,T=0;T<1<<G[E];T++)H[R++]=E;for(R>>=7;E<f;E++)for(Z[E]=R<<7,T=0;T<1<<G[E]-7;T++)H[256+R++]=E;for(L=0;L<=_;L++)K[L]=0;for(T=0;T<=143;)nt[2*T+1]=8,T++,K[8]++;for(;T<=255;)nt[2*T+1]=9,T++,K[9]++;for(;T<=279;)nt[2*T+1]=7,T++,K[7]++;for(;T<=287;)nt[2*T+1]=8,T++,K[8]++;for(yt(nt,v+1,K),T=0;T<f;T++)O[2*T+1]=5,O[2*T]=mt(T,5);Q=new at(nt,N,g+1,v,_),V=new at(O,G,0,f,_),et=new at(new Array(0),M,0,k,C)}(),I=!0),m.l_desc=new F(m.dyn_ltree,Q),m.d_desc=new F(m.dyn_dtree,V),m.bl_desc=new F(m.bl_tree,et),m.bi_buf=0,m.bi_valid=0,ct(m)},i._tr_stored_block=w,i._tr_flush_block=function(m,T,L,D){var E,R,K=0;0<m.level?(m.strm.data_type===2&&(m.strm.data_type=function(j){var J,st=4093624447;for(J=0;J<=31;J++,st>>>=1)if(1&st&&j.dyn_ltree[2*J]!==0)return a;if(j.dyn_ltree[18]!==0||j.dyn_ltree[20]!==0||j.dyn_ltree[26]!==0)return l;for(J=32;J<g;J++)if(j.dyn_ltree[2*J]!==0)return l;return a}(m)),u(m,m.l_desc),u(m,m.d_desc),K=function(j){var J;for(o(j,j.dyn_ltree,j.l_desc.max_code),o(j,j.dyn_dtree,j.d_desc.max_code),u(j,j.bl_desc),J=k-1;3<=J&&j.bl_tree[2*q[J]+1]===0;J--);return j.opt_len+=3*(J+1)+5+5+4,J}(m),E=m.opt_len+3+7>>>3,(R=m.static_len+3+7>>>3)<=E&&(E=R)):E=R=L+5,L+4<=E&&T!==-1?w(m,T,L,D):m.strategy===4||R===E?(tt(m,2+(D?1:0),3),U(m,nt,O)):(tt(m,4+(D?1:0),3),function(j,J,st,rt){var ht;for(tt(j,J-257,5),tt(j,st-1,5),tt(j,rt-4,4),ht=0;ht<rt;ht++)tt(j,j.bl_tree[2*q[ht]+1],3);S(j,j.dyn_ltree,J-1),S(j,j.dyn_dtree,st-1)}(m,m.l_desc.max_code+1,m.d_desc.max_code+1,K+1),U(m,m.dyn_ltree,m.dyn_dtree)),ct(m),D&&ft(m)},i._tr_tally=function(m,T,L){return m.pending_buf[m.d_buf+2*m.last_lit]=T>>>8&255,m.pending_buf[m.d_buf+2*m.last_lit+1]=255&T,m.pending_buf[m.l_buf+m.last_lit]=255&L,m.last_lit++,T===0?m.dyn_ltree[2*L]++:(m.matches++,T--,m.dyn_ltree[2*(d[L]+g+1)]++,m.dyn_dtree[2*B(T)]++),m.last_lit===m.lit_bufsize-1},i._tr_align=function(m){tt(m,2,3),X(m,A,nt),function(T){T.bi_valid===16?(it(T,T.bi_buf),T.bi_buf=0,T.bi_valid=0):8<=T.bi_valid&&(T.pending_buf[T.pending++]=255&T.bi_buf,T.bi_buf>>=8,T.bi_valid-=8)}(m)}},{"../utils/common":41}],53:[function(n,s,i){s.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},{}],54:[function(n,s,i){(function(r){(function(a,l){if(!a.setImmediate){var c,h,b,g,v=1,f={},k=!1,p=a.document,_=Object.getPrototypeOf&&Object.getPrototypeOf(a);_=_&&_.setTimeout?_:a,c={}.toString.call(a.process)==="[object process]"?function(z){process.nextTick(function(){C(z)})}:function(){if(a.postMessage&&!a.importScripts){var z=!0,P=a.onmessage;return a.onmessage=function(){z=!1},a.postMessage("","*"),a.onmessage=P,z}}()?(g="setImmediate$"+Math.random()+"$",a.addEventListener?a.addEventListener("message",A,!1):a.attachEvent("onmessage",A),function(z){a.postMessage(g+z,"*")}):a.MessageChannel?((b=new MessageChannel).port1.onmessage=function(z){C(z.data)},function(z){b.port2.postMessage(z)}):p&&"onreadystatechange"in p.createElement("script")?(h=p.documentElement,function(z){var P=p.createElement("script");P.onreadystatechange=function(){C(z),P.onreadystatechange=null,h.removeChild(P),P=null},h.appendChild(P)}):function(z){setTimeout(C,0,z)},_.setImmediate=function(z){typeof z!="function"&&(z=new Function(""+z));for(var P=new Array(arguments.length-1),$=0;$<P.length;$++)P[$]=arguments[$+1];var N={callback:z,args:P};return f[v]=N,c(v),v++},_.clearImmediate=y}function y(z){delete f[z]}function C(z){if(k)setTimeout(C,0,z);else{var P=f[z];if(P){k=!0;try{(function($){var N=$.callback,G=$.args;switch(G.length){case 0:N();break;case 1:N(G[0]);break;case 2:N(G[0],G[1]);break;case 3:N(G[0],G[1],G[2]);break;default:N.apply(l,G)}})(P)}finally{y(z),k=!1}}}}function A(z){z.source===a&&typeof z.data=="string"&&z.data.indexOf(g)===0&&C(+z.data.slice(g.length))}})(typeof self>"u"?r===void 0?this:r:self)}).call(this,typeof cn<"u"?cn:typeof self<"u"?self:typeof window<"u"?window:{})},{}]},{},[10])(10)})})(gi);var Tn=gi.exports;class Ds{settings;app;api;constructor(e,n){this.app=e,this.settings=n,this.api=new Ce(n.token)}async getPluginUrl(e,n){const s=Date.now(),i=localStorage.getItem("pluginUrl");if(console.log(i,"cachedPluginUrl"),i){const c=JSON.parse(i);if(c.name===e&&c.version===n&&s<c.expiryTime)return c.url}const r=await this.getPluginDownloadUrl(e,n),a=s+15*60*1e3,l={name:e,version:n,url:r,expiryTime:a};return localStorage.setItem("pluginUrl",JSON.stringify(l)),r}async getPluginDownloadUrl(e,n){const s=await this.api.getDownloadUrl(e,n);if(s.startsWith("http"))return s;throw new ot.Notice(`${JSON.parse(s).message}`),new Error(`${JSON.parse(s).message}`)}async downloadPluginToPluginFolder(e,n){const s=await this.getPluginUrl(e,n);if(!s)return new ot.Notice(`获取${e}插件下载地址失败！`),!1;if(app.plugins.manifests[e])return new ot.Notice(`插件${e}已经安装，无需重复安装！`),!1;try{const i=await ot.requestUrl({url:s,method:"GET"}),r=ot.normalizePath(app.vault.configDir+"/plugins/"+e)+"/",a=this.app.vault.adapter,l=await Tn.loadAsync(i.arrayBuffer);(await a.exists(r)===!1||!await a.exists(r+"manifest.json"))&&await a.mkdir(r);try{for(const[c,h]of Object.entries(l.files)){const b=r+c,g=b.substring(0,b.lastIndexOf("/"));if(await a.mkdir(g),!h.dir){const v=await h.async("string");await a.write(b,v)}}}catch{throw new ot.Notice(`插件${e}解压失败！请联系开发者处理！`,5e3),a.rmdir(r,!0),Error(`插件${e}解压失败！`)}return new ot.Notice(`插件${e}安装成功！
请在插件列表中启用`,5e3),await app.plugins.loadManifests(),setTimeout(()=>{dispatchEvent(new Event("reload-statusbar"))},100),!0}catch(i){return console.log(i),new ot.Notice(`插件${e}安装失败！${i}`,5e3),!1}}async updatePluginToExistPluginFolder(e,n){const s=await this.getPluginDownloadUrl(e,n);if(!s)throw new ot.Notice(`获取${e}插件下载地址失败！`),new Error(`获取${e}插件下载地址失败！`);if(e!="obsidian-pkmer"&&!app.plugins.manifests[e])return new ot.Notice(`插件${e}未安装！`),!1;try{let i=ot.normalizePath(app.vault.configDir+"/plugins/"+e)+"/";e=="obsidian-pkmer"&&(i=ot.normalizePath(app.vault.configDir+"/plugins/")+"/");const r=this.app.vault.adapter;if(await r.exists(i)===!1&&!await r.exists(i+"manifest.json"))throw new Error(`插件${e}未安装！`);const a=await ot.requestUrl({url:s,method:"GET"}),l=await Tn.loadAsync(a.arrayBuffer);try{for(const[c,h]of Object.entries(l.files)){const b=i+c,g=b.substring(0,b.lastIndexOf("/"));if(await r.mkdir(g),!h.dir){const v=await h.async("string");await r.write(b,v)}}}catch{throw new ot.Notice(`插件${e}解压失败！得手动清除残留文件！`),Error(`插件${e}解压失败！`)}return new ot.Notice(`插件${e}更新成功！
 请在插件列表中重新启用`),await app.plugins.loadManifests(),setTimeout(()=>{dispatchEvent(new Event("reload-statusbar"))},100),!0}catch(i){return new ot.Notice(`插件${e}更新失败！${i}`),!1}}}const Nl={class:"text-right pkmer-toolbar"},jl={class:"z-10 flex w-3/4 p-4 m-auto my-4 top-20 bg-yellow-200/50"},Hl=x("div",{class:"mr-2"},"⚠️",-1),Wl=x("span",{class:"font-bold"},"提示：",-1),wi=pe({__name:"Head",props:{isLogin:{type:Boolean},settings:{},app:{}},async setup(t){let e,n;const s=t,i=dt(0),r=dt(""),a=dt(),l=s.isLogin,c=new Ce(s.settings.token),h=new Ds(s.app,s.settings);a.value=([e,n]=bn(()=>c.getPkmerVersion()),e=await e,n(),e),l&&(i.value=([e,n]=bn(()=>c.getDownloadCount()),e=await e,n(),e)),r.value=s.app.plugins.manifests.pkmer.version;const b=Pt(()=>{if(a.value!=r.value)return"发现新版本:"+a.value;if(a.value==r.value)return"Ver:"+r.value}),g=async()=>{a.value==r.value||(new ot.Notice("正在更新插件，请稍后...",3e3),!await h.updatePluginToExistPluginFolder("obsidian-pkmer",a.value))||s.app.workspace.activeLeaf.rebuildView()},v=async()=>{l&&(localStorage.removeItem("pluginList"),localStorage.removeItem("pluginListExpiry"),localStorage.removeItem("themeList"),localStorage.removeItem("themeListExpiry")),s.app.workspace.activeLeaf.rebuildView()},f=()=>{s.app.setting.open(),s.app.setting.openTabById("pkmer")};return(k,p)=>(pt(),gt(Bt,null,[x("div",Nl,[x("span",{onClick:g,class:"inline-block font-sans text-xs py-1.5 px-3 m-1 rounded-lg bg-yellow-600 text-white shadow-xl shadow-primary-500/20"},Tt(b.value),1),St(x("span",{class:"inline-block font-sans text-xs py-1.5 px-3 m-1 rounded-lg bg-yellow-600 text-white shadow-xl shadow-primary-500/20"}," 剩余次数 "+Tt(i.value),513),[[Et,$t(l)]]),x("span",{onClick:v,class:"inline-block font-sans text-xs py-1.5 px-3 m-1 rounded-lg bg-green-500 text-white shadow-xl shadow-primary-500/20"}," 刷新 "),x("span",{class:"inline-block font-sans text-xs py-1.5 px-3 m-1 rounded-lg bg-primary-500 text-white shadow-xl shadow-primary-500/20",onClick:f}," 设置 ")]),St(x("div",jl,[x("div",{class:"flex items-center"},[Hl,x("div",null,[Wl,x("span",null,[Mt("当前是未登录状态，仅展示下载前20的热门内容，请"),x("button",{class:"bg-yellow-600 w-20 h-6 inline-block px-1 py-1 m-1 font-sans text-xs rounded-lg",onClick:f}," 点此登录"),Mt("后获取全部内容。")])])])],512),[[Et,!$t(l)]])],64))}}),Zl={"data-pagefind-body":"",class:"w-full"},Vl={class:"flex items-center justify-between w-full px-2 py-4 mx-auto font-sans search first-letter:"},Kl={class:"flex flex-wrap items-center justify-center w-full first-letter:mx-auto"},Gl={class:"w-full lg:max-w-[60vw] mx-auto py-3 md:px-6"},ql={class:"flex-wrap relative top-0 z-30 flex items-center w-full overflow-x-auto divide-x rounded dark:bg-muted-800 border-muted-200 dark:border-muted-700 divide-muted-200 dark:divide-muted-700 dark:shadow-muted-900/30 md:overflow-x-visible"},Jl={class:"widget-item"},Yl=x("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[x("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"solar:round-sort-vertical-line-duotone",class:"w-6 h-6 iconify iconify--solar"},[x("g",{fill:"none",stroke:"currentColor","stroke-width":"1.5"},[x("circle",{cx:"12",cy:"12",r:"10",opacity:".5"}),x("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M9.5 8v8m0 0L7 13.25M9.5 16l2.5-2.75M14.5 16V8m0 0L12 10.75M14.5 8l2.5 2.75"})])])],-1),Xl=[Yl],Ql={class:"widget-item"},tc=x("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[x("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"ic:sharp-update",class:"w-6 h-6 iconify iconify--ic"},[x("path",{fill:"currentColor",d:"M11 8v5l4.25 2.52l.77-1.28l-3.52-2.09V8H11zm10 2V3l-2.64 2.64A8.937 8.937 0 0 0 12 3a9 9 0 1 0 9 9h-2c0 3.86-3.14 7-7 7s-7-3.14-7-7s3.14-7 7-7c1.93 0 3.68.79 4.95 2.05L14 10h7z"})])],-1),ec=[tc],nc={class:"widget-item"},sc=x("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[x("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"material-symbols:sort-by-alpha",class:"w-6 h-6 iconify iconify--material-symbols"},[x("path",{fill:"currentColor",d:"M2 17L5.75 7H7.9l3.75 10H9.6l-.85-2.4H4.9L4.1 17H2Zm3.5-4.1h2.6L6.9 9.15h-.15L5.5 12.9Zm8.2 4.1v-1.9l5.05-6.3H13.9V7h7.05v1.9l-5 6.3H21V17h-7.3ZM9 5l3-3l3 3H9Zm3 17l-3-3h6l-3 3Z"})])],-1),rc=[sc],ic={class:"widget-item"},oc=x("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[x("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"material-symbols:whatshot",class:"iconify w-6 h-6 iconify--material-symbols"},[x("path",{fill:"currentColor",d:"M12 22q-2.5 0-4.588-1.1T3.95 17.95l4.1-4.1l3 2.5L16 11.4V14h2V8h-6v2h2.6l-3.65 3.65l-3-2.5L2.9 16.2q-.425-.95-.662-2.013T2 12q0-2.075.788-3.9t2.137-3.175q1.35-1.35 3.175-2.137T12 2q2.075 0 3.9.788t3.175 2.137q1.35 1.35 2.138 3.175T22 12q0 2.075-.788 3.9t-2.137 3.175q-1.35 1.35-3.175 2.138T12 22Z"})])],-1),ac=[oc],lc={class:"widget-item"},cc=x("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[x("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"material-symbols:sort-by-alpha",class:"w-5 h-5 iconify iconify--material-symbols"},[x("path",{fill:"currentColor",d:"M4.5 11a8.5 8.5 0 1 1 8.188 8.494a6.47 6.47 0 0 1-.68 1.457c.327.033.658.049.992.049c5.523 0 10-4.477 10-10S18.523 1 13 1S3 5.477 3 11c0 .334.016.665.048.991a6.51 6.51 0 0 1 1.458-.68A8.65 8.65 0 0 1 4.5 11Zm8.493-5.352a.75.75 0 0 0-1.493.102v6l.007.102a.75.75 0 0 0 .743.648h4l.102-.007A.75.75 0 0 0 16.25 11H13V5.75l-.007-.102ZM1 17.5a5.5 5.5 0 0 1 5-5.477v5.77l-1.646-1.647a.5.5 0 0 0-.708.708l2.5 2.5a.5.5 0 0 0 .708 0l2.5-2.5a.5.5 0 0 0-.708-.708L7 17.793v-5.77A5.5 5.5 0 1 1 1 17.5Zm8.5 3A.5.5 0 0 0 9 20H4a.5.5 0 0 0 0 1h5a.5.5 0 0 0 .5-.5Z"})])],-1),uc={class:"num"},dc=["tooltip"],fc=x("option",{class:"text-muted-800 dark:text-muted-100 bg-white dark:bg-muted-800",value:"default"}," 默认 ",-1),hc=x("option",{class:"text-muted-800 dark:text-muted-100 bg-white dark:bg-muted-800",value:"mobile"}," 移动端 ",-1),pc=x("option",{class:"text-muted-800 dark:text-muted-100 bg-white dark:bg-muted-800",value:"desktop"}," 仅桌面端 ",-1),mc=[fc,hc,pc],gc={class:"relative w-full"},wc={class:"relative group"},vc=["value"],_c=x("div",{class:"absolute top-0 left-0 hidden md:flex items-center justify-center w-16 h-8 transition-colors duration-300 text-muted-400 group-focus-within:text-primary-500"},[x("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"lucide:search",class:"w-4 h-4 iconify iconify--lucide"},[x("g",{fill:"none",stroke:"currentColor","stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2"},[x("circle",{cx:"11",cy:"11",r:"8"}),x("path",{d:"m21 21l-4.3-4.3"})])])],-1),yc={class:"text-right"},bc=x("svg",{xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",viewBox:"0 0 32 32"},[x("path",{fill:"white",d:"M16 2C8.2 2 2 8.2 2 16s6.2 14 14 14s14-6.2 14-14S23.8 2 16 2m5.4 21L16 17.6L10.6 23L9 21.4l5.4-5.4L9 10.6L10.6 9l5.4 5.4L21.4 9l1.6 1.6l-5.4 5.4l5.4 5.4z"})],-1),xc=[bc],kc={class:"w-full bg-muted-100 dark:bg-muted-1000"},Cc={class:"w-full mx-auto max-w-7xl"},Sc={class:"flex items-center w-full overflow-hidden"},Tc={class:"flex flex-col justify-between w-full h-full md:px-6 pt-4 pb-16"},Ic={class:"w-full max-w-[90vw] mx-auto space-y-4 text-center"},Ec={class:"flex flex-col gap-12 py-12"},Ac={class:"flex items-center justify-center w-full p-6 -m-3"},Oc={class:"w-full max-w-[210px] pt-16"},Pc=x("div",null,"Load More",-1),zc=[Pc],Lc={class:"fixed inset-0 z-30 flex items-center justify-center overflow-auto bg-black bg-opacity-50"},Bc={class:"flex items-center justify-between"},Dc=x("h5",{class:"mr-3 max-w-none"},null,-1),$c=x("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor"},[x("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M6 18L18 6M6 6l12 12"})],-1),Uc=[$c],Rc={class:"body-font"},Mc={class:"container px-5 py-4 mx-auto"},Fc={class:"mb-6 text-2xl font-medium text-center title-font"},Nc=x("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"line-md:downloading-loop",class:"w-6 h-6 iconify iconify--line-md"},[x("g",{fill:"none",stroke:"currentColor","stroke-linecap":"round","stroke-width":"2"},[x("path",{"stroke-dasharray":"2 4","stroke-dashoffset":"6",d:"M12 3C16.9706 3 21 7.02944 21 12C21 16.9706 16.9706 21 12 21"},[x("animate",{attributeName:"stroke-dashoffset",dur:"0.6s",repeatCount:"indefinite",values:"6;0"})]),x("path",{"stroke-dasharray":"30","stroke-dashoffset":"30",d:"M12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3"},[x("animate",{fill:"freeze",attributeName:"stroke-dashoffset",begin:"0.1s",dur:"0.3s",values:"30;0"})]),x("path",{"stroke-dasharray":"10","stroke-dashoffset":"10",d:"M12 8v7.5"},[x("animate",{fill:"freeze",attributeName:"stroke-dashoffset",begin:"0.5s",dur:"0.2s",values:"10;0"})]),x("path",{"stroke-dasharray":"6","stroke-dashoffset":"6",d:"M12 15.5l3.5 -3.5M12 15.5l-3.5 -3.5"},[x("animate",{fill:"freeze",attributeName:"stroke-dashoffset",begin:"0.7s",dur:"0.2s",values:"6;0"})])])],-1),jc=x("div",null,[x("p",{class:"mb-4 text-base leading-relaxed"}," 注意，安装和更新操作不可逆，请确认后再操作。 ")],-1),Hc={class:"flex-wrap block -mx-4 -mt-4 space-y-6 md:flex sm:-m-4 md:-mb-10 md:space-y-0"},Wc={class:"flex md:p-4 md:w-1/2"},Zc={class:"flex-grow"},Vc=pe({__name:"PluginMarket",props:{settings:{},app:{},tab:{}},async setup(t){let e,n;const s=t,i=dt(""),r=dt(""),a=dt(!1),l=dt();let c=dt(24),h=dt(1);const b=dt(!0),g=dt("default"),v=new Ce(s.settings.token),f=new Ds(s.app,s.settings),k=dt(!1),p=([e,n]=bn(()=>v.isUserLogin()),e=await e,n(),e),_=async()=>{const Y=await v.getPkmerDocs();if(p)try{l.value=await v.getPluginList(),Array.isArray(l.value)?l.value.forEach(U=>{const u=Y.find(I=>I.slug==U.id);u&&(U.contentUrl=`https://pkmer.cn/show/${u.uid}`);const o=Y.find(I=>I.slug.includes(U.id+"_readme"));o&&(U.readme_zh=`https://pkmer.cn/show/${o.uid}`);const S=s.app.plugins.manifests;U.isInstalled=S[U.id]!==void 0,U.isOutdated=U.isInstalled&&S[U.id].version!==U.version}):l.value=[]}catch(U){console.error("Error loading plugins:",U)}else l.value=await v.getTop20Plugins(),Array.isArray(l.value)?l.value.forEach(U=>{const u=Y.find(I=>I.slug==U.id);u&&(U.contentUrl=`https://pkmer.cn/show/${u.uid}`);const o=Y.find(I=>I.slug.includes(U.id+"_readme"));o&&(U.readme_zh=`https://pkmer.cn/show/${o.uid}`);const S=s.app.plugins.manifests[U.id];U.isInstalled=S!==void 0,U.isOutdated=S?.version!==U.version}):l.value=[]},y=Pt(()=>{if(l.value)return l.value.filter(u=>u.isInstalled===!0).length}),C=Pt(()=>l.value?l.value.filter(u=>u.isOutdated===!0).length:!1),A=()=>{k.value=!0,it()},z=dt(""),P=dt("all"),$=dt(""),N=dt(""),G=async()=>{a.value=!1,new ot.Notice("正在下载插件，请稍后...",3e3),await f.downloadPluginToPluginFolder($.value,N.value)&&(l.value=l.value.map(U=>(U.id==$.value&&(U.isInstalled=!0),U)))},M=async()=>{a.value=!1,new ot.Notice("正在更新插件，请稍后...",3e3),await f.updatePluginToExistPluginFolder($.value,N.value)&&(l.value=l.value.map(U=>(U.id==$.value&&(U.isOutdated=!1),U)))},q=()=>{a.value=!1},nt=Y=>{P.value=Y},O=(Y,U,u)=>{a.value=!0,$.value=U,N.value=u,Y==="download"?b.value=!0:b.value=!1},H=()=>{const Y=window.location.hash.slice(1);if(Y){const U=decodeURIComponent(Y);P.value=U}},d=dt(),W=dt(null);$n(async()=>{if(k.value=!1,H(),await _(),i.value="pkmerDownloadCount",r.value="asc",W.value=document.querySelector('.workspace-leaf-content[data-type="pkmer-downloader"]'),W.value&&V.observe(W.value),window.addEventListener("resize",Q),Q(),s.tab){const Y=JSON.parse(s.tab);Y.type=="updated"&&yt(),Y.type=="installed"&&mt()}});const Q=()=>{d.value=W.value&&W.value?.offsetWidth};Xe(()=>{W.value&&V.unobserve(W.value),window.removeEventListener("resize",Q),localStorage.removeItem("pkmer-update-tab")});const V=new ResizeObserver(()=>{Q()}),et=Y=>{ot.debounce(()=>{z.value=Y.target.value},800)()},Z=Pt(()=>{const Y=z.value.toLowerCase().trim();let U=l.value;return g.value==="mobile"?U=U.filter(u=>!u.isDesktopOnly):g.value==="desktop"&&(U=U.filter(u=>u.isDesktopOnly)),Y.length<1?U:U.filter(u=>u.id.toLowerCase().includes(Y)||u.name.toLowerCase().includes(Y)||u.author.toLowerCase().includes(Y)||u.description?.toLowerCase().includes(Y)||u.chineseDescription?.toLowerCase().includes(Y)||u.tags?.toLowerCase().includes(Y))}),at=Pt(()=>Math.ceil(Z.value?.length/c.value)),F=Pt(()=>h.value<at.value);function B(){i.value="pkmerDownloadCount",r.value=r.value==="asc"?"desc":"asc"}function it(){i.value="downloadCount",r.value=r.value==="asc"?"desc":"asc"}function tt(){i.value="updateTime",r.value=r.value==="asc"?"desc":"asc"}function X(){i.value="fileName",r.value=r.value==="asc"?"desc":"asc"}function mt(){i.value="installed",r.value=r.value==="asc"?"desc":"asc"}function yt(){i.value="updated",r.value=r.value==="asc"?"desc":"asc"}const ct=Pt(()=>{let Y=[];return P.value=="all"?i.value==="downloadCount"?r.value==="asc"?Y=Z.value.sort((U,u)=>U.downloadCount-u.downloadCount):Y=Z.value.sort((U,u)=>u.downloadCount-U.downloadCount):i.value==="updateTime"?r.value==="asc"?Y=Z.value.sort((U,u)=>new Date(U.pluginUpdatedTime).getTime()-new Date(u.pluginUpdatedTime).getTime()):Y=Z.value.sort((U,u)=>new Date(u.pluginUpdatedTime).getTime()-new Date(U.pluginUpdatedTime).getTime()):i.value==="fileName"?r.value==="asc"?Y=Z.value.sort((U,u)=>U.name.localeCompare(u.name)):Y=Z.value.sort((U,u)=>u.name.localeCompare(U.name)):i.value==="installed"?Y=Z.value.filter(U=>U.isInstalled):i.value==="updated"?Y=Z.value.filter(U=>U.isOutdated):i.value==="pkmerDownloadCount"?r.value==="asc"?Y=Z.value.sort((U,u)=>U.id==="obsidian-memos"?-1:u.id==="obsidian-memos"?1:U.source==="community"&&u.source!=="community"?-1:U.source!=="community"&&u.source==="community"?1:u.pkmerDownloadCount-U.pkmerDownloadCount):Y=Z.value.sort((U,u)=>U.source==="community"&&u.source!=="community"?-1:U.source!=="community"&&u.source==="community"?1:U.pkmerDownloadCount-u.pkmerDownloadCount):Y=Z.value?.slice(0,h.value*c.value):(Y=Z.value.filter(U=>U.tags?.includes(P.value)),i.value==="downloadCount"?r.value==="asc"?Y=Y.sort((U,u)=>U.downloadCount-u.downloadCount):Y=Y.sort((U,u)=>u.downloadCount-U.downloadCount):i.value==="updateTime"?r.value==="asc"?Y=Y.sort((U,u)=>new Date(U.pluginUpdatedTime).getTime()-new Date(u.pluginUpdatedTime).getTime()):Y=Y.sort((U,u)=>new Date(u.pluginUpdatedTime).getTime()-new Date(U.pluginUpdatedTime).getTime()):i.value==="fileName"?r.value==="asc"?Y=Y.sort((U,u)=>U.name.localeCompare(u.name)):Y=Y.sort((U,u)=>u.name.localeCompare(U.name)):i.value==="pkmerDownloadCount"&&(r.value==="asc"?Y=Y.sort((U,u)=>U.pkmerDownloadCount-u.pkmerDownloadCount):Y=Y.sort((U,u)=>u.pkmerDownloadCount-U.pkmerDownloadCount))),Y?.slice(0,h.value*c.value)}),ft=Pt(()=>Array.isArray(Z.value)?Z.value:[]),_t=()=>{const Y=h.value*c.value,U=Y+c.value,u=ct.value?.slice(Y,U);h.value++,l.value=[...l.value,...u]};return(Y,U)=>(pt(),gt(Bt,null,[Lt(wi,{settings:s.settings,isLogin:$t(p),app:s.app},null,8,["settings","isLogin","app"]),x("main",Zl,[x("div",Vl,[x("div",Kl,[x("div",Gl,[x("div",ql,[x("div",Jl,[x("button",{class:At([{active:i.value=="downloadCount"},"flex items-center px-2 font-sans transition-colors duration-300 group whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"按下载量",flow:"down",onClick:it},Xl,2)]),x("div",Ql,[x("button",{class:At([{active:i.value=="updateTime"},"items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"按更新时间",flow:"down",onClick:tt},ec,2)]),x("div",nc,[x("button",{class:At([{active:i.value=="fileName"},"items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"按文件名排序",flow:"down",onClick:X},rc,2)]),x("div",ic,[x("button",{class:At(["active items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700",{active:i.value=="pkmerDownloadCount"}]),tooltip:"按插件热度",flow:"down",onClick:B},ac,2)]),x("div",lc,[x("button",{class:At([{active:i.value=="installed"},"items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"筛选已安装插件",flow:"down",onClick:mt},[cc,x("span",uc,Tt(y.value),1)],2)]),x("div",{class:"widget-item",tooltip:g.value=="mobile"?"支持移动端的插件":g.value=="desktop"?"仅支持桌面端的插件":"所有终端"},[St(x("select",{"onUpdate:modelValue":U[0]||(U[0]=u=>g.value=u),class:"block border px-2 w-18 text-muted-800 dark:text-muted-100 bg-white dark:bg-muted-800 rounded-md shadow-sm focus:outline-none"},mc,512),[[Na,g.value]])],8,dc),x("div",gc,[x("div",wc,[x("input",{type:"text",class:"w-full h-8 pl-2 md:pl-16 pr-5 font-sans text-base leading-5 transition-all duration-300 text-muted-600 focus:border-muted-300 focus:shadow-lg focus:shadow-muted-300/50 dark:focus:shadow-muted-800/50 placeholder:text-muted-300 dark:placeholder:text-muted-500 dark:bg-muted-800 dark:text-muted-200 dark:border-muted-700 dark:focus:border-muted-600 tw-accessibility",placeholder:"Search plugins...",onInput:et,value:z.value},null,40,vc),_c])])])])])]),x("div",yc,[St(x("button",{onClick:yt,class:"inline-block w-full font-sans text-xs px-3 m-1 rounded-lg bg-green-600 text-white shadow-xl shadow-primary-500/20"},[Mt(" 发现 "+Tt(C.value)+" 个插件更新！【点我查看】 ",1),x("button",{onClick:jn(A,["stop"]),class:"ml-2 px-3 shadow-none"},xc)],512),[[Et,C.value&&!k.value]])]),x("section",kc,[x("div",Cc,[x("div",Sc,[x("div",Tc,[x("div",Ic,[Lt(Xa,{"active-category":P.value,pluginList:ft.value,onUpdateActiveCategory:nt},null,8,["active-category","pluginList","onUpdateActiveCategory"])]),x("div",Ec,[x("div",{class:At(["grid gap-6 -m-3 ptablet:grid-cols-2 ltablet:grid-cols-3 lg:grid-cols-3",{"!grid-cols-1":d.value<=768&&d.value>0,"!grid-cols-2":d.value>768&&d.value<1024,"!grid-cols-3":d.value>1024}])},[(pt(!0),gt(Bt,null,Un(ct.value,u=>(pt(),gt("div",{key:u.id},[Lt(Fl,{app:s.app,"plugin-info":u,isLogin:$t(p),onDownloadUpdatePlugin:O},null,8,["app","plugin-info","isLogin","onDownloadUpdatePlugin"])]))),128))],2),x("div",Ac,[x("div",Oc,[F.value?(pt(),gt("button",{key:0,onClick:_t,class:"relative inline-flex items-center justify-center w-full gap-2 px-6 py-4 font-sans font-semibold transition-all duration-300 border rounded-lg dark:bg-muted-700 text-muted-800 dark:text-white border-muted-300 dark:border-muted-600 tw-accessibility hover:shadow-xl hover:shadow-muted-400/20"},zc)):Qe("",!0)])])])])])])])]),St(x("div",Lc,[x("div",{class:"max-w-3xl px-6 py-4 mx-auto text-left bg-white rounded shadow-lg dark:bg-muted-700",onClick:U[2]||(U[2]=u=>a.value=!1),"x-transition:enter":"motion-safe:ease-out duration-300","x-transition:enter-start":"opacity-0 scale-90","x-transition:enter-end":"opacity-100 scale-100"},[x("div",Bc,[Dc,x("button",{type:"button",class:"z-50 cursor-pointer",onClick:U[1]||(U[1]=u=>a.value=!1)},Uc)]),x("section",Rc,[x("div",Mc,[x("h3",Fc,[Nc,Mt(" 即将安装...."+Tt($.value.toUpperCase()),1)]),jc,x("div",Hc,[x("div",Wc,[x("div",Zc,[b.value?(pt(),gt("h2",{key:0,onClick:G,class:"block py-4 my-1 font-sans text-base font-medium text-center text-green-500 transition-all duration-300 border rounded-lg cursor-pointer dark:hover:bg-green-300/20 hover:bg-green-100 border-green-700/25"}," 确 认 ")):(pt(),gt("h2",{key:1,onClick:M,class:"block py-4 my-1 font-sans text-base font-medium text-center text-green-500 transition-all duration-300 border rounded-lg cursor-pointer dark:hover:bg-green-300/20 hover:bg-green-100 border-green-700/25"}," 更 新 "))])]),x("div",{class:"flex md:p-4 md:w-1/2"},[x("div",{class:"flex-grow"},[x("h2",{onClick:q,class:"block py-4 my-1 font-sans text-base font-medium text-center text-green-500 transition-all duration-300 border rounded-lg cursor-pointer dark:hover:bg-green-300/20 hover:bg-green-100 border-green-700/25"}," 取 消 ")])])])])])])],512),[[Et,a.value]])],64))}});const Ue=t=>(Zr("data-v-1a6e40f1"),t=t(),Vr(),t),Kc={class:"relative"},Gc={class:"h-full flex flex-col items-start gap-4 p-6"},qc={class:"relative w-full space-y-2"},Jc={class:"relative"},Yc={class:"mark"},Xc=Ue(()=>x("span",{class:"learn"},"Tips ",-1)),Qc=[Xc],tu=["data-name"],eu=["src","alt"],nu=["src"],su={class:"plugin_name relative flex items-center h-10 overflow-hidden"},ru={"data-pagefind-meta":"title",class:"flex items-center font-heading text-lg font-medium text-muted-800 dark:text-white leading-6"},iu=["src"],ou={class:"-mt-2 text-orange-500 ml-2 text-lg font-serif font-bold italic"},au=Ue(()=>x("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-v-35974737":"","data-icon":"mdi:temperature-celsius",class:"-mt-2 text-orange-500 iconify w-4 h-4 iconify--mdi"},[x("path",{fill:"currentColor",d:"M16.5 5c1.55 0 3 .47 4.19 1.28l-1.16 2.89A4.47 4.47 0 0 0 16.5 8C14 8 12 10 12 12.5s2 4.5 4.5 4.5c1.03 0 1.97-.34 2.73-.92l1.14 2.85A7.47 7.47 0 0 1 16.5 20A7.5 7.5 0 0 1 9 12.5A7.5 7.5 0 0 1 16.5 5M6 3a3 3 0 0 1 3 3a3 3 0 0 1-3 3a3 3 0 0 1-3-3a3 3 0 0 1 3-3m0 2a1 1 0 0 0-1 1a1 1 0 0 0 1 1a1 1 0 0 0 1-1a1 1 0 0 0-1-1Z"})],-1)),lu={class:"flex items-center flex-wrap leading-6 text-muted-600 dark:text-muted-400"},cu=["src"],uu=["src"],du=["href"],fu=Ue(()=>x("span",{class:"text-white font-sans text-xs py-1 px-3 m-1 rounded-lg bg-yellow-500"}," 教程 ",-1)),hu=[fu],pu={class:"w-full mt-auto space-y-6"},mu={class:"flex items-center justify-start w-full relative"},gu=["src","onerror"],wu=["href"],vu={class:"pl-2"},_u=["tooltip"],yu={class:"block ml-auto font-sans text-sm text-muted-400"},bu=Ue(()=>x("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round",class:"svg-icon lucide-download"},[x("path",{d:"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"}),x("polyline",{points:"7 10 12 15 17 10"}),x("line",{x1:"12",y1:"15",x2:"12",y2:"3"})],-1)),xu=Ue(()=>x("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 20 20","data-v-5ade68da":"","data-icon":"dashicons:update",class:"block w-4 h-4 mx-auto iconify iconify--dashicons"},[x("path",{fill:"currentColor",d:"M10.2 3.28c3.53 0 6.43 2.61 6.92 6h2.08l-3.5 4l-3.5-4h2.32a4.439 4.439 0 0 0-4.32-3.45c-1.45 0-2.73.71-3.54 1.78L4.95 5.66a6.965 6.965 0 0 1 5.25-2.38zm-.4 13.44c-3.52 0-6.43-2.61-6.92-6H.8l3.5-4c1.17 1.33 2.33 2.67 3.5 4H5.48a4.439 4.439 0 0 0 4.32 3.45c1.45 0 2.73-.71 3.54-1.78l1.71 1.95a6.95 6.95 0 0 1-5.25 2.38z"})],-1)),ku=Ue(()=>x("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 48 48","data-v-5ade68da":"","data-icon":"icon-park-outline:link-cloud-sucess",class:"block w-4 h-4 mx-auto iconify iconify--icon-park-outline"},[x("g",{fill:"none",stroke:"currentColor","stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"4"},[x("path",{d:"M12 33c-3.333 0-8-1.5-8-7.5c0-7 7-8.5 9-8.5c1-3.5 3-9 11-9c7 0 10 4 11 7.5c0 0 9 1 9 9.5c0 6-4 8-8 8"}),x("path",{d:"m18 33l6 5l8-10"})])],-1)),Cu=pe({__name:"ThemeCard",props:{app:{},themeInfo:{},isLogin:{type:Boolean}},emits:["download-update-theme"],setup(t){const e=t,n=e.isLogin;function s(){return e.themeInfo.authorAvatar&&e.themeInfo.authorAvatar.length>0?e.themeInfo.authorAvatar:c(e.themeInfo.author)}const i=dt(!1);let r=[];e.themeInfo.tags&&e.themeInfo.tags.length>0&&(r=e.themeInfo.tags.split(","));function a(v){return v>=1e6?(v/1e6).toFixed(0)+"M":v>=1e3?(v/1e3).toFixed(0)+"K":v.toString()}function l(v){return(v.match(/\b\w/g)||[]).join("").toUpperCase()}function c(v){let f="";if(v){const k=l(v);/^[a-zA-Z]+$/.test(k)?f=`https://dummyimage.com/100x100/555/fff&text=${k.toUpperCase()}`:f=`https://dummyimage.com/100x100/555/ffff&text=${encodeURIComponent(k)}`}else f="https://cdn.pkmer.cn/covers/logo.png!nomark";return f}const h=async v=>{await e.app.customCss.setTheme(v)},b=()=>`background-image:url(${`https://pkmer.cn/img/cover/${Math.floor(Math.random()*11)}.jpg`});`,g=()=>{e.app.setting.open(),e.app.setting.openTabById("pkmer")};return(v,f)=>(pt(),gt("div",Kc,[x("div",Gc,[x("div",qc,[x("div",Jc,[St(x("span",{class:"absolute top-3 left-3 inline-block font-sans text-xs py-1.5 px-3 m-1 rounded-lg bg-primary-500 text-white shadow-xl shadow-primary-500/20"},Tt($t(r)[0]),513),[[Et,$t(r)[0]]]),St(x("view",Yc,Qc,512),[[Et,v.themeInfo.contentUrl]]),St(x("div",{class:"noimg h-40 md:h-52","data-name":v.themeInfo.name,style:Je(b())},null,12,tu),[[Et,!v.themeInfo.banner]]),St(x("img",{class:"w-full h-52 object-contain aspect-video rounded-xl cursor-pointer",src:v.themeInfo.banner?.replace("gif!pkmer","gif").replace("!pkmer","!nomark"),alt:v.themeInfo.name,width:"348",height:"208",onerror:"javascript:this.src='https://cdn.pkmer.cn/covers/pkmer2.png!nomark';this.οnerrοr=null;",onClick:f[0]||(f[0]=k=>i.value=!0)},null,8,eu),[[Et,v.themeInfo.banner]]),i.value?(pt(),gt("div",{key:0,class:"overlay",onClick:f[2]||(f[2]=k=>i.value=!1)},[x("img",{src:v.themeInfo.banner?.replace("!nomark","!pkmer"),alt:"原图",onClick:f[1]||(f[1]=jn(()=>{},["stop"]))},null,8,nu)])):Qe("",!0)]),x("div",su,[x("h3",ru,[Mt(Tt(v.themeInfo.name)+" ",1),x("img",{class:"-mt-2 ml-2",alt:"version",src:`https://img.shields.io/badge/${v.themeInfo.version}-brightgreen`},null,8,iu),x("span",ou,Tt(a(v.themeInfo.pkmerDownloadCount)),1),au])]),x("p",lu,[x("img",{class:"h-ful",alt:"GitHub stars",src:`https://img.shields.io/github/stars/${v.themeInfo.repo}?style=plastic&color=4F46E5&label=关注量`},null,8,cu),x("img",{class:"h-ful ml-2",alt:"下载数量",src:`https://img.shields.io/badge/下载总数-${a(v.themeInfo.downloadCount)}-yellow`},null,8,uu),x("a",{class:At(["ml-2",{visible:v.themeInfo.contentUrl,invisible:!v.themeInfo.contentUrl}]),href:v.themeInfo.contentUrl?v.themeInfo.contentUrl:"javascript:void(0)"},hu,10,du)]),St(x("p",{class:"plugin_desc text-base mt-auto min-h-[3rem] text-muted-600 dark:text-muted-400 leading-6"},Tt(v.themeInfo.chineseDescription?.replace("【机翻】","")||v.themeInfo.description),513),[[Et,v.themeInfo.description]])]),x("div",pu,[x("div",mu,[x("img",{class:"w-12 mask mask-blob",src:s(),onerror:`javascript:this.src='${c(v.themeInfo.author)}'`,alt:"avatar"},null,8,gu),x("a",{href:"https://github.com/"+v.themeInfo.repo},[x("div",vu,[x("h3",{class:"whitespace-nowrap text-ellipsis overflow-hidden max-w-[140px] font-heading font-medium text-muted-800 dark:text-muted-50",tooltip:v.themeInfo.author},Tt(v.themeInfo.author),9,_u)])],8,wu),x("div",yu,[St(x("button",{onClick:g,class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility"}," 请登录 ",512),[[Et,!$t(n)]]),St(x("div",null,[v.themeInfo.isInstalled?v.themeInfo.isInstalled&&v.themeInfo.isOutdated?(pt(),gt("button",{key:1,class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility",onClick:f[4]||(f[4]=k=>v.$emit("download-update-theme","update",v.themeInfo.name,v.themeInfo.version))},[xu,Mt(" 更新 ")])):(pt(),gt("button",{key:2,onClick:f[5]||(f[5]=k=>h(v.themeInfo.name)),tooltip:"主题已安装，应用当前主题",flow:"down",class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility"},[ku,Mt(" 应用 ")])):St((pt(),gt("button",{key:0,class:"inline-flex items-center h-8 px-2 py-1 text-white transition-colors duration-300 border-0 rounded shadow-xl whitespace-nowrap bg-primary-500 hover:bg-primary-600 shadow-primary-500/20 tw-accessibility",onClick:f[3]||(f[3]=k=>v.$emit("download-update-theme","download",v.themeInfo.name,v.themeInfo.version))},[bu,Mt(" 下载 ")],512)),[[Et,$t(n)]])],512),[[Et,$t(n)]])])])])])]))}});const Su=mi(Cu,[["__scopeId","data-v-1a6e40f1"]]),Tu={class:"relative w-full flex justify-center gap-2 flex-wrap"},Iu=["onClick"],Eu=pe({__name:"ThemeToolbar",props:{themeList:{},activeCategory:{}},emits:["update-active-category"],setup(t){const e=t;let n=[];const s=Pt(()=>{Array.isArray(e.themeList)&&e.themeList.forEach(a=>{if(a.tags&&typeof a.tags=="string"){let l=a.tags.split(",").map(c=>c.trim());l=l.filter(c=>c!==""),l.length>0&&n.push(l[0])}});let r=[];return Array.isArray(e.themeList)&&e.themeList.forEach(a=>{if(a.modes&&typeof a.modes=="string"){let l=a.modes.split(",").map(c=>c.trim());l=l.filter(c=>c!==""),l.length>0&&r.push(l[0])}}),n.concat(r)}),i=Pt(()=>Array.from(new Set(s.value)));return(r,a)=>(pt(),gt("div",Tu,[x("button",{class:At(["h-6 inline-flex justify-center items-center py-2 px-4 font-sans text-sm rounded-lg bg-muted-200 dark:bg-muted-800 text-muted-500 hover:bg-muted-300 dark:hover:bg-muted-700 dark:hover:text-muted-200 border-2 transition-colors duration-300 tw-accessibility",r.activeCategory==="all"?"border-primary-500 bg-muted-50 dark:bg-muted-700":"border-transparent "]),onClick:a[0]||(a[0]=l=>r.$emit("update-active-category","all"))}," All ",2),(pt(!0),gt(Bt,null,Un(i.value,l=>(pt(),gt("div",{class:"plugin-item",key:l},[x("button",{class:At(["flex-1 inline-flex justify-center items-center py-2 px-4 font-sans text-sm rounded-lg bg-muted-200 dark:bg-muted-800 text-muted-500 hover:bg-muted-300 dark:hover:bg-muted-700 dark:hover:text-muted-200 border-2 transition-colors duration-300 tw-accessibility",r.activeCategory===l?"border-primary-500 bg-muted-50 dark:bg-muted-700":"border-transparent"]),onClick:()=>{r.$emit("update-active-category",l)}},Tt(l),11,Iu)]))),128))]))}});class vi{settings;app;api;constructor(e,n){this.app=e,this.settings=n,this.api=new Ce(n.token)}async getThemeUrl(e,n){const s=Date.now(),i=localStorage.getItem("themeUrl");if(i){const c=JSON.parse(i);if(c.name===e&&c.version===n&&s<c.expiryTime)return c.url}const r=await this.getThemeDownloadUrl(e,n),a=s+15*60*1e3,l={name:e,version:n,url:r,expiryTime:a};return localStorage.setItem("themeUrl",JSON.stringify(l)),r}async getThemeDownloadUrl(e,n){const s=await this.api.getThemeDownloadUrl(e,n);if(s.startsWith("http"))return s;throw new ot.Notice(`${JSON.parse(s).message}`),new Error(`${JSON.parse(s).message}`)}async downloadThemeToThemeFolder(e,n){const s=await this.getThemeUrl(e,n);if(!s)return new ot.Notice(`获取${e}主题下载地址失败！`),!1;if(app.customCss.themes[e])return new ot.Notice(`主题${e}已经安装，无需重复安装！`),!1;try{const i=await ot.requestUrl({url:s,method:"GET"}),r=ot.normalizePath(app.vault.configDir+"/themes/"+e)+"/",a=this.app.vault.adapter,l=await Tn.loadAsync(i.arrayBuffer);(await a.exists(r)===!1||!await a.exists(r+"manifest.json"))&&await a.mkdir(r);try{l.forEach(async(c,h)=>{const b=r+c,g=await h.async("string");await a.write(b,g)})}catch{throw new ot.Notice(`主题${e}解压失败！得手动清除残留文件！`,5e3),a.rmdir(r,!0),Error(`主题${e}解压失败！`)}return new ot.Notice(`主题${e}安装并启用成功！
`,5e3),await app.customCss.setTheme(e),setTimeout(()=>{dispatchEvent(new Event("reload-statusbar"))},100),!0}catch(i){return console.log(i),new ot.Notice(`主题${e}安装失败！${i}`,5e3),!1}}async updateThemeToExistThemeFolder(e,n){const s=await this.getThemeDownloadUrl(e,n);if(!s)throw new ot.Notice(`获取${e}主题下载地址失败！`),new Error(`获取${e}主题下载地址失败！`);if(!app.customCss.themes[e])return new ot.Notice(`主题${e}未安装！`),!1;try{const i=ot.normalizePath(app.vault.configDir+"/themes/"+e)+"/",r=this.app.vault.adapter;if(await r.exists(i)===!1&&!await r.exists(i+"manifest.json"))throw new Error(`主题${e}未安装！`);const a=await ot.requestUrl({url:s,method:"GET"}),l=await Tn.loadAsync(a.arrayBuffer);try{l.forEach(async(c,h)=>{const b=i+c,g=await h.async("string");await r.write(b,g)})}catch{throw new ot.Notice(`主题${e}解压失败！得手动清除残留文件！`),Error(`主题${e}解压失败！`)}return new ot.Notice(`主题${e}更新成功！
 新主题已生效`),await app.customCss.setTheme(e),setTimeout(()=>{dispatchEvent(new Event("reload-statusbar"))},100),!0}catch(i){return new ot.Notice(`主题${e}更新失败！${i}`),!1}}}const Au={"data-pagefind-body":"",class:"w-full"},Ou={class:"flex items-center justify-between w-full px-2 py-4 mx-auto font-sans search first-letter:"},Pu={class:"flex flex-wrap items-center justify-center w-full first-letter:mx-auto"},zu={class:"w-full lg:max-w-[60vw] mx-auto py-3 md:px-6"},Lu={class:"flex-wrap relative top-0 z-30 flex items-center w-full overflow-x-auto divide-x rounded dark:bg-muted-800 border-muted-200 dark:border-muted-700 divide-muted-200 dark:divide-muted-700 dark:shadow-muted-900/30 md:overflow-x-visible"},Bu={class:"widget-item"},Du=x("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[x("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"solar:round-sort-vertical-line-duotone",class:"w-6 h-6 iconify iconify--solar"},[x("g",{fill:"none",stroke:"currentColor","stroke-width":"1.5"},[x("circle",{cx:"12",cy:"12",r:"10",opacity:".5"}),x("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M9.5 8v8m0 0L7 13.25M9.5 16l2.5-2.75M14.5 16V8m0 0L12 10.75M14.5 8l2.5 2.75"})])])],-1),$u=[Du],Uu={class:"widget-item"},Ru=x("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[x("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"ic:sharp-update",class:"w-6 h-6 iconify iconify--ic"},[x("path",{fill:"currentColor",d:"M11 8v5l4.25 2.52l.77-1.28l-3.52-2.09V8H11zm10 2V3l-2.64 2.64A8.937 8.937 0 0 0 12 3a9 9 0 1 0 9 9h-2c0 3.86-3.14 7-7 7s-7-3.14-7-7s3.14-7 7-7c1.93 0 3.68.79 4.95 2.05L14 10h7z"})])],-1),Mu=[Ru],Fu={class:"widget-item"},Nu=x("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[x("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"material-symbols:sort-by-alpha",class:"w-6 h-6 iconify iconify--material-symbols"},[x("path",{fill:"currentColor",d:"M2 17L5.75 7H7.9l3.75 10H9.6l-.85-2.4H4.9L4.1 17H2Zm3.5-4.1h2.6L6.9 9.15h-.15L5.5 12.9Zm8.2 4.1v-1.9l5.05-6.3H13.9V7h7.05v1.9l-5 6.3H21V17h-7.3ZM9 5l3-3l3 3H9Zm3 17l-3-3h6l-3 3Z"})])],-1),ju=[Nu],Hu={class:"widget-item"},Wu=x("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[x("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"material-symbols:whatshot",class:"iconify w-6 h-6 iconify--material-symbols"},[x("path",{fill:"currentColor",d:"M12 22q-2.5 0-4.588-1.1T3.95 17.95l4.1-4.1l3 2.5L16 11.4V14h2V8h-6v2h2.6l-3.65 3.65l-3-2.5L2.9 16.2q-.425-.95-.662-2.013T2 12q0-2.075.788-3.9t2.137-3.175q1.35-1.35 3.175-2.137T12 2q2.075 0 3.9.788t3.175 2.137q1.35 1.35 2.138 3.175T22 12q0 2.075-.788 3.9t-2.137 3.175q-1.35 1.35-3.175 2.138T12 22Z"})])],-1),Zu=[Wu],Vu={class:"widget-item"},Ku=x("span",{class:"items-center justify-center w-10 h-10 whitespace-pre-wrap flex text-muted-400 group-hover:text-primary-500"},[x("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"material-symbols:sort-by-alpha",class:"w-5 h-5 iconify iconify--material-symbols"},[x("path",{fill:"currentColor",d:"M4.5 11a8.5 8.5 0 1 1 8.188 8.494a6.47 6.47 0 0 1-.68 1.457c.327.033.658.049.992.049c5.523 0 10-4.477 10-10S18.523 1 13 1S3 5.477 3 11c0 .334.016.665.048.991a6.51 6.51 0 0 1 1.458-.68A8.65 8.65 0 0 1 4.5 11Zm8.493-5.352a.75.75 0 0 0-1.493.102v6l.007.102a.75.75 0 0 0 .743.648h4l.102-.007A.75.75 0 0 0 16.25 11H13V5.75l-.007-.102ZM1 17.5a5.5 5.5 0 0 1 5-5.477v5.77l-1.646-1.647a.5.5 0 0 0-.708.708l2.5 2.5a.5.5 0 0 0 .708 0l2.5-2.5a.5.5 0 0 0-.708-.708L7 17.793v-5.77A5.5 5.5 0 1 1 1 17.5Zm8.5 3A.5.5 0 0 0 9 20H4a.5.5 0 0 0 0 1h5a.5.5 0 0 0 .5-.5Z"})])],-1),Gu={class:"num"},qu={class:"relative w-full"},Ju={class:"relative group"},Yu=["value"],Xu=x("div",{class:"absolute top-0 left-0 hidden md:flex items-center justify-center w-16 h-8 transition-colors duration-300 text-muted-400 group-focus-within:text-primary-500"},[x("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"lucide:search",class:"w-4 h-4 iconify iconify--lucide"},[x("g",{fill:"none",stroke:"currentColor","stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2"},[x("circle",{cx:"11",cy:"11",r:"8"}),x("path",{d:"m21 21l-4.3-4.3"})])])],-1),Qu={class:"text-right"},td=x("svg",{xmlns:"http://www.w3.org/2000/svg",width:"1em",height:"1em",viewBox:"0 0 32 32"},[x("path",{fill:"white",d:"M16 2C8.2 2 2 8.2 2 16s6.2 14 14 14s14-6.2 14-14S23.8 2 16 2m5.4 21L16 17.6L10.6 23L9 21.4l5.4-5.4L9 10.6L10.6 9l5.4 5.4L21.4 9l1.6 1.6l-5.4 5.4l5.4 5.4z"})],-1),ed=[td],nd={class:"w-full bg-muted-100 dark:bg-muted-1000"},sd={class:"w-full max-w-7xl mx-auto"},rd={class:"w-full flex items-center overflow-hidden"},id={class:"w-full h-full flex flex-col justify-between md:px-6 pb-16 pt-4"},od={class:"w-full max-w-[90vw] mx-auto space-y-4 text-center"},ad={class:"flex flex-col gap-12 py-12"},ld={class:"w-full flex items-center justify-center p-6 -m-3"},cd={class:"w-full max-w-[210px] pt-16"},ud=x("div",null,"Load More",-1),dd=[ud],fd={class:"fixed inset-0 z-30 flex items-center justify-center overflow-auto bg-black bg-opacity-50"},hd=x("h5",{class:"mr-3 max-w-none"},null,-1),pd=x("svg",{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor"},[x("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M6 18L18 6M6 6l12 12"})],-1),md=[pd],gd={class:"body-font"},wd={class:"container md:px-5 py-4 mx-auto"},vd={class:"text-2xl font-medium title-font text-center mb-6"},_d=x("svg",{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",role:"img",width:"1em",height:"1em",viewBox:"0 0 24 24","data-icon":"line-md:downloading-loop",class:"w-6 h-6 iconify iconify--line-md"},[x("g",{fill:"none",stroke:"currentColor","stroke-linecap":"round","stroke-width":"2"},[x("path",{"stroke-dasharray":"2 4","stroke-dashoffset":"6",d:"M12 3C16.9706 3 21 7.02944 21 12C21 16.9706 16.9706 21 12 21"},[x("animate",{attributeName:"stroke-dashoffset",dur:"0.6s",repeatCount:"indefinite",values:"6;0"})]),x("path",{"stroke-dasharray":"30","stroke-dashoffset":"30",d:"M12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3"},[x("animate",{fill:"freeze",attributeName:"stroke-dashoffset",begin:"0.1s",dur:"0.3s",values:"30;0"})]),x("path",{"stroke-dasharray":"10","stroke-dashoffset":"10",d:"M12 8v7.5"},[x("animate",{fill:"freeze",attributeName:"stroke-dashoffset",begin:"0.5s",dur:"0.2s",values:"10;0"})]),x("path",{"stroke-dasharray":"6","stroke-dashoffset":"6",d:"M12 15.5l3.5 -3.5M12 15.5l-3.5 -3.5"},[x("animate",{fill:"freeze",attributeName:"stroke-dashoffset",begin:"0.7s",dur:"0.2s",values:"6;0"})])])],-1),yd=x("div",null,[x("p",{class:"mb-4 text-base leading-relaxed"}," 注意，安装和更新操作不可逆，请确认后再操作。 ")],-1),bd={class:"block md:flex flex-wrap sm:-m-4 -mx-4 md:-mb-10 md:-mt-4 md:space-y-0"},xd={class:"md:p-4 md:w-1/2 flex"},kd={class:"flex-grow"},Cd=pe({__name:"ThemeMarket",props:{settings:{},app:{},tab:{}},async setup(t){let e,n;const s=t,i=dt(""),r=dt(!1),a=dt([]);let l=dt(24),c=dt(1);const h=dt(!1),b=dt(!0),g=new Ce(s.settings.token),v=new vi(s.app,s.settings),f=([e,n]=bn(()=>g.isUserLogin()),e=await e,n(),e),k=()=>{h.value=!0,tt()},p=async()=>{const U=await g.getPkmerDocs();if(f)try{a.value=await g.getThemeList(),a.value=a.value.sort((u,o)=>o.downloadCount-u.downloadCount),Array.isArray(a.value)?a.value.forEach(u=>{const o=U.find(I=>I.slug==u.name.replace(/\s+/g,"-").toLowerCase());o&&(u.contentUrl=`https://pkmer.cn/show/${o.uid}`);const S=s.app.customCss.themes;u.isInstalled=S[u.name]!==void 0,u.isOutdated=u.isInstalled&&S[u.name].version!==u.version}):a.value=[]}catch(u){console.error("Error loading themes:",u)}else a.value=await g.getTop20Themes(),Array.isArray(a.value)?a.value.forEach(u=>{const o=U.find(I=>I.slug==u.name.replace(/\s+/g,"-").toLowerCase());o&&(u.contentUrl=`https://pkmer.cn/show/${o.uid}`);const S=s.app.customCss.themes;u.isInstalled=S[u.name]!==void 0,u.isOutdated=u.isInstalled&&S[u.name].version!==u.version}):a.value=[]},_=Pt(()=>{if(a.value)return a.value.filter(o=>o.isInstalled===!0).length}),y=Pt(()=>a.value?a.value.filter(o=>o.isOutdated===!0).length:!1),C=dt(""),A=dt("all"),z=dt(""),P=dt(""),$=dt(0),N=U=>{ot.debounce(()=>{C.value=U.target.value},800)()},G=()=>{r.value=!1},M=U=>{A.value=U},q=(U,u,o)=>{r.value=!0,z.value=u,P.value=o,U==="download"?b.value=!0:b.value=!1},nt=async()=>{r.value=!1,new ot.Notice("正在更新主题，请稍后...",3e3),await v.updateThemeToExistThemeFolder(z.value,P.value)&&(a.value=a.value.map(u=>(u.name==z.value&&(u.isOutdated=!1),u)))},O=async()=>{r.value=!1,new ot.Notice("正在下载主题，请稍后...",3e3),await v.downloadThemeToThemeFolder(z.value,P.value)&&(a.value=a.value.map(u=>(u.name==z.value&&(u.isInstalled=!0),u)))},H=()=>{r.value=!1},d=()=>{const U=window.location.hash.slice(1);if(U){const u=decodeURIComponent(U);A.value=u}},W=dt(),Q=dt(null);$n(async()=>{if(d(),await p(),i.value="pkmerDownloadCount",B.value="asc",Q.value=document.querySelector('.workspace-leaf-content[data-type="pkmer-downloader"]'),Q.value&&et.observe(Q.value),window.addEventListener("resize",V),V(),f&&($.value=await g.getDownloadCount()),s.tab){const U=JSON.parse(s.tab);U.type=="tupdated"&&ct(),U.type=="tupdated"&&yt()}});const V=()=>{W.value=Q.value&&Q.value?.offsetWidth};Xe(()=>{Q.value&&et.unobserve(Q.value),window.removeEventListener("resize",V)});const et=new ResizeObserver(()=>{V()}),Z=Pt(()=>{const U=C.value.toLowerCase().trim();return U.length<1?a.value:a.value.filter(u=>u.name.toLowerCase().includes(U)||u.author.toLowerCase().includes(U)||u.chineseDescription?.toLowerCase().includes(U)||u.tags?.toLowerCase().includes(U))}),at=Pt(()=>Math.ceil(Z.value?.length/l.value)),F=Pt(()=>c.value<at.value),B=dt("");function it(){i.value="pkmerDownloadCount",B.value=B.value==="asc"?"desc":"asc"}function tt(){i.value="downloadCount",B.value=B.value==="asc"?"desc":"asc"}function X(){i.value="updateTime",B.value=B.value==="asc"?"desc":"asc"}function mt(){i.value="fileName",B.value=B.value==="asc"?"desc":"asc"}function yt(){i.value="installed",B.value=B.value==="asc"?"desc":"asc"}function ct(){i.value="updated",B.value=B.value==="asc"?"desc":"asc"}const ft=Pt(()=>{let U=[];return A.value=="all"?i.value==="downloadCount"?B.value==="asc"?U=Z.value.sort((u,o)=>u.downloadCount-o.downloadCount):U=Z.value.sort((u,o)=>o.downloadCount-u.downloadCount):i.value==="updateTime"?B.value==="asc"?U=Z.value.sort((u,o)=>new Date(u.updatedTime).getTime()-new Date(o.updatedTime).getTime()):U=Z.value.sort((u,o)=>new Date(o.updatedTime).getTime()-new Date(u.updatedTime).getTime()):i.value==="fileName"?B.value==="asc"?U=Z.value.sort((u,o)=>u.name.localeCompare(o.name)):U=Z.value.sort((u,o)=>o.name.localeCompare(u.name)):i.value==="pkmerDownloadCount"?B.value==="asc"?U=Z.value.sort((u,o)=>o.pkmerDownloadCount-u.pkmerDownloadCount):U=Z.value.sort((u,o)=>u.pkmerDownloadCount-o.pkmerDownloadCount):i.value==="installed"?U=Z.value.filter(u=>u.isInstalled):i.value==="updated"?U=Z.value.filter(u=>u.isOutdated):U=Z.value?.slice(0,c.value*l.value):(U=Z.value.filter(u=>u.tags?.toLowerCase().includes(A.value)||u.modes?.toLowerCase().includes(A.value)),i.value==="downloadCount"?B.value==="asc"?U=U.sort((u,o)=>u.downloadCount-o.downloadCount):U=U.sort((u,o)=>o.downloadCount-u.downloadCount):i.value==="updateTime"?B.value==="asc"?U=U.sort((u,o)=>new Date(u.updatedTime).getTime()-new Date(o.updatedTime).getTime()):U=U.sort((u,o)=>new Date(o.updatedTime).getTime()-new Date(u.updatedTime).getTime()):i.value==="fileName"?B.value==="asc"?U=U.sort((u,o)=>u.name.localeCompare(o.name)):U=U.sort((u,o)=>o.name.localeCompare(u.name)):i.value==="pkmerDownloadCount"&&(B.value==="asc"?U=U.sort((u,o)=>u.pkmerDownloadCount-o.pkmerDownloadCount):U=U.sort((u,o)=>o.pkmerDownloadCount-u.pkmerDownloadCount))),U?.slice(0,c.value*l.value)}),_t=Pt(()=>Array.isArray(Z.value)?Z.value:[]),Y=()=>{const U=c.value*l.value,u=U+l.value,o=ft.value?.slice(U,u);c.value++,a.value=[...a.value,...o]};return(U,u)=>(pt(),gt(Bt,null,[Lt(wi,{settings:s.settings,isLogin:$t(f),app:s.app},null,8,["settings","isLogin","app"]),x("main",Au,[x("div",Ou,[x("div",Pu,[x("div",zu,[x("div",Lu,[x("div",Bu,[x("button",{class:At([{active:i.value=="downloadCount"},"flex items-center px-2 font-sans transition-colors duration-300 group whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"按下载量",flow:"down",onClick:tt},$u,2)]),x("div",Uu,[x("button",{class:At([{active:i.value=="updateTime"},"items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"按更新时间",flow:"down",onClick:X},Mu,2)]),x("div",Fu,[x("button",{class:At([{active:i.value=="fileName"},"items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"按文件名排序",flow:"down",onClick:mt},ju,2)]),x("div",Hu,[x("button",{class:At(["active items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700",{active:i.value=="pkmerDownloadCount"}]),tooltip:"按主题热度",flow:"down",onClick:it},Zu,2)]),x("div",Vu,[x("button",{class:At([{active:i.value=="installed"},"items-center flex-1 px-2 font-sans transition-colors duration-300 group md:flex-auto md:flex whitespace-nowrap text-muted-800 dark:text-muted-100 hover:bg-muted-50 dark:hover:bg-muted-700"]),tooltip:"筛选已安装主题",flow:"down",onClick:yt},[Ku,x("span",Gu,Tt(_.value),1)],2)]),x("div",qu,[x("div",Ju,[x("input",{type:"text",class:"w-full h-8 pl-2 md:pl-16 pr-5 font-sans text-base leading-5 transition-all duration-300 text-muted-600 focus:border-muted-300 focus:shadow-lg focus:shadow-muted-300/50 dark:focus:shadow-muted-800/50 placeholder:text-muted-300 dark:placeholder:text-muted-500 dark:bg-muted-800 dark:text-muted-200 dark:border-muted-700 dark:focus:border-muted-600 tw-accessibility",placeholder:"Search themes...",onInput:N,value:C.value},null,40,Yu),Xu])])])])])]),x("div",Qu,[St(x("button",{onClick:ct,class:"inline-block w-full font-sans text-xs px-3 m-1 rounded-lg bg-green-600 text-white shadow-xl shadow-primary-500/20"},[Mt(" 发现 "+Tt(y.value)+" 个主题更新！【点我查看】 ",1),x("button",{onClick:jn(k,["stop"]),class:"ml-2 px-3 shadow-none"},ed)],512),[[Et,y.value]])]),x("section",nd,[x("div",sd,[x("div",rd,[x("div",id,[x("div",od,[Lt(Eu,{"active-category":A.value,themeList:_t.value,onUpdateActiveCategory:M},null,8,["active-category","themeList","onUpdateActiveCategory"])]),x("div",ad,[x("div",{class:At(["grid gap-6 -m-3 ptablet:grid-cols-2 ltablet:grid-cols-3 lg:grid-cols-3",{"!grid-cols-1":W.value<=768&&W.value>0,"!grid-cols-2":W.value>768&&W.value<1024,"!grid-cols-3":W.value>1024}])},[(pt(!0),gt(Bt,null,Un(ft.value,o=>(pt(),gt("div",{key:o.id},[Lt(Su,{app:s.app,"theme-info":o,isLogin:$t(f),onDownloadUpdateTheme:q},null,8,["app","theme-info","isLogin","onDownloadUpdateTheme"])]))),128))],2),x("div",ld,[x("div",cd,[F.value?(pt(),gt("button",{key:0,onClick:Y,class:"w-full inline-flex items-center justify-center gap-2 font-sans font-semibold bg-white dark:bg-muted-700 text-muted-800 dark:text-white border border-muted-300 dark:border-muted-600 relative px-6 py-4 rounded-lg tw-accessibility hover:shadow-xl hover:shadow-muted-400/20 transition-all duration-300"},dd)):Qe("",!0)])])])])])])])]),St(x("div",fd,[x("div",{class:"max-w-3xl px-6 py-4 mx-auto text-left bg-white rounded shadow-lg dark:bg-muted-700",onClick:H,"x-transition:enter":"motion-safe:ease-out duration-300","x-transition:enter-start":"opacity-0 scale-90","x-transition:enter-end":"opacity-100 scale-100"},[x("div",{class:"flex items-center justify-between"},[hd,x("button",{type:"button",class:"z-50 cursor-pointer",onClick:H},md)]),x("section",gd,[x("div",wd,[x("h3",vd,[_d,Mt(" 即将安装...."+Tt(z.value.toUpperCase()),1)]),yd,x("div",bd,[x("div",xd,[x("div",kd,[b.value?(pt(),gt("h2",{key:0,onClick:O,class:"block py-4 my-1 font-sans text-base font-medium text-center text-green-500 transition-all duration-300 border rounded-lg cursor-pointer dark:hover:bg-green-300/20 hover:bg-green-100 border-green-700/25"}," 确 认 ")):(pt(),gt("h2",{key:1,onClick:nt,class:"block py-4 my-1 font-sans text-base font-medium text-center text-green-500 transition-all duration-300 border rounded-lg cursor-pointer dark:hover:bg-green-300/20 hover:bg-green-100 border-green-700/25"}," 更 新 "))])]),x("div",{class:"md:p-4 md:w-1/2 flex"},[x("div",{class:"flex-grow"},[x("h2",{onClick:G,class:"block py-4 my-1 font-sans text-base font-medium text-center text-green-500 transition-all duration-300 border rounded-lg cursor-pointer dark:hover:bg-green-300/20 hover:bg-green-100 border-green-700/25"}," 取 消 ")])])])])])])],512),[[Et,r.value]])],64))}});const Sd={class:"w-full"},Td={class:"flex flex-wrap md:content-center"},Id={class:"flex items-center justify-between md:px-8 mx-auto font-sans logo scale-90 md:scale-125 max-w-7xl"},Ed={class:"flex flex-wrap items-center justify-center w-full mx-auto max-w-7xl"},Ad={class:"items-center w-auto gap-6 basis-0"},Od={href:"https://pkmer.cn",class:"flex items-center gap-3 no-underline text-inherit"},Pd={class:"transition-all duration-300 text-primary-600"},zd=ca('<g><path d="M395.631 98.837C358.783 45.867 309.195 16.696 256 16.696S153.217 45.867 116.369 98.837c-35.565 51.124-55.151 118.797-55.151 190.554 0 113.54 87.379 205.913 194.783 205.913s194.783-92.373 194.783-205.913c-.001-71.756-19.588-139.43-55.153-190.554z" style="" fill="#ffc170" class=""></path><path d="M256 495.304c107.403 0 194.783-92.373 194.783-205.913 0-71.757-19.586-139.43-55.151-190.554C358.783 45.867 309.195 16.696 256 16.696" style="" fill="#e1a05a" data-original="#ffd6a0" class=""></path><path d="M0 128h55.652v33.391H0z" style="" fill="#a0bdd4" class=""></path><path d="M13.053 51.94h55.65v33.391h-55.65z" style="" transform="rotate(-160.527 40.878 68.636)" fill="#a0bdd4" class=""></path><path d="M456.348 128H512v33.391h-55.652z" style="" fill="#a0bdd4" class=""></path><path d="M454.411 40.807h33.391v55.65h-33.391z" style="" transform="rotate(-109.469 471.111 68.636)" fill="#a0bdd4" class=""></path><path d="m187.719 277.315 14.949-29.896-47.598-21.154-93.659 51.085c-.124 4-.194 8.013-.194 12.041 0 8.564.505 17.005 1.471 25.298l93.892-51.214 31.139 13.84zM450.63 278.997l-105.587-52.794-89.463 44.731-22.369-9.942-14.948 29.896 38.155 16.958 88.625-44.31 104.166 52.083a218.592 218.592 0 0 0 1.573-26.228c.001-3.476-.059-6.938-.152-10.394z" style="" fill="#f8f8f8" class=""></path><path d="m450.63 278.997-105.587-52.794-89.463 44.731.839 36.913 88.624-44.31 104.166 52.083a218.592 218.592 0 0 0 1.573-26.228 382.07 382.07 0 0 0-.152-10.395z" style="" fill="#fef5ea" class=""></path></g>',1),Ld=[zd],Bd=x("span",{class:"font-sans text-lg font-extrabold tracking-widest uppercase whitespace-nowrap feat dark:text-muted-100"},"Obsidian PKMer Market",-1),Dd={class:"pkmer-tab-container"},$d={class:"mb-5 flex list-none flex-row flex-wrap border-b-0 pl-0"},Ud={class:"relative cursor-pointer my-2 block border-x-0 border-b-2 border-t-0 border-transparent px-7 pb-3.5 pt-4 font-bold uppercase leading-tight hover:isolate dark:hover:bg-slate-900/30 hover:bg-neutral-100 focus:isolate focus:border-transparent"},Rd={class:"relative cursor-pointer my-2 block border-x-0 border-b-2 border-t-0 border-transparent px-7 pb-3.5 pt-4 font-bold uppercase leading-tight hover:isolate dark:hover:bg-slate-900/30 hover:bg-neutral-100 focus:isolate focus:border-transparent"},Md={class:"pkmer-tab-content"},Fd={key:0,class:"opacity-100 transition-opacity duration-150 ease-linear"},Nd={key:1,class:"opacity-100 transition-opacity duration-150 ease-linear"},jd=x("h1",null,"Loading...",-1),Hd=x("h2",null,"如果长时间加载，请确保网络通常，并关闭网络代理。",-1),Wd=pe({__name:"PluginMarketView",props:{settings:{},app:{}},setup(t){const e=t,n=dt("plugin"),s=dt(),i=dt({type:"",count:0}),r=a=>{n.value=a};return $n(()=>{s.value=localStorage.getItem("pkmer-update-tab"),s.value!==null&&s.value!==""&&(i.value=JSON.parse(s.value),i.value.type=="tupdated"&&r("theme"))}),Xe(()=>{localStorage.removeItem("pkmer-update-tab")}),(a,l)=>(pt(),gt(Bt,null,[x("div",Sd,[x("div",Td,[x("div",Id,[x("div",Ed,[x("div",Ad,[x("a",Od,[x("div",Pd,[(pt(),gt("svg",{class:At(["fill-current w-7 h-7","w-7 h-7"]),width:"1.75rem",xmlns:"http://www.w3.org/2000/svg",version:"1.1","xmlns:xlink":"http://www.w3.org/1999/xlink","xmlns:svgjs":"http://svgjs.com/svgjs",viewBox:"0 0 512 512","xml:space":"preserve"},Ld))]),Bd])])])])])]),x("div",Dd,[x("ul",$d,[x("li",{class:At(["flex-auto text-center",{active:n.value==="plugin"}]),onClick:l[0]||(l[0]=c=>r("plugin"))},[x("span",Ud,[Mt(" 插件市场 "),St(x("span",{class:"num bradge"},Tt(i.value.count),513),[[Et,i.value.type=="updated"&&i.value.count>0]])])],2),x("li",{class:At(["flex-auto text-center relative",{active:n.value==="theme"}]),onClick:l[1]||(l[1]=c=>r("theme"))},[x("span",Rd,[Mt(" 主题市场 "),St(x("span",{class:"num bradge"},Tt(i.value.count),513),[[Et,i.value.type=="tupdated"&&i.value.count>0]])])],2)]),x("div",Md,[(pt(),li(bo,null,{default:rs(()=>[n.value==="plugin"?(pt(),gt("div",Fd,[Lt(Vc,{settings:e.settings,app:e.app,tab:s.value},null,8,["settings","app","tab"])])):n.value==="theme"?(pt(),gt("div",Nd,[Lt(Cd,{settings:e.settings,app:e.app,tab:s.value},null,8,["settings","app","tab"])])):Qe("",!0)]),fallback:rs(()=>[jd,Hd]),_:1}))])])],64))}});const In="pkmer-downloader";class Zd extends ot.ItemView{plugin;settings;constructor(e,n){super(e),this.plugin=n,this.settings=n.settings}getIcon(){return"bookmark"}getDisplayText(){return"Pkmer Market"}getViewType(){return In}async onOpen(){const{contentEl:e}=this;Va(Wd,{settings:this.settings,app:this.app}).mount(e)}}class mr{modal;settingTab;constructor(e){this.settingTab=e;const{remote:n}=require("electron"),{BrowserWindow:s}=n;this.modal=new s({parent:n.getCurrentWindow(),width:630,height:840,show:!1}),this.modal.once("ready-to-show",()=>{this.modal.setTitle("登录Pkmer~"),this.modal.setMenu(null),this.modal.show()}),this.modal.webContents.on("will-navigate",()=>{this.modal.webContents.executeJavaScript("localStorage.getItem('pkmer-token')").then(i=>{i&&(this.settingTab.saveToken(i),this.settingTab.display(),this.modal.close(),this.settingTab.app.workspace.activeLeaf.rebuildView())})})}async doLogin(){try{await this.modal.loadURL("https://pkmer.cn/products/signIn/")}catch(e){console.log(e)}}async Loginout(){try{await this.modal.loadURL("https://pkmer.cn/products/UserProfile/"),this.modal.webContents.executeJavaScript("localStorage.removeItem('pkmer-token')").then(()=>{this.settingTab.saveToken(""),this.settingTab.display(),this.modal.close(),this.settingTab.app.workspace.activeLeaf.rebuildView()})}catch(e){console.log(e),new ot.Notice("你没登录咋退出？")}}onClose(){this.modal.close()}}class Vd extends ot.PluginSettingTab{plugin;constructor(e,n){super(e,n),this.plugin=n}display(){const{containerEl:e}=this;e.empty(),e.createEl("h1",{text:"Obsidian PKMer Market"}),e.setAttribute("data-type","pkmer-downloader"),ot.Platform.isDesktopApp&&(this.plugin.settings.token?this.showLoginOut():this.showLogin()),new ot.Setting(e).setName("Token").setDesc("Default token for pkmer downloader").addText(s=>s.setPlaceholder("登录获取token").setValue(this.plugin.settings.token).setDisabled(!1).onChange(async i=>{this.plugin.settings.token=i,await this.plugin.saveSettings()})),ot.Platform.isDesktopApp&&new ot.Setting(e).setName("Tips").setDesc("如果登录后，仍然提示登录，请退出重新登录PKMER "),ot.Platform.isMobileApp&&new ot.Setting(e).setName("Tips").setDesc("移动端需要您手动在电脑端登录获取token后复制到输入框中 "),new ot.Setting(e).setName("🥚打开PKMer Market").setDesc("点击开始挑选心爱的插件和主题吧").addButton(s=>{s.setIcon("download").setButtonText("进入").setClass("px-5").setCta().onClick(()=>{app.setting.close(),setTimeout(()=>{this.app.workspace.getLeaf().setViewState({active:!0,type:In})},100)})}),e.createEl("hr",{cls:"mt-2"});const n=e.createEl("div",{cls:"mt-4"});n.createEl("a",{text:"🥚PKMer.cn",href:"https://pkmer.cn"}),n.createEl("span",{text:" | "}),n.createEl("a",{text:"👤个人中心",href:"https://pkmer.cn/products/UserProfile/"})}showLogin(){new ot.Setting(this.containerEl).setName("登录Pkmer").addButton(e=>e.setButtonText("登录").setCta().onClick(async()=>{e.setDisabled(!0),await new mr(this).doLogin(),this.display()}))}showLoginOut(){new ot.Setting(this.containerEl).setName("退出登录").addButton(e=>e.setButtonText("退出").setCta().onClick(async()=>{e.setDisabled(!0),await new mr(this).Loginout(),this.display()}))}saveToken(e){this.plugin.settings.token=e,this.plugin.saveSettings()}}let Kd=class{constructor(e,n){this.app=e,this.settings=n,this.api=new Ce(this.settings.token),this.isUserLogin=!1,this.allPluginList=[],this.loadAllPlugins()}api;isUserLogin;allPluginList;async loadAllPlugins(){try{if(this.isUserLogin=await this.api.isUserLogin(),this.isUserLogin){const e=await this.api.getPluginList();this.allPluginList=Array.isArray(e)?e:[],await this.updatePluginStatus()}}catch(e){throw console.error("Error loading plugins:",e),new Error("Failed to load plugins")}}async updatePluginStatus(){const e=this.app.plugins.manifests;this.allPluginList.forEach(n=>{n.isInstalled=!!e[n.id],n.isOutdated=n.isInstalled&&e[n.id].version!==n.version})}async getPluginStatus(){await this.loadAllPlugins();const e=this.allPluginList.filter(s=>s.isInstalled).length,n=this.allPluginList.filter(s=>s.isOutdated).length;return{installedCount:e,updatedCount:n}}};class Gd{constructor(e,n){this.app=e,this.settings=n,this.api=new Ce(this.settings.token),this.isUserLogin=!1,this.allThemeList=[],this.loadAllThemes()}api;isUserLogin;allThemeList;async loadAllThemes(){try{if(this.isUserLogin=await this.api.isUserLogin(),this.isUserLogin){const e=await this.api.getThemeList();this.allThemeList=Array.isArray(e)?e:[],await this.updateThemeStatus()}}catch(e){console.error("Error loading themes:",e)}}async updateThemeStatus(){const e=this.app.customCss.themes;this.allThemeList.forEach(n=>{n.isInstalled=e[n.name]!==void 0,n.isOutdated=n.isInstalled&&e[n.name].version!==n.version})}async getThemeStatus(){await this.loadAllThemes();const e=this.allThemeList.filter(s=>s.isInstalled).length,n=this.allThemeList.filter(s=>s.isOutdated).length;return{tinstalledCount:e,tupdatedCount:n}}}const qd={token:""};class Jd extends ot.Plugin{settings;statusBarIconEl;async onload(){await this.loadSettings(),localStorage.removeItem("pkmer-update-tab"),this.registerCustomURI(),this.registerCustomCommands(),this.registerCustomRibbon(),this.addStatusBarIcon(),await this.reloadStatusBarHandler(),this.addSettingTab(new Vd(this.app,this)),this.registerView(In,e=>new Zd(e,this)),addEventListener("reload-statusbar",async()=>{this.reloadStatusBarHandler()})}reloadStatusBarHandler=async()=>{await this.updateStatusBar("")};onunload(){removeEventListener("reload-statusbar",this.reloadStatusBarHandler)}async loadSettings(){this.settings=Object.assign({},qd,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}registerCustomURI(){this.registerObsidianProtocolHandler("pkmer-installer",async e=>{const n=e.pluginID,s=e.themeID,i=e.version;if(!this.settings.token){new ot.Notice("请先登录获取token",5e3),app.setting.open(),app.setting.openTabById("PKMer");return}if(n)try{new ot.Notice("正在下载插件，请稍后...",3e3),await new Ds(app,this.settings).downloadPluginToPluginFolder(n,i)}catch{new ot.Notice("下载失败，请检查网络")}if(s)try{new ot.Notice("正在安装主题，请稍后...",3e3),await new vi(app,this.settings).downloadThemeToThemeFolder(s,i)}catch{new ot.Notice("下载失败，请检查网络")}})}registerCustomCommands(){this.addCommand({id:"open-pkmer-market-view",name:"Open Pkmer Market View",callback:()=>{this.openView("")}})}registerCustomRibbon(){this.addRibbonIcon("download","Open Pkmer Market",()=>{this.openView("")})}addStatusBarIcon(){this.statusBarIconEl=this.addStatusBarItem(),this.statusBarIconEl.addClass("pkmer-statusbar"),this.statusBarIconEl.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-rocket"><path d="M4.5 16.5c-1.5 1.26-2 5-2 5s3.74-.5 5-2c.71-.84.7-2.13-.09-2.91a2.18 2.18 0 0 0-2.91-.09z"/><path d="m12 15-3-3a22 22 0 0 1 2-3.95A12.88 12.88 0 0 1 22 2c0 2.72-.78 7.5-6 11a22.35 22.35 0 0 1-4 2z"/><path d="M9 12H4s.55-3.03 2-4c1.62-1.08 5 0 5 0"/><path d="M12 15v5s3.03-.55 4-2c1.08-1.62 0-5 0-5"/></svg>',this.registerDomEvent(this.statusBarIconEl,"click",()=>{this.updateStatusBar("statusbar")})}async updateStatusBar(e){const n=new Kd(app,this.settings),s=new Gd(app,this.settings),{installedCount:i,updatedCount:r}=await n.getPluginStatus(),{tinstalledCount:a,tupdatedCount:l}=await s.getThemeStatus();if(r>0||l>0)if(this.statusBarIconEl.setAttribute("aria-label-position","top"),this.statusBarIconEl.setAttribute("aria-label","Updated Info: Plugins: "+r+"/"+i+", Themes: "+l+"/"+a),this.statusBarIconEl.innerHTML=`<svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-rocket"><path d="M4.5 16.5c-1.5 1.26-2 5-2 5s3.74-.5 5-2c.71-.84.7-2.13-.09-2.91a2.18 2.18 0 0 0-2.91-.09z"/><path d="m12 15-3-3a22 22 0 0 1 2-3.95A12.88 12.88 0 0 1 22 2c0 2.72-.78 7.5-6 11a22.35 22.35 0 0 1-4 2z"/><path d="M9 12H4s.55-3.03 2-4c1.62-1.08 5 0 5 0"/><path d="M12 15v5s3.03-.55 4-2c1.08-1.62 0-5 0-5"/></svg>
            <svg xmlns="http://www.w3.org/2000/svg"  style="margin-top: -12px;margin-left: -3px;"  width="1em" height="1em" viewBox="0 0 15 15"><path fill="orange" d="M9.875 7.5a2.375 2.375 0 1 1-4.75 0a2.375 2.375 0 0 1 4.75 0"/></svg> `,e==="statusbar")if(r>0){const c={type:"updated",count:r};this.openView(JSON.stringify(c))}else{const c={type:"tupdated",count:l};this.openView(JSON.stringify(c))}else this.openView("");else this.statusBarIconEl.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-rocket"><path d="M4.5 16.5c-1.5 1.26-2 5-2 5s3.74-.5 5-2c.71-.84.7-2.13-.09-2.91a2.18 2.18 0 0 0-2.91-.09z"/><path d="m12 15-3-3a22 22 0 0 1 2-3.95A12.88 12.88 0 0 1 22 2c0 2.72-.78 7.5-6 11a22.35 22.35 0 0 1-4 2z"/><path d="M9 12H4s.55-3.03 2-4c1.62-1.08 5 0 5 0"/><path d="M12 15v5s3.03-.55 4-2c1.08-1.62 0-5 0-5"/></svg>',this.statusBarIconEl.setAttribute("aria-label","Updated Info: Plugins: "+r+"/"+i+", Themes: "+l+"/"+a),this.openView("")}openView(e){let n=!1;app.workspace.iterateAllLeaves(s=>{try{if(s.getViewState().type==="pkmer-downloader"){n=!0,localStorage.setItem("pkmer-update-tab",e),setTimeout(()=>{this.app.workspace.setActiveLeaf(s),this.app.workspace.activeLeaf.rebuildView()},300);return}}catch(i){console.error("Error occurred while processing leaf:",i)}}),n||(localStorage.setItem("pkmer-update-tab",e),setTimeout(()=>{this.app.workspace?.getLeaf()?.setViewState({active:!0,type:In})},300))}}module.exports=Jd;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
